<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stand-Down Comedian</title>
  
  
  <link href="http://giantslayer1980.github.io/atom.xml" rel="self"/>
  
  <link href="http://giantslayer1980.github.io/"/>
  <updated>2023-05-20T13:14:25.973Z</updated>
  <id>http://giantslayer1980.github.io/</id>
  
  <author>
    <name>Giantslayer1980</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tennis Booking</title>
    <link href="http://giantslayer1980.github.io/Tennis-Booking/"/>
    <id>http://giantslayer1980.github.io/Tennis-Booking/</id>
    <published>2023-05-19T16:00:00.000Z</published>
    <updated>2023-05-20T13:14:25.973Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/Images/TennisBooking.jpg" alt="Tennis Booking"></p><p>这是一款基于云开发的网球场管理工具。它具有网球场地发布、会员管理、场地预订等基本模块。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/Images/TennisBooking.jpg&quot; alt=&quot;Tennis Booking&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一款基于云开发的网球场管理工具。它具有网球场地发布、会员管理、场地预订等基本模块。&lt;/p&gt;
</summary>
    
    
    
    <category term="WeChat Mini Program" scheme="http://giantslayer1980.github.io/categories/WeChat-Mini-Program/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift</title>
    <link href="http://giantslayer1980.github.io/Swift/"/>
    <id>http://giantslayer1980.github.io/Swift/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-05-20T12:49:42.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语:"></a>相关术语:</h1><ul><li><strong>UIKit</strong> is the iOS user interface toolkit.</li><li><strong>IB</strong> is Interface Builder.</li><li><strong>CA</strong> is Core Animation. Like CALayer is a Core Animation data type responsible for managing the way your view looks. Core Animation handles animation.</li><li><strong>CG</strong> is Apple’s Core Graphics framework. Like CGColor. Core Graphics handles drawing.</li><li><strong>KVO</strong> is key-value observing.</li><li><strong>NS</strong> is Next Step. Steve Jobs did lots.</li><li><strong>VFL</strong> is a technique called Auto Layout Visual Format Language.</li><li><strong>GCD</strong> is Grand Central Dispatch.</li><li><strong>FIFO</strong> is First In, First Out.</li><li><strong>MK</strong> is Mapkit.</li><li><strong>NS</strong> came from the NeXTSTEP libraries Foundation and AppKit(those names are still used by Apple’s Cocoa frameworks). </li><li><strong>UN</strong> is UserNotification.</li><li><strong>CL</strong> is CoreLocation.</li><li><strong>MC</strong> is Multipeer Connectivity.</li><li><strong>CM</strong> is Core Motion.</li><li><strong>LA</strong> is the Local Authentication framework.</li><li><strong>HSB</strong> is Hue, Saturation and Brightness. Using this method of creating colors you specify values between 0 and 1 to control how saturated a color is (from 0 &#x3D; gray to 1 &#x3D; pure color) and brightness (from 0 &#x3D; black to 1 &#x3D; maximum brightness), and 0 to 1 for hue. “Hue” is a value from 0 to 1 also, but it represents a position on a color wheel, like using a color picker on your Mac. Hues 0 and 1 both represent red, with all other colors lying in between.</li></ul><h1 id="FileManager"><a href="#FileManager" class="headerlink" title="FileManager"></a>FileManager</h1><h2 id="枚举程序设备目录内的所有文件"><a href="#枚举程序设备目录内的所有文件" class="headerlink" title="枚举程序设备目录内的所有文件"></a>枚举程序设备目录内的所有文件</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fm <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"><span class="keyword">let</span> path <span class="operator">=</span> <span class="type">Bundle</span>.main.resourcePath<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> items <span class="operator">=</span> <span class="keyword">try!</span> fm.contentsOfDirectory(atPath: path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h1><h2 id="Bundle-main-url-forResource-–-仅通过文件名而返回该文件的url"><a href="#Bundle-main-url-forResource-–-仅通过文件名而返回该文件的url" class="headerlink" title="Bundle.main.url(forResource:) – 仅通过文件名而返回该文件的url"></a>Bundle.main.url(forResource:) – 仅通过文件名而返回该文件的url</h2><p>Finding a path to a file is something you’ll do a lot, because even though you know the file is called “start.txt” you don’t know where it might be on the filesystem. So, we use a built-in method of Bundle to find it: path(forResource:). This takes as its parameters the name of the file and its path extension, and returns a String? – i.e., you either get the path back or you get nil if it didn’t exist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设要找寻到start.txt这个文件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> startWordsURL <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;start&quot;</span>, withExtension: <span class="string">&quot;txt&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 若找到该start.txt的url后读取里面的文本内容</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> startWords <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">String</span>(contentsOf: startWordsURL) &#123;</span><br><span class="line">        <span class="comment">// 省略后续代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bundle-main-urls-forResourcesWithExtension-String-subdirectory-String-–-从直接指定文件名及具体目录名称来找所有文件"><a href="#Bundle-main-urls-forResourcesWithExtension-String-subdirectory-String-–-从直接指定文件名及具体目录名称来找所有文件" class="headerlink" title="Bundle.main.urls(forResourcesWithExtension: String?, subdirectory: String?) – 从直接指定文件名及具体目录名称来找所有文件"></a>Bundle.main.urls(forResourcesWithExtension: String?, subdirectory: String?) – 从直接指定文件名及具体目录名称来找所有文件</h2><p>如果我在某个项目目录中放了一些文件,这些文件都放在<code>Cards.bundle</code>目录的子目录<code>Characters</code>中,且不指定文件的名称和后缀:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls <span class="operator">=</span> <span class="type">Bundle</span>.main.urls(forResourcesWithExtension: <span class="literal">nil</span>, subdirectory: <span class="string">&quot;Cards.bundle/Characters&quot;</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Optional([Dog.png -- </span></span><br><span class="line"><span class="comment">file:///Users/vito/Library/Developer/CoreSimulator/Devices/428C06DC-515B-4870-BFC9-F8650821F110/data/Containers/Bundle/Application/D3A66460-669B-4539-BA09-DF69E0B9BE5D/Milestone-Project28-30-V3.app/Cards.bundle/Characters/, AdventurerGirl.png -- </span></span><br><span class="line"><span class="comment">file:///Users/vito/Library/Developer/CoreSimulator/Devices/428C06DC-515B-4870-BFC9-F8650821F110/data/Containers/Bundle/Application/D3A66460-669B-4539-BA09-DF69E0B9BE5D/Milestone-Project28-30-V3.app/Cards.bundle/Characters/, TheBoy.png --</span></span><br><span class="line"><span class="comment">..............</span></span><br><span class="line"><span class="comment">..............</span></span><br><span class="line"><span class="comment">file:///Users/vito/Library/Developer/CoreSimulator/Devices/428C06DC-515B-4870-BFC9-F8650821F110/data/Containers/Bundle/Application/D3A66460-669B-4539-BA09-DF69E0B9BE5D/Milestone-Project28-30-V3.app/Cards.bundle/Characters/])</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>subdirectory</code>目录必须是详细具体的。</p><h3 id="URL的lastPathComponent返回文件名"><a href="#URL的lastPathComponent返回文件名" class="headerlink" title="URL的lastPathComponent返回文件名"></a>URL的lastPathComponent返回文件名</h3><p>上例来说:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(urls<span class="operator">?</span>[<span class="number">0</span>].lastPathComponent)</span><br><span class="line"><span class="comment">// Dog.png</span></span><br></pre></td></tr></table></figure><h1 id="NSObject"><a href="#NSObject" class="headerlink" title="NSObject"></a>NSObject</h1><p>NSObject is what’s called a universal base class for all Cocoa Touch classes. That means all UIKit classes ultimately come from NSObject, including all of UIKit. </p><h1 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h1><h2 id="Data-contentsOf-URL"><a href="#Data-contentsOf-URL" class="headerlink" title="Data(contentsOf: URL)"></a>Data(contentsOf: URL)</h2><p>从特定url取得数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span></span><br><span class="line">    <span class="keyword">let</span> urlString <span class="operator">=</span> <span class="string">&quot;https://www.hackingwithswift.com/samples/petitions-1.json&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: urlString) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">Data</span>(contentsOf: url) &#123;</span><br><span class="line">            <span class="comment">// we&#x27;re OK to parse!</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data-write-to"><a href="#Data-write-to" class="headerlink" title="Data.write(to:)"></a>Data.write(to:)</h2><p>下面是通过UIImagePickerController取得照片后写入本地的一个例子：<br>见 UIImagePickerController –&gt; 一般示例代码 <a href="#%E4%B8%80%E8%88%AC%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81">跳转到</a></p><h2 id="Data-与-String-的转换"><a href="#Data-与-String-的转换" class="headerlink" title="Data 与 String 的转换"></a>Data 与 String 的转换</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始的字符串</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;This is a demo string.&quot;</span></span><br><span class="line"><span class="comment">// 转换成Data数据</span></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(str.utf8)</span><br><span class="line"><span class="comment">// Data数据再转换成字符串</span></span><br><span class="line"><span class="keyword">let</span> strFromData <span class="operator">=</span> <span class="type">String</span>(decoding: data, as: <span class="type">UTF8</span>.<span class="keyword">self</span>)</span><br></pre></td></tr></table></figure><h1 id="UIView"><a href="#UIView" class="headerlink" title="UIView"></a>UIView</h1><p>UIView是UIKit框架里面最基础的视图类，UIView类定义了一个矩形的区域，并管理该区域内的所有屏幕显示。<br>UIView is the parent class of all of UIKit’s view types: labels, buttons, progress views, and more.<br>程序启动后，创建的第一个视图就是UIWindow，接着创建视图控制器的view，并把view放到UIWindow上，于是控制器的view就显示在屏幕上了。</p><p>所以我们可以这样使用UIView():</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">loadView</span>() &#123;</span><br><span class="line">    view <span class="operator">=</span> <span class="type">UIView</span>()</span><br><span class="line">    view.backgroundColor <span class="operator">=</span> .white</span><br><span class="line"></span><br><span class="line">    <span class="comment">// more code to come!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Previously we assigned a WKWebView instance directly as our view, meaning that it automatically took up all the space. Here, though, we’re going to be adding lots of child views and positioning them by hand, so we need a big, empty canvas to work with.</p><p>下面是在一个UIView()的基础上再添加一个UIView()</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buttonsView是为了后续添加大量UIButton进行显示的一个容器view</span></span><br><span class="line"><span class="keyword">let</span> buttonsView <span class="operator">=</span> <span class="type">UIView</span>()</span><br><span class="line">buttonsView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">view.addSubview(buttonsView)</span><br></pre></td></tr></table></figure><h2 id="tintColor"><a href="#tintColor" class="headerlink" title="tintColor"></a>tintColor</h2><p>任何UIView子类的tintColor属性,可以改变应用在其上的颜色效果,但具体什么效果,取决于你应用在什么上面。<br>在navigationBar和tab bars上面,意味着改变button上的text和icons的颜色;<br>在text views上面,意味着改变被选择和高亮的text部分的颜色;<br>在progress bars上面,意味着改变它的track color(这是不是progress前半进程的颜色？)的颜色。<br>在tableView的cell上面,改变的就是在editing模式下,选择区域的颜色,具体见tableView的tintColor一块的笔记。</p><h3 id="设置单个页面的tintColor"><a href="#设置单个页面的tintColor" class="headerlink" title="设置单个页面的tintColor"></a>设置单个页面的tintColor</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    view.tintColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="frame-size-–-查看UIView的框架大小"><a href="#frame-size-–-查看UIView的框架大小" class="headerlink" title="frame.size – 查看UIView的框架大小"></a>frame.size – 查看UIView的框架大小</h2><p><code> view.frame.size.width</code><br><code> view.frame.size.height</code> </p><h2 id="layoutMargins属性-–-查看Margins的大小"><a href="#layoutMargins属性-–-查看Margins的大小" class="headerlink" title="layoutMargins属性 – 查看Margins的大小"></a>layoutMargins属性 – 查看Margins的大小</h2><p>通过查看一个view的layoutMargins属性,返回的结果是:<br><code>UIEdgeInsets(top: 8.0, left: 8.0, bottom: 8.0, right: 8.0)</code><br>这时候就可以查看或者修改 top&#x2F;left&#x2F;bottom&#x2F;right 等的值了。</p><h3 id="设置项目中所有views的tint-–-需要在AppDelegate-swift中设置"><a href="#设置项目中所有views的tint-–-需要在AppDelegate-swift中设置" class="headerlink" title="设置项目中所有views的tint – 需要在AppDelegate.swift中设置"></a>设置项目中所有views的tint – 需要在AppDelegate.swift中设置</h3><p>AppDelegate.swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    window<span class="operator">?</span>.tintColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UITapGestureRecognizer-–-点击响应事件"><a href="#UITapGestureRecognizer-–-点击响应事件" class="headerlink" title="UITapGestureRecognizer – 点击响应事件"></a>UITapGestureRecognizer – 点击响应事件</h2><p>实例1:(拿UIImageView示例)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个UITapGestureRecognizer的事件响应函数</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">imageViewTap</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UITapGestureRecognizer</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This view is tapped&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建UITapGestureRecognizer实例</span></span><br><span class="line"><span class="keyword">let</span> tapGesture <span class="operator">=</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(imageViewTap))</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @IBOutlet var imageView: UIImageView!</span></span><br><span class="line"><span class="comment">// imageView已设置image</span></span><br><span class="line">imageView.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 允许用户交互</span></span><br><span class="line">imageView.addGestureRecognizer(tapGesture)</span><br></pre></td></tr></table></figure><p>实例2:(拿UILabel示例)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建UITapGestureRecognizer实例</span></span><br><span class="line"><span class="keyword">let</span> tapGesture2 <span class="operator">=</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(imageViewTap))</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @IBOutlet var label: UILabel!</span></span><br><span class="line"><span class="comment">// label已设置text</span></span><br><span class="line">label.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 允许用户交互</span></span><br><span class="line">label.addGestureRecognizer(tapGesture)</span><br></pre></td></tr></table></figure><h1 id="UITableViewController"><a href="#UITableViewController" class="headerlink" title="UITableViewController"></a>UITableViewController</h1><h2 id="IndexPath-row-Int-section-Int"><a href="#IndexPath-row-Int-section-Int" class="headerlink" title="IndexPath(row: Int, section: Int)"></a>IndexPath(row: Int, section: Int)</h2><p><code> let indexPath = IndexPath(row: 1, section: 0)</code></p><h2 id="需要实现的方法"><a href="#需要实现的方法" class="headerlink" title="需要实现的方法"></a>需要实现的方法</h2><h3 id="override-func-tableView-tableView-UITableView-numberOfRowsInSection-section-Int-gt-Int"><a href="#override-func-tableView-tableView-UITableView-numberOfRowsInSection-section-Int-gt-Int" class="headerlink" title="override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { }"></a>override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { }</h3><h3 id="override-func-tableView-tableView-UITableView-cellForRowAt-indexPath-IndexPath-gt-UITableViewCell"><a href="#override-func-tableView-tableView-UITableView-cellForRowAt-indexPath-IndexPath-gt-UITableViewCell" class="headerlink" title="override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { }"></a>override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { }</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">    <span class="comment">// 在IB中的cell设置中必须注明Identifier是&quot;Picture&quot;</span></span><br><span class="line">    <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;Picture&quot;</span>, for: indexPath)</span><br><span class="line">    cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> pictures[indexPath.row]</span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如果tableView没有在storyBoard中设置过cell可复用的情况"><a href="#如果tableView没有在storyBoard中设置过cell可复用的情况" class="headerlink" title="如果tableView没有在storyBoard中设置过cell可复用的情况"></a>如果tableView没有在storyBoard中设置过cell可复用的情况</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cell: <span class="type">UITableViewCell</span>! <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;Cell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cell <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">    cell <span class="operator">=</span> <span class="type">UITableViewCell</span>(style: .default, reuseIdentifier: <span class="string">&quot;Cell&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们使用上面的代码,先查看storyBoard中是否设置过cell可复用的情况,则会使用<code>cell = UITableViewCell(style: .default, reuseIdentifier: &quot;Cell&quot;)</code>,但会带来一个问题,每次tableView都会新建一个cell,而不是复用,这对于资源的消耗是很大的。<br>解决办法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ViewDidLoad()中注册可复用的cell</span></span><br><span class="line">tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;Cell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在cellForRowAt中使用该可复用的cell</span></span><br><span class="line"><span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;Cell&quot;</span>, for: indexPath)</span><br></pre></td></tr></table></figure><p>这样即使你在storyBoard中没有设置过,也可以高效率的使用了。</p><h2 id="可以实现的方法"><a href="#可以实现的方法" class="headerlink" title="可以实现的方法"></a>可以实现的方法</h2><h3 id="override-func-tableView-tableView-UITableView-didSelectRowAt-indexPath-IndexPath"><a href="#override-func-tableView-tableView-UITableView-didSelectRowAt-indexPath-IndexPath" class="headerlink" title="override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { }"></a>override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { }</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 1: try loading the &quot;Detail&quot; view controller and typecasting it to be DetailViewController</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> vc <span class="operator">=</span> storyboard<span class="operator">?</span>.instantiateViewController(withIdentifier: <span class="string">&quot;Detail&quot;</span>) <span class="keyword">as?</span> <span class="type">DetailViewController</span> &#123;</span><br><span class="line">        <span class="comment">// 2: success! Set its selectedImage property</span></span><br><span class="line">        vc.selectedImage <span class="operator">=</span> pictures[indexPath.row]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: now push it onto the navigation controller</span></span><br><span class="line">        navigationController<span class="operator">?</span>.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="override-func-tableView-tableView-UITableView-commit-editingStyle-UITableViewCell-EditingStyle-forRowAt-indexPath-IndexPath"><a href="#override-func-tableView-tableView-UITableView-commit-editingStyle-UITableViewCell-EditingStyle-forRowAt-indexPath-IndexPath" class="headerlink" title="override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { }"></a>override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { }</h3><p>可以划动删除&#x2F;添加的操作。（在模拟器上没有成功,但在真机上向左划动会出现”删除”字样。）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">commit</span> <span class="params">editingStyle</span>: <span class="type">UITableViewCell</span>.<span class="type">EditingStyle</span>, <span class="params">forRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> editingStyle <span class="operator">==</span> .delete &#123;</span><br><span class="line">        objects.remove(at: indexPath.row)</span><br><span class="line">        tableView.deleteRows(at: [indexPath], with: .fade)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> editingStyle <span class="operator">==</span> .insert &#123;</span><br><span class="line">        <span class="comment">// Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tableView-layoutMargins-x2F-tableView-separatorInset-x2F-UIEdgeInsets-–-修改边缘的空白空间的大小"><a href="#tableView-layoutMargins-x2F-tableView-separatorInset-x2F-UIEdgeInsets-–-修改边缘的空白空间的大小" class="headerlink" title="tableView.layoutMargins &#x2F; tableView.separatorInset &#x2F; UIEdgeInsets – 修改边缘的空白空间的大小"></a>tableView.layoutMargins &#x2F; tableView.separatorInset &#x2F; UIEdgeInsets – 修改边缘的空白空间的大小</h2><p>未设置前:<br><img src="/Images/withoutUIEdgeInsets.png" alt="withoutUIEdgeInsets.png"></p><p>在viewDidLoad()中加入代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tableView.layoutMargins -- the default spacing to use when laying out content in the view.</span></span><br><span class="line">tableView.layoutMargins <span class="operator">=</span> <span class="type">UIEdgeInsets</span>.zero</span><br><span class="line"><span class="comment">// tableView.separatorInset -- the default inset of cell separators.</span></span><br><span class="line">tableView.separatorInset <span class="operator">=</span> <span class="type">UIEdgeInsets</span>.zero</span><br></pre></td></tr></table></figure><p>在tableView的cellForRowAt方法中加入代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是给每个cell设置layoutMargins</span></span><br><span class="line">cell.layoutMargins <span class="operator">=</span> <span class="type">UIEdgeInsets</span>.zero</span><br></pre></td></tr></table></figure><p>设置后的效果:<br><img src="/Images/withUIEdgeInsets.png" alt="WithUIEdgeInsets"></p><h2 id="tableView-backgroundColor-–-设置tableView的底色"><a href="#tableView-backgroundColor-–-设置tableView的底色" class="headerlink" title="tableView.backgroundColor – 设置tableView的底色"></a>tableView.backgroundColor – 设置tableView的底色</h2><p>将某张图片设置tableView的底色,并编排该底色</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> backgroundImage <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;white_wall&quot;</span>) &#123;</span><br><span class="line">    tableView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>(patternImage: backgroundImage)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tableView-allowsMultipleSelection-–-除了编辑状态下-允许多行选定"><a href="#tableView-allowsMultipleSelection-–-除了编辑状态下-允许多行选定" class="headerlink" title="tableView.allowsMultipleSelection – 除了编辑状态下,允许多行选定"></a>tableView.allowsMultipleSelection – 除了编辑状态下,允许多行选定</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.allowsMultipleSelection <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="tableView-allowsMultipleSelectionDuringEditing-–-编辑状态下允许多行选定"><a href="#tableView-allowsMultipleSelectionDuringEditing-–-编辑状态下允许多行选定" class="headerlink" title="tableView.allowsMultipleSelectionDuringEditing – 编辑状态下允许多行选定"></a>tableView.allowsMultipleSelectionDuringEditing – 编辑状态下允许多行选定</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.allowsMultipleSelectionDuringEditing <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="tableView-reloadData"><a href="#tableView-reloadData" class="headerlink" title="tableView.reloadData()"></a>tableView.reloadData()</h2><p>Reloads the rows and sections of the table view:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableView.reloadData()</span><br></pre></td></tr></table></figure><h2 id="override-func-setEditing-editing-Bool-animated-Bool-–-默认"><a href="#override-func-setEditing-editing-Bool-animated-Bool-–-默认" class="headerlink" title="override func setEditing(_ editing: Bool, animated: Bool) {} – 默认"></a>override func setEditing(_ editing: Bool, animated: Bool) {} – 默认</h2><p>这是个默认在tableView中会实现的方法,一般不需要去修改它。<br>比如你定义了一个UIBarButtonItem:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editButton <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .edit, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(enterEditingMode))</span><br></pre></td></tr></table></figure><p>若点击该edit的button,就会自动调用到setEditing方法。<br>setEditing(true, animated: true) – 就是出现editing模式;<br>setEditing(false, animated: true) – 就是取消editing模式。</p><p>那么,什么时候需要覆写该setEditing方法呢?<br>比如当你想点击该edit按钮后,你想让toolbarItems出现你自定义的按钮,包括你想取消editing模式时,又出现toolbarItems自定义的其他按钮,那你就可以去使用它,但每次覆写都必须实现super.setEditing(editing, animated: animated):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击edit按钮调用的方法:</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">enterEditingMode</span>() &#123;</span><br><span class="line">    navigationItem.rightBarButtonItems <span class="operator">=</span> [cancelButton]</span><br><span class="line"><span class="comment">//        toolbarItems = [spacerButton, deleteAllButton]</span></span><br><span class="line">    setEditing(<span class="literal">true</span>, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消edit模式调用的方法:</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">cancelEditingMode</span>() &#123;</span><br><span class="line">    navigationItem.rightBarButtonItems <span class="operator">=</span> [editButtonItem]</span><br><span class="line"><span class="comment">//        toolbarItems = [spacerButton, notesCountButton, spacerButton, newNoteButton]</span></span><br><span class="line">    setEditing(<span class="literal">false</span>, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">setEditing</span>(<span class="keyword">_</span> <span class="params">editing</span>: <span class="type">Bool</span>, <span class="params">animated</span>: <span class="type">Bool</span>) &#123; <span class="comment">// ??</span></span><br><span class="line">    <span class="keyword">super</span>.setEditing(editing, animated: animated)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> editing &#123;</span><br><span class="line">        toolbarItems <span class="operator">=</span> [spacerButton]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        toolbarItems <span class="operator">=</span> [spacerButton, notesCountButton, spacerButton, newNoteButton]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tableView-isEditing-–-反映tableView是否在editing模式"><a href="#tableView-isEditing-–-反映tableView是否在editing模式" class="headerlink" title="tableView.isEditing – 反映tableView是否在editing模式"></a>tableView.isEditing – 反映tableView是否在editing模式</h2><p>tableView.isEditing is a boolean value that determines whether the table view is in editing mode.<br>例子请结合 tableView.indexPathsForSelectedRows 一起看。</p><h2 id="tableView-indexPathsForSelectedRows"><a href="#tableView-indexPathsForSelectedRows" class="headerlink" title="tableView.indexPathsForSelectedRows"></a>tableView.indexPathsForSelectedRows</h2><p>The index paths that represent the selected rows. 就是一个所有被选中cell的index列表。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didDeselectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> tableView.isEditing &#123;</span><br><span class="line">        <span class="keyword">if</span> tableView.indexPathsForSelectedRows <span class="operator">==</span> <span class="literal">nil</span> <span class="operator">||</span> tableView.indexPathsForSelectedRows<span class="operator">!</span>.isEmpty &#123;</span><br><span class="line">            toolbarItems <span class="operator">=</span> [spacerButton, deleteAllButton]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其他代码省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tableView-indexPathForSelectedRow-–-返回被选中列的IndexPath"><a href="#tableView-indexPathForSelectedRow-–-返回被选中列的IndexPath" class="headerlink" title="tableView.indexPathForSelectedRow – 返回被选中列的IndexPath"></a>tableView.indexPathForSelectedRow – 返回被选中列的IndexPath</h2><h2 id="cell-selectedBackgroundView-–-设置cell在选中状态下的背景view"><a href="#cell-selectedBackgroundView-–-设置cell在选中状态下的背景view" class="headerlink" title="cell.selectedBackgroundView – 设置cell在选中状态下的背景view"></a>cell.selectedBackgroundView – 设置cell在选中状态下的背景view</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cell: UITableViewCell</span></span><br><span class="line"><span class="comment">// selectedCellView: UIView?</span></span><br><span class="line">cell.selectedBackgroundView <span class="operator">=</span> selectedCellView</span><br></pre></td></tr></table></figure><h2 id="cell-multipleSelectionBackgroundView-–-设置cell在被多选状态下的背景view"><a href="#cell-multipleSelectionBackgroundView-–-设置cell在被多选状态下的背景view" class="headerlink" title="cell.multipleSelectionBackgroundView – 设置cell在被多选状态下的背景view"></a>cell.multipleSelectionBackgroundView – 设置cell在被多选状态下的背景view</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cell: UITableViewCell</span></span><br><span class="line"><span class="keyword">let</span> multipleSelectedCellView <span class="operator">=</span> <span class="type">UIView</span>()</span><br><span class="line">multipleSelectedCellView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.orange.withAlphaComponent(<span class="number">0.2</span>)</span><br><span class="line">cell.multipleSelectionBackgroundView <span class="operator">=</span> multipleSelectedCellView</span><br></pre></td></tr></table></figure><h2 id="UITableViewCell-tintColor-–-cell在editing模式下选择区域的背景颜色"><a href="#UITableViewCell-tintColor-–-cell在editing模式下选择区域的背景颜色" class="headerlink" title="UITableViewCell.tintColor – cell在editing模式下选择区域的背景颜色"></a>UITableViewCell.tintColor – cell在editing模式下选择区域的背景颜色</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cell: UITableViewCell</span></span><br><span class="line">cell.tintColor <span class="operator">=</span> .orange</span><br></pre></td></tr></table></figure><p><img src="/images/cell-tintColor.gif" alt="cell-tintColor"></p><h2 id="tableView-rowHeight-–-设置tableView的每个cell的高度"><a href="#tableView-rowHeight-–-设置tableView的每个cell的高度" class="headerlink" title="tableView.rowHeight – 设置tableView的每个cell的高度"></a>tableView.rowHeight – 设置tableView的每个cell的高度</h2><p><code>tableView.rowHeight = 90</code></p><h2 id="tableView-separatorStyle-–-设置每个cell的分隔类型"><a href="#tableView-separatorStyle-–-设置每个cell的分隔类型" class="headerlink" title="tableView.separatorStyle – 设置每个cell的分隔类型"></a>tableView.separatorStyle – 设置每个cell的分隔类型</h2><p><code>tableView.separatorStyle = .singleLine</code><br><code>tableView.separatorStyle = .none</code></p><h2 id="UITableViewDataSource-–-protocol"><a href="#UITableViewDataSource-–-protocol" class="headerlink" title="UITableViewDataSource – protocol"></a>UITableViewDataSource – protocol</h2><p>具体实例参考:<br>github上clarknt写的关于100daysOfswift的Milestone-Project28-30的实例代码。<br>从代码实例中的一些思考:<br>主页面push出一个setting页面,setting页面内有两个tableView,所以在setting页面需要识别tableView是哪一个,而两个tableView分别有1个section和26个section,所以在<code>UITableViewDataSource</code>协议的实现方法中要手动去识别区分是哪个table。<br>学习到的是,以前写UITableView的时候,从来没有去实现过<code>UITableViewDataSource</code>协议。</p><p>必须要实现的方法: <code>numberOfRowsInSection</code> <code>cellForRowAt</code></p><p>可选择实现的方法1:<br><code>numberOfSections</code> – 确定有多少个分区(section)<br>例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">numberOfSections</span>(<span class="params">in</span> <span class="params">tableView</span>: <span class="type">UITableView</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> tableView <span class="operator">==</span> cardsTable &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> grids.count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选择实现的方法2:<br><code>titleForHeaderInSection</code> – 每个section的标题<br>例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">titleForHeaderInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> tableView <span class="operator">==</span> cardsTable &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Cards: <span class="subst">\(grids[section].numberOfElements)</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选择实现的方法3:<br><code>titleForFooterInSection</code> – 每个section的脚标</p><p>可选择实现的方法4:<br><code>canMoveRowAtIndexPath</code> – 用来控制cell是否可以移动,只有实现了才行移动。</p><h1 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h1><h2 id="生成UIImage的方法"><a href="#生成UIImage的方法" class="headerlink" title="生成UIImage的方法"></a>生成UIImage的方法</h2><h3 id="UIImage-named"><a href="#UIImage-named" class="headerlink" title="UIImage(named:)"></a>UIImage(named:)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageName <span class="operator">=</span> <span class="string">&quot;nssl0042.jpg&quot;</span></span><br><span class="line"><span class="keyword">let</span> image <span class="operator">=</span> <span class="type">UIImage</span>(named: imageName)</span><br></pre></td></tr></table></figure><h2 id="UIImage-named-和UIImage-contentsOfFile-的区别"><a href="#UIImage-named-和UIImage-contentsOfFile-的区别" class="headerlink" title="UIImage(named:)和UIImage(contentsOfFile:)的区别"></a>UIImage(named:)和UIImage(contentsOfFile:)的区别</h2><p><code>UIImage(named:)</code>可以不写明图片文件的具体路径,<code>UIImage(contentsOfFile:)</code>必须要写明图片文件的具体路径,这个比较麻烦,但我们可以这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path <span class="operator">=</span> <span class="type">Bundle</span>.main.path(forResource: imageName, ofType: <span class="literal">nil</span>)<span class="operator">!</span></span><br><span class="line"><span class="keyword">let</span> original <span class="operator">=</span> <span class="type">UIImage</span>(contentsOfFile: path)<span class="operator">!</span></span><br></pre></td></tr></table></figure><p>此外,最重要的一个区别,也是会影响到app性能的一个区别就是:<br><code>UIImage(named:)</code>加载完图片后会加入缓存,而<code>UIImage(contentsOfFile:)</code>并不会加入缓存。那么前者加载图片会比较快,而后者会比较慢,但前者会占据大量缓存,加载大量图片后,可能会让缓存吃紧,而后者就不会出现这种情况。</p><h1 id="UINavigationController"><a href="#UINavigationController" class="headerlink" title="UINavigationController"></a>UINavigationController</h1><p>Declaration:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MainActor</span> <span class="keyword">class</span> <span class="title class_">UINavigationController</span> : <span class="title class_">UIViewController</span></span><br></pre></td></tr></table></figure><h2 id="title-标题"><a href="#title-标题" class="headerlink" title="title - 标题"></a>title - 标题</h2><p>直接在页面使用 title &#x3D; “ I’m the title, etc. “ 即可。</p><h3 id="largeTitle"><a href="#largeTitle" class="headerlink" title="largeTitle"></a>largeTitle</h3><p>在UINavigationController中,title的default style都是small text,那么如何设置成largeTitle呢?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationController<span class="operator">?</span>.navigationBar.prefersLargeTitles <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>以上。</p><p>那么,一些类似detail的页面不需要largeTitle而主页面需要的情况下,该怎么设置呢？<br>只要在detail页面加入代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.largeTitleDisplayMode <span class="operator">=</span> .never</span><br></pre></td></tr></table></figure><p>以上。</p><h2 id="UINavigationBar"><a href="#UINavigationBar" class="headerlink" title="UINavigationBar"></a>UINavigationBar</h2><p>By default, a UINavigationController has a bar across the top, called a UINavigationBar, and as developers we can add buttons to this navigation bar that call our methods.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.rightBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .action, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(shareTapped))</span><br></pre></td></tr></table></figure><p>这里选择的是barButtonSystemItem: .action, 可以选择其他的,比如 .cancel &#x2F; .done &#x2F; .add &#x2F; .camera &#x2F;.bookmarks &#x2F;.edit 等等很多其他的。</p><p>还可以让图标自定义显示:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.leftBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(title: <span class="string">&quot;Score&quot;</span>, style: .plain, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(showScore))</span><br></pre></td></tr></table></figure><p>该自定义的图标可设置样式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.leftBarButtonItem.setTitleTextAttributes([<span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">11</span>), <span class="type">NSAttributedString</span>.<span class="type">Key</span>.foregroundColor : <span class="type">UIColor</span>.darkText], for: .normal)</span><br></pre></td></tr></table></figure><h3 id="点击页面即隐藏或显示navigationBar"><a href="#点击页面即隐藏或显示navigationBar" class="headerlink" title="点击页面即隐藏或显示navigationBar"></a>点击页面即隐藏或显示navigationBar</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewWillAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line">    navigationController<span class="operator">?</span>.hidesBarsOnTap <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewWillDisappear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">    navigationController<span class="operator">?</span>.hidesBarsOnTap <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在显示该页面时,即开启点击页面任何处可隐藏navigationBar,再点击可显示navigationBar的功能。<br>但为何在viewWillDisappear中还要取消该功能?<br>想想这样的场景,在detail页面可观看一张图片,点击可显示&#x2F;隐藏navigationBar,但如果你点击返回退回到前一页(可能是主页面),该页面并不需要隐藏navigationBar,但却在navigationController中开启了该功能,会非常的不好,所以需要取消。</p><h2 id="Disclosure-Indicator"><a href="#Disclosure-Indicator" class="headerlink" title="Disclosure Indicator"></a>Disclosure Indicator</h2><p>Disclosure Indicator 即如下图每个cell右边的箭头(&gt;)符号:<br><img src="/Images/disclosureIndicator.png" alt="disclosureIndicator"><br>如何设置显示或不显示:<br>在storyBoard中选中cell,在其的属性中的Accessory中去设置:<br><img src="/Images/accesoryOfCell.png" alt="accesoryOfCell"><br>可以看到我们选择的是DisclosureIndicator,还有DetailDisclosure&#x2F;Checkmark&#x2F;Detail都是很好的选择,主要看所使用的场景。</p><h2 id="UINavigationController-的-popViewController-x2F-pushViewController"><a href="#UINavigationController-的-popViewController-x2F-pushViewController" class="headerlink" title="UINavigationController? 的 popViewController &#x2F; pushViewController"></a>UINavigationController? 的 popViewController &#x2F; pushViewController</h2><p>UINavigationController是IOS编程中的一个view controller的容器，通过栈管理viewControllers，每一次pushViewController操作都将在栈顶添加一个view controller，然后通过popViewController将该栈最顶端的controller移除。<br>上面说的栈最顶端是这样的,navigationController?.viewControllers中保存着所有的view controller,你push进去一个view controller,就放在这个列表的最后面,你pop的话,也是将列表的最后面那个view controller删除。这就是栈的后进先出的概念。</p><p>这里自己写了个例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewController.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">var</span> textView: <span class="type">UITextView</span>!</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        navigationItem.rightBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .action, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(toDetailView))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(navigationController<span class="operator">?</span>.viewControllers)</span><br><span class="line">        <span class="comment">// Optional([&lt;SwiftTest001.ViewController: 0x117e07490&gt;])</span></span><br><span class="line">        <span class="comment">// 一个ViewController</span></span><br><span class="line"></span><br><span class="line">        navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 这里pop了,为什么下面显示的栈里面还是有一个ViewController?</span></span><br><span class="line">        <span class="comment">// 感觉是因为栈里总得有一个ViewController吧,</span></span><br><span class="line">        <span class="comment">// 所以这行代码是没有意义的。</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(navigationController<span class="operator">?</span>.viewControllers)</span><br><span class="line">        <span class="comment">// Optional([&lt;SwiftTest001.ViewController: 0x117e07490&gt;])</span></span><br><span class="line">        <span class="comment">// 还是原来那个ViewController</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">toDetailView</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> vc <span class="operator">=</span> storyboard<span class="operator">?</span>.instantiateViewController(withIdentifier: <span class="string">&quot;Detail&quot;</span>) <span class="keyword">as?</span> <span class="type">DetailViewController</span> &#123;</span><br><span class="line">            navigationController<span class="operator">?</span>.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DetailViewController.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DetailViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        navigationItem.leftBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .cancel, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(deleteTopView))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(navigationController<span class="operator">?</span>.viewControllers)</span><br><span class="line">        <span class="comment">// Optional([&lt;SwiftTest001.ViewController: 0x117e07490&gt;, &lt;SwiftTest001.DetailViewController: 0x117e22d20&gt;])</span></span><br><span class="line">        <span class="comment">// 有二个ViewController了,栈顶就是这个DetailViewController</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">deleteTopView</span>() &#123;</span><br><span class="line">        navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(navigationController<span class="operator">?</span>.viewControllers)</span><br><span class="line">        <span class="comment">// Optional([&lt;SwiftTest001.ViewController: 0x117e07490&gt;])</span></span><br><span class="line">        <span class="comment">// 又回到原来的那个ViewController了,pop出的就是后进来的DetailViewController了。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h1><h2 id="设置UIButton上的文字-–-setTitle"><a href="#设置UIButton上的文字-–-setTitle" class="headerlink" title="设置UIButton上的文字 – .setTitle()"></a>设置UIButton上的文字 – .setTitle()</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> submit <span class="operator">=</span> <span class="type">UIButton</span>(type: .system)</span><br><span class="line">submit.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">// 设置显示的文字</span></span><br><span class="line">submit.setTitle(<span class="string">&quot;SUBMIT&quot;</span>, for: .normal)</span><br><span class="line">view.addSubview(submit)</span><br></pre></td></tr></table></figure><h2 id="在UIButton上设置UIImage"><a href="#在UIButton上设置UIImage" class="headerlink" title="在UIButton上设置UIImage"></a>在UIButton上设置UIImage</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前提是,button1是UIButton类型的按钮</span></span><br><span class="line">button1.setImage(<span class="type">UIImage</span>(named: countries[<span class="number">0</span>]), for: .normal)</span><br></pre></td></tr></table></figure><h2 id="设置UIButton的边框粗细"><a href="#设置UIButton的边框粗细" class="headerlink" title="设置UIButton的边框粗细"></a>设置UIButton的边框粗细</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button1.layer.borderWidth <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>our border will be 1 pixel on non-retina devices, 2 pixels on retina devices, and 3 on retina HD devices. </p><h2 id="设置UIButton的边框颜色"><a href="#设置UIButton的边框颜色" class="headerlink" title="设置UIButton的边框颜色"></a>设置UIButton的边框颜色</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button1.layer.borderColor <span class="operator">=</span> <span class="type">UIColor</span>.lightGray.cgColor</span><br></pre></td></tr></table></figure><p>By default, the border of CALayer is black, but you can change that if you want by using the UIColor data type. I said that CALayer brings with it a little more complexity, and here’s where it starts to be visible: CALayer sits at a lower technical level than UIButton, which means it doesn’t understand what a UIColor is. UIButton knows what a UIColor is because they are both at the same technical level, but CALayer is below UIButton, so UIColor is a mystery.</p><p>Don’t despair, though: CALayer has its own way of setting colors called CGColor, which comes from Apple’s Core Graphics framework. This, like CALayer, is at a lower level than UIButton, so the two can talk happily – again, as long as you’re happy with the extra complexity.</p><p>Even better, UIColor (which sits above CGColor) is able to convert to and from CGColor easily, which means you don’t need to worry about the complexity.</p><p>以上的颜色也可以写成这种表现形式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIColor</span>(red: <span class="number">1.0</span>, green: <span class="number">0.6</span>, blue: <span class="number">0.2</span>, alpha: <span class="number">1.0</span>).cgColor</span><br></pre></td></tr></table></figure><h2 id="设置UIButton的大小"><a href="#设置UIButton的大小" class="headerlink" title="设置UIButton的大小"></a>设置UIButton的大小</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> letterButton <span class="operator">=</span> <span class="type">UIButton</span>(type: .system)</span><br><span class="line">letterButton.setTitle(<span class="string">&quot;WWW&quot;</span>, for: .normal)</span><br><span class="line"><span class="keyword">let</span> frame <span class="operator">=</span> <span class="type">CGRect</span>(x: col <span class="operator">*</span> width, y: row <span class="operator">*</span> height, width: width, height: height)</span><br><span class="line">letterButton.frame <span class="operator">=</span> frame</span><br></pre></td></tr></table></figure><h2 id="通过IB来创建UIButton的Action方法"><a href="#通过IB来创建UIButton的Action方法" class="headerlink" title="通过IB来创建UIButton的Action方法"></a>通过IB来创建UIButton的Action方法</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/2/5/from-outlets-to-actions-creating-an-ibaction">https://www.hackingwithswift.com/read/2/5/from-outlets-to-actions-creating-an-ibaction</a></p></blockquote><p>在IB中通过ctrl拉动UIButton按钮至assistant页面中,跳出页面选项选择Connection:Action而非Connection:Outlet。</p><p>会生成按钮点击的@IBAction方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">buttonTapped</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UIButton</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过此方法,可以使多个按钮使用同一方法的情况。<br>注意:有可能上面的sender的属性是Any,这时候最好把Any改成UIButton。</p><h2 id="如何在多个按钮使用同一方法的情况下-识别是哪个按钮被点击"><a href="#如何在多个按钮使用同一方法的情况下-识别是哪个按钮被点击" class="headerlink" title="如何在多个按钮使用同一方法的情况下,识别是哪个按钮被点击?"></a>如何在多个按钮使用同一方法的情况下,识别是哪个按钮被点击?</h2><p>在IB界面的这个UIButton属性中设置其的tag为一个唯一的数字:<br><img src="/Images/tagOfUIButton.webp" alt="tagOfUIButton"></p><p>随后在这个UIButton按钮的action中可查看其的tag:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">buttonTapped</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UIButton</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(sender.tag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sender-isHidden-的Bool值-让UIButton隐身"><a href="#sender-isHidden-的Bool值-让UIButton隐身" class="headerlink" title="sender.isHidden 的Bool值 让UIButton隐身"></a>sender.isHidden 的Bool值 让UIButton隐身</h2><p>在 @IBAction func buttonTapped(_ sender: UIButton) { 中<br>设置sender.isHidden &#x3D; true 或者 false 可让该UIButton隐藏或显示。</p><h2 id="通过代码来给UIButton-添加action"><a href="#通过代码来给UIButton-添加action" class="headerlink" title="通过代码来给UIButton()添加action"></a>通过代码来给UIButton()添加action</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> submit <span class="operator">=</span> <span class="type">UIButton</span>(type: .system)</span><br><span class="line">submit.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">submit.setTitle(<span class="string">&quot;SUBMIT&quot;</span>, for: .normal)</span><br><span class="line">view.addSubview(submit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为submit按钮添加一个objc类型的submitTapped方法,而且激活按钮要求是.touchUpInside,即按钮按下并松开时,松开手势得在按钮正上方</span></span><br><span class="line">submit.addTarget(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(submitTapped), for: .touchUpInside)</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">submitTapped</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UIButton</span>) &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="让UIButton-隐藏但仍占据位置"><a href="#让UIButton-隐藏但仍占据位置" class="headerlink" title="让UIButton()隐藏但仍占据位置"></a>让UIButton()隐藏但仍占据位置</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> submit <span class="operator">=</span> <span class="type">UIButton</span>(type: .system)</span><br><span class="line">submit.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">submit.setTitle(<span class="string">&quot;SUBMIT&quot;</span>, for: .normal)</span><br><span class="line">view.addSubview(submit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏该submit按钮但仍旧占位</span></span><br><span class="line">submit.isHidden <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="UIAlertController"><a href="#UIAlertController" class="headerlink" title="UIAlertController"></a>UIAlertController</h1><h2 id="一般使用"><a href="#一般使用" class="headerlink" title="一般使用"></a>一般使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: title, message: <span class="string">&quot;Your score is <span class="subst">\(score)</span>.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Continue&quot;</span>, style: .default, handler: askQuestion))</span><br><span class="line">present(ac, animated: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的askQuestion方法</span></span><br><span class="line"><span class="comment">// 既设置了必要的action参数,也可在调用时不输入该参数。</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">askQuestion</span>(<span class="params">action</span>: <span class="type">UIAlertAction</span>! <span class="operator">=</span> <span class="literal">nil</span>) &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Apple recommends you use <strong>.alert</strong> when telling users about a situation change, and <strong>.actionSheet</strong> when asking them to choose from a set of options.</p><h2 id="像下面这样的方式-preferredStyle-actionSheet"><a href="#像下面这样的方式-preferredStyle-actionSheet" class="headerlink" title="像下面这样的方式 (preferredStyle: .actionSheet)"></a>像下面这样的方式 (preferredStyle: .actionSheet)</h2><p><img src="/Images/popoverPresentationController.gif" alt="popoverPresentationController"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.rightBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(title: <span class="string">&quot;Open&quot;</span>, style: .plain, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(openTapped))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">openTapped</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Open page…&quot;</span>, message: <span class="literal">nil</span>, preferredStyle: .actionSheet)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// var websites = [&quot;apple.com&quot;, &quot;hackingwithswift.com&quot;]</span></span><br><span class="line">    <span class="keyword">for</span> website <span class="keyword">in</span> websites &#123;</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: website, style: .default, handler: openPage))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Cancel&quot;</span>, style: .cancel, handler: <span class="literal">nil</span>))</span><br><span class="line">    <span class="comment">// 感觉主要是下面的代码,让菜单从下往上弹的。</span></span><br><span class="line">    <span class="comment">// 没感觉下面这行代码的意义,没有也一样可以,</span></span><br><span class="line">    <span class="comment">// 但看到的很多代码都有这一样,而且一般是哪个button点击后调用的,</span></span><br><span class="line">    <span class="comment">// 就设置ac.popoverPresentationController?.barButtonItem对应该button。</span></span><br><span class="line">    <span class="comment">// 但为啥要这么设置啊？？？？？？？？？？</span></span><br><span class="line">    ac.popoverPresentationController<span class="operator">?</span>.barButtonItem <span class="operator">=</span> <span class="keyword">self</span>.navigationItem.rightBarButtonItem</span><br><span class="line">    present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加TextField文本框供输入"><a href="#添加TextField文本框供输入" class="headerlink" title="添加TextField文本框供输入"></a>添加TextField文本框供输入</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">promptForAnswer</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Enter answer&quot;</span>, message: <span class="literal">nil</span>, preferredStyle: .alert)</span><br><span class="line">    <span class="comment">// 可以添加不止一个TextField输入框</span></span><br><span class="line">    ac.addTextField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> submitAction <span class="operator">=</span> <span class="type">UIAlertAction</span>(title: <span class="string">&quot;Submit&quot;</span>, style: .default) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>, <span class="keyword">weak</span> ac] action <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> answer <span class="operator">=</span> ac<span class="operator">?</span>.textFields<span class="operator">?</span>[<span class="number">0</span>].text <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">self</span><span class="operator">?</span>.submit(answer)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ac.addAction(submitAction)</span><br><span class="line">    present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ac-addTextField-configurationHandler-lt-T-UITextField-gt-Void-UITextField-gt-Void-UITextField-gt-Void-gt"><a href="#ac-addTextField-configurationHandler-lt-T-UITextField-gt-Void-UITextField-gt-Void-UITextField-gt-Void-gt" class="headerlink" title="ac.addTextField(configurationHandler: &lt;#T##((UITextField) -&gt; Void)?##((UITextField) -&gt; Void)?##(UITextField) -&gt; Void#&gt;)"></a>ac.addTextField(configurationHandler: &lt;#T##((UITextField) -&gt; Void)?##((UITextField) -&gt; Void)?##(UITextField) -&gt; Void#&gt;)</h3><p>下面是当注册需要设置密码时的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ac.addTextField &#123; textField <span class="keyword">in</span></span><br><span class="line">    textField.isSecureTextEntry <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    textField.placeholder <span class="operator">=</span> <span class="string">&quot;Password&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/textFieldWithPassword.gif" alt="textFieldWithPassword"></p><h1 id="UIActivityViewController"><a href="#UIActivityViewController" class="headerlink" title="UIActivityViewController"></a>UIActivityViewController</h1><p>UIActivityViewController will automatically give us functionality to share by iMessage, by email and by Twitter and Facebook, as well as saving the image to the photo library, assigning it to contact, printing it out via AirPrint, and more. It even hooks into AirDrop and the iOS extensions system so that other apps can read the image straight from us.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.rightBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .action, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(shareTapped))</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">shareTapped</span>() &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> imageView.image<span class="operator">?</span>.jpegData(compressionQuality: <span class="number">0.8</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No image found&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;activityItems:&quot;是要传递的东西。这里传递的是一张图片。</span></span><br><span class="line">    <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">UIActivityViewController</span>(activityItems: [imageView.image<span class="operator">!</span>], applicationActivities: [])</span><br><span class="line">    <span class="comment">// 这里将vc.popoverPresentationController?.barButtonItem也绑定在navigationItem.rightBarButtonItem,</span></span><br><span class="line">    <span class="comment">// 感觉是,总得绑在一个触发的UIBarButtonItem上面,而只有这个正在被触发。</span></span><br><span class="line">    vc.popoverPresentationController<span class="operator">?</span>.barButtonItem <span class="operator">=</span> navigationItem.rightBarButtonItem</span><br><span class="line">    present(vc, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="若选择Save-Image-还需要编辑Info-plist"><a href="#若选择Save-Image-还需要编辑Info-plist" class="headerlink" title="若选择Save Image,还需要编辑Info.plist"></a>若选择Save Image,还需要编辑Info.plist</h2><p>在Info.plist中添加row,选择 “Privacy - Photo Library Additions Usage Description”, 添加String值类似“We need to save photos you like.”</p><h1 id="UIToolbar"><a href="#UIToolbar" class="headerlink" title="UIToolbar"></a>UIToolbar</h1><p>UIToolbar holds and shows a collection of UIBarButtonItem objects that the user can tap on. </p><p><img src="/Images/toolbarItems.png" alt="toolbarItems.png"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spacer <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .flexibleSpace, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> refresh <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .refresh, target: webView, action: <span class="keyword">#selector</span>(webView.reload))</span><br><span class="line"></span><br><span class="line">toolbarItems <span class="operator">=</span> [spacer, refresh]</span><br><span class="line"><span class="comment">// 决定toolbarItems是否显示</span></span><br><span class="line">navigationController<span class="operator">?</span>.isToolbarHidden <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="toolbar的样式设定"><a href="#toolbar的样式设定" class="headerlink" title="toolbar的样式设定"></a>toolbar的样式设定</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> toolbar <span class="operator">=</span> navigationController<span class="operator">?</span>.toolbar <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// background: transparent</span></span><br><span class="line">toolbar.setBackgroundImage(<span class="type">UIImage</span>(), forToolbarPosition: .any, barMetrics: .default)</span><br><span class="line">toolbar.setShadowImage(<span class="type">UIImage</span>(), forToolbarPosition: .any)</span><br><span class="line">toolbar.isTranslucent <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foreground</span></span><br><span class="line">toolbar.tintColor <span class="operator">=</span> .orange</span><br></pre></td></tr></table></figure><h1 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WebKit</span><br></pre></td></tr></table></figure><h2 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span>, <span class="title class_">WKNavigationDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> webView: <span class="type">WKWebView</span>!</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为什么要在loadView()而非viewDidLoad()中加载webView,那是因为这个view需要直接load成功,而非load完后再去加载,感觉会造成资源浪费</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">loadView</span>() &#123;</span><br><span class="line">        webView <span class="operator">=</span> <span class="type">WKWebView</span>()</span><br><span class="line">        <span class="comment">// 因为下面这行,所以ViewController需要遵循WKNavigationDelegate !!!</span></span><br><span class="line">        webView.navigationDelegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        view <span class="operator">=</span> webView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://www.hackingwithswift.com&quot;</span>)<span class="operator">!</span></span><br><span class="line">        webView.load(<span class="type">URLRequest</span>(url: url))</span><br><span class="line">        webView.allowsBackForwardNavigationGestures <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用webView加载内容-并显示出来"><a href="#使用webView加载内容-并显示出来" class="headerlink" title="使用webView加载内容,并显示出来"></a>使用webView加载内容,并显示出来</h2><p>显示效果是类似这样的:<br><img src="/Images/webViewLoadHtmlString.png" alt="webViewLoadHtmlString"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> WebKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Petition</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> body: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> signatureCount: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DetailViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> webView: <span class="type">WKWebView</span>!</span><br><span class="line">    <span class="keyword">var</span> detailItem: <span class="type">Petition</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">loadView</span>() &#123;</span><br><span class="line">        webView <span class="operator">=</span> <span class="type">WKWebView</span>()</span><br><span class="line">        view <span class="operator">=</span> webView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> detailItem <span class="operator">=</span> detailItem <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> html <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;style&gt; body &#123; font-size: 150%; &#125; &lt;/style&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">\(detailItem.body)</span></span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        webView.loadHTMLString(html, baseURL: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webView可实现的方法"><a href="#webView可实现的方法" class="headerlink" title="webView可实现的方法"></a>webView可实现的方法</h2><h3 id="func-webView-webView-WKWebView-didFinish-navigation-WKNavigation"><a href="#func-webView-webView-WKWebView-didFinish-navigation-WKNavigation" class="headerlink" title="func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) { }"></a>func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) { }</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">webView</span>(<span class="keyword">_</span> <span class="params">webView</span>: <span class="type">WKWebView</span>, <span class="params">didFinish</span> <span class="params">navigation</span>: <span class="type">WKNavigation</span>!) &#123;</span><br><span class="line">    title <span class="operator">=</span> webView.title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可实现网页显示标题</p><h3 id="func-webView-webView-WKWebView-decidePolicyFor-navigationAction-WKNavigationAction-decisionHandler-escaping-WKNavigationActionPolicy-gt-Void"><a href="#func-webView-webView-WKWebView-decidePolicyFor-navigationAction-WKNavigationAction-decisionHandler-escaping-WKNavigationActionPolicy-gt-Void" class="headerlink" title="func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void) { }"></a>func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -&gt; Void) { }</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">webView</span>(<span class="keyword">_</span> <span class="params">webView</span>: <span class="type">WKWebView</span>, <span class="params">decidePolicyFor</span> <span class="params">navigationAction</span>: <span class="type">WKNavigationAction</span>, <span class="params">decisionHandler</span>: <span class="keyword">@escaping</span> (<span class="type">WKNavigationActionPolicy</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> navigationAction.request.url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> host <span class="operator">=</span> url<span class="operator">?</span>.host &#123;</span><br><span class="line">        <span class="keyword">for</span> website <span class="keyword">in</span> websites &#123;</span><br><span class="line">            <span class="keyword">if</span> host.contains(website) &#123;</span><br><span class="line">                decisionHandler(.allow)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    decisionHandler(.cancel)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这方法就像是网页浏览器的过滤器,任何url都会在这边过滤一下,最终决定是decisionHandler(.allow)运行呢,还是decisionHandler(.cancel)拒绝呢。</p><h1 id="UIProgressView"><a href="#UIProgressView" class="headerlink" title="UIProgressView"></a>UIProgressView</h1><p>UIProgressView is a colored bar that shows how far a task is through its work, sometimes called a “progress bar.”</p><h2 id="实际案例-使用到addObserver-x2F-observeValue这两个观察者-x2F-处理者-即KVO"><a href="#实际案例-使用到addObserver-x2F-observeValue这两个观察者-x2F-处理者-即KVO" class="headerlink" title="实际案例 + 使用到addObserver&#x2F;observeValue这两个观察者&#x2F;处理者(即KVO)"></a>实际案例 + 使用到addObserver&#x2F;observeValue这两个观察者&#x2F;处理者(即KVO)</h2><p>通过网页的加载进度,直接反映在UIProgressView进度条上:</p><blockquote><p><a href="https://www.hackingwithswift.com/read/4/4/monitoring-page-loads-uitoolbar-and-uiprogressview">https://www.hackingwithswift.com/read/4/4/monitoring-page-loads-uitoolbar-and-uiprogressview</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> progressView: <span class="type">UIProgressView</span>!</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">loadView</span>() &#123;</span><br><span class="line">    webView <span class="operator">=</span> <span class="type">WKWebView</span>()</span><br><span class="line">    webView.navigationDelegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    view <span class="operator">=</span> webView</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hackingwithswift.com&quot;</span>)<span class="operator">!</span></span><br><span class="line">webView.load(<span class="type">URLRequest</span>(url: url))</span><br><span class="line"></span><br><span class="line">    progressView <span class="operator">=</span> <span class="type">UIProgressView</span>(progressViewStyle: .default)</span><br><span class="line">    progressView.sizeToFit()</span><br><span class="line">    <span class="keyword">let</span> progressButton <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(customView: progressView)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里就让progressButton占满toolbarItems这一整行</span></span><br><span class="line">    toolbarItems <span class="operator">=</span> [progressButton]</span><br><span class="line">    <span class="comment">// 决定toolbarItems是否显示</span></span><br><span class="line">    navigationController<span class="operator">?</span>.isToolbarHidden <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这个被定位主view的webView中增加一个观察者,主要观察这个key--WKWebView.estimatedProgress,有变化就会被告知</span></span><br><span class="line">    webView.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="keyword">#keyPath</span>(<span class="type">WKWebView</span>.estimatedProgress), options: .new, context: <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是观察后实时进行处理的函数</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">observeValue</span>(<span class="params">forKeyPath</span> <span class="params">keyPath</span>: <span class="type">String</span>?, <span class="params">of</span> <span class="params">object</span>: <span class="keyword">Any</span><span class="operator">?</span>, <span class="params">change</span>: [<span class="params">NSKeyValueChangeKey</span> : <span class="keyword">Any</span>]<span class="operator">?</span>, <span class="params">context</span>: <span class="type">UnsafeMutableRawPointer</span>?) &#123;</span><br><span class="line">    <span class="keyword">if</span> keyPath <span class="operator">==</span> <span class="string">&quot;estimatedProgress&quot;</span> &#123;</span><br><span class="line">        <span class="comment">// estimatedProgress is a Double, Unhelpfully, UIProgressView&#x27;s progress property is a Float</span></span><br><span class="line">        progressView.progress <span class="operator">=</span> <span class="type">Float</span>(webView.estimatedProgress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="UITextChecker"><a href="#UITextChecker" class="headerlink" title="UITextChecker"></a>UITextChecker</h1><p>UITextChecker类来源于UIKit,在SwiftUI没有替代方案的情况下,只能使用该方法了。</p><p>使用的案例(简单实现,下面的NSRange和rangeOfMisspelledWord又会重复一遍这个操作):<br>查找用户输入的英语单词是否在字典里,有没有拼错的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> word <span class="operator">=</span> <span class="string">&quot;swift&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checker <span class="operator">=</span> <span class="type">UITextChecker</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// location是从哪个位置开始,一般都是0,length是计算word在utf16中的长度</span></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> <span class="type">NSRange</span>(location: <span class="number">0</span>, length: word.utf16.count)</span><br><span class="line"></span><br><span class="line"><span class="comment">// in是要核对的词,range是核对的范围长度,wrap是持续核对的意思(具体没有试过)</span></span><br><span class="line"><span class="keyword">let</span> misspelledRange <span class="operator">=</span> checker.rangeOfMisspelledWord(in: word, range: range, startingAt: <span class="number">0</span>, wrap: <span class="literal">false</span>, language: <span class="string">&quot;en&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值要么是The range of the first misspelled word encountered</span></span><br><span class="line"><span class="comment">// 没找到就是&#123;NSNotFound, 0&#125; if none is found.</span></span><br><span class="line"><span class="keyword">let</span> allGood <span class="operator">=</span> misspelledRange.location <span class="operator">==</span> <span class="type">NSNotFound</span></span><br><span class="line"><span class="comment">// 有这个单词也没拼错的情况返回true,不然返回false</span></span><br></pre></td></tr></table></figure><p>方法的解释可以参考下面的文章:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/working-with-strings">https://www.hackingwithswift.com/books/ios-swiftui/working-with-strings</a><br><a href="https://www.hackingwithswift.com/books/ios-swiftui/validating-words-with-uitextchecker">https://www.hackingwithswift.com/books/ios-swiftui/validating-words-with-uitextchecker</a></p></blockquote><p>注意：<br>UITextChecker uses the built-in system dictionary.我们不用为其特意准备单词表等文档。</p><h1 id="Auto-Layout-自动页面布局的设置"><a href="#Auto-Layout-自动页面布局的设置" class="headerlink" title="Auto Layout 自动页面布局的设置"></a>Auto Layout 自动页面布局的设置</h1><h2 id="通过Storyboard来设置"><a href="#通过Storyboard来设置" class="headerlink" title="通过Storyboard来设置"></a>通过Storyboard来设置</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/6/2/advanced-auto-layout">https://www.hackingwithswift.com/read/6/2/advanced-auto-layout</a></p></blockquote><p>以上是三面国旗间如何通过storyboard来自动设置布局,以让起在portrait&#x2F;landscape中均能够有一个好的效果。<br>通过该视频就能大致了解了,而看文字的话比较繁琐。</p><h2 id="通过Storyboard自动布局后如何让它变为自动布局"><a href="#通过Storyboard自动布局后如何让它变为自动布局" class="headerlink" title="通过Storyboard自动布局后如何让它变为自动布局"></a>通过Storyboard自动布局后如何让它变为自动布局</h2><p>在Storyboard中布局各个view后,可以让屏幕自动布局页面,这样在landscape或是不同屏幕大小的机型上,都可以自动适应布局:</p><ol><li>Select the view controller by clicking on “View Controller” in the document outline, </li><li>then go to the Editor menu </li><li>and choose Resolve Auto Layout Issues &gt; Reset To Suggested Constraints.</li></ol><h2 id="通过Storyboard布局后-如何让一个view在Storyboard上回到它应该显示的位置上？"><a href="#通过Storyboard布局后-如何让一个view在Storyboard上回到它应该显示的位置上？" class="headerlink" title="通过Storyboard布局后,如何让一个view在Storyboard上回到它应该显示的位置上？"></a>通过Storyboard布局后,如何让一个view在Storyboard上回到它应该显示的位置上？</h2><p>我们在Storyboard上扔下一个UILabel,让其显示”Here is a UILbale !”,字体设置为30,随后通过鼠标contrl指向空白处,此时选择”Center Horizontally in safe area” &#x2F; “Center Vertically in safe area”,随后鼠标点击该label,我们看的是:<br><img src="/Images/labelLayout_0.png" alt="labelLayout"><br>我们来分析一个这个图:<br>可以看到实线包围的label和一个虚线包围的label。实线的(the solid orange lines)代表你的label现在在的位置,而虚线的(the dashed orange lines)代表程序运行后你的label会在的位置。</p><p>那么如何让这个label回到它在程序运行后应该在的位置呢?<br>Editor menu and choosing Resolve Auto Layout Issues &gt; Update Frames<br>设置后是这样的:<br><img src="/Images/labelLayout_1.png" alt="labelLayout"><br>这样就这样了,没有橙线了。</p><h2 id="通过addConstraints-with-Visual-Format-Language-VFL"><a href="#通过addConstraints-with-Visual-Format-Language-VFL" class="headerlink" title="通过addConstraints with Visual Format Language (VFL)"></a>通过addConstraints with Visual Format Language (VFL)</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/6/3/auto-layout-in-code-addconstraints-with-visual-format-language">https://www.hackingwithswift.com/read/6/3/auto-layout-in-code-addconstraints-with-visual-format-language</a></p></blockquote><p>一个不通过Storyboard可视化布局来显示页面的简单例子:<br>(因为之前有执念一直在想有没有办法能够实现,所以一知道怎么做了,就写进了笔记里)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>()</span><br><span class="line">    <span class="comment">// 关键的translatesAutoresizingMaskIntoConstraints的设置</span></span><br><span class="line">    imageView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(systemName: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">    imageView.layer.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red.cgColor</span><br><span class="line">    <span class="comment">// 这里不要关心我这里布局代码用到的是anchor,只是随便用了个布局方法</span></span><br><span class="line">    imageView.widthAnchor.constraint(equalToConstant: <span class="number">100</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    imageView.heightAnchor.constraint(equalToConstant: <span class="number">100</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    view.addSubview((imageView))</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里之前一直想随便写个view让其能够显示,始终没有显示,后来发觉是因为没有这行代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>because by default iOS generates Auto Layout constraints for you based on a view’s size and position. We’ll be doing it by hand, so we need to disable this feature.</p><p>Q: 为什么 imageView.translatesAutoresizingMaskIntoConstraints &#x3D; true 的时候就没有显示这个view呢？<br>A: I have no answer…….</p><p>详细一点的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先是 五个label图像元素</span></span><br><span class="line">verride <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> label1 <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    label1.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    label1.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">    label1.text <span class="operator">=</span> <span class="string">&quot;THESE&quot;</span></span><br><span class="line">    label1.sizeToFit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> label2 <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    label2.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    label2.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.cyan</span><br><span class="line">    label2.text <span class="operator">=</span> <span class="string">&quot;ARE&quot;</span></span><br><span class="line">    label2.sizeToFit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> label3 <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    label3.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    label3.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.yellow</span><br><span class="line">    label3.text <span class="operator">=</span> <span class="string">&quot;SOME&quot;</span></span><br><span class="line">    label3.sizeToFit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> label4 <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    label4.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    label4.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.green</span><br><span class="line">    label4.text <span class="operator">=</span> <span class="string">&quot;AWESOME&quot;</span></span><br><span class="line">    label4.sizeToFit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> label5 <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">    label5.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    label5.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.orange</span><br><span class="line">    label5.text <span class="operator">=</span> <span class="string">&quot;LABELS&quot;</span></span><br><span class="line">    label5.sizeToFit()        </span><br><span class="line"></span><br><span class="line">    view.addSubview(label1)</span><br><span class="line">    view.addSubview(label2)</span><br><span class="line">    view.addSubview(label3)</span><br><span class="line">    view.addSubview(label4)</span><br><span class="line">    view.addSubview(label5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在这些图像都挤在左上角！还互相叠着！</p><p>设置一个dict:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> viewsDictionary <span class="operator">=</span> [<span class="string">&quot;label1&quot;</span>: label1, <span class="string">&quot;label2&quot;</span>: label2, <span class="string">&quot;label3&quot;</span>: label3, <span class="string">&quot;label4&quot;</span>: label4, <span class="string">&quot;label5&quot;</span>: label5]</span><br></pre></td></tr></table></figure><p>添加布局:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> viewsDictionary.keys &#123;</span><br><span class="line">    view.addConstraints( <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">&quot;H:|[<span class="subst">\(label)</span>]|&quot;</span>, options: [], metrics: <span class="literal">nil</span>, views: viewsDictionary))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSLayoutConstraint.constraints(withVisualFormat:)相对比较关键。<br>里面的用字符串表示的”H:|[label1]|”中,H代表Horizontal,前后的两个｜分别代表了屏幕的左右边缘。</p><p>看懂下面的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.addConstraints( <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">&quot;V:|[label1]-[label2]-[label3]-[label4]-[label5]&quot;</span>, options: [], metrics: <span class="literal">nil</span>, views: viewsDictionary))</span><br></pre></td></tr></table></figure><p>5个label按照次序沿着屏幕左侧开始依次排列。其中分隔每个label的符号”-“意味着有间隔,这个间隔的默认值是10,可以自定义。</p><p>以及设置更精确的数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.addConstraints( <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">&quot;V:|[label1(==88)]-[label2(==88)]-[label3(==88)]-[label4(==88)]-[label5(==88)]-(&gt;=10)-|&quot;</span>, options: [], metrics: <span class="literal">nil</span>, views: viewsDictionary))</span><br></pre></td></tr></table></figure><p>以及使用到metrics参数的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> metrics <span class="operator">=</span> [<span class="string">&quot;labelHeight&quot;</span>: <span class="number">88</span>]</span><br><span class="line">view.addConstraints( <span class="type">NSLayoutConstraint</span>.constraints(withVisualFormat: <span class="string">&quot;V:|[label1(labelHeight)]-[label2(labelHeight)]-[label3(labelHeight)]-[label4(labelHeight)]-[label5(labelHeight)]-&gt;=10-|&quot;</span>, options: [], metrics: metrics, views: viewsDictionary))</span><br></pre></td></tr></table></figure><p>So when your designer &#x2F; manager &#x2F; inner-pedant decides that 88 points is wrong and you want some other number, you can change it in one place to have everything update.</p><p>以及使用优先级priority的情况:(优先级是从1-1000,数字越大优先级越高) - @数字</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;V:|[label1(labelHeight@999)]-[label2(label1)]-[label3(label1)]-[label4(label1)]-[label5(label1)]-&gt;=10-|&quot;</span></span><br></pre></td></tr></table></figure><p>自己理解:label1设置了一个高度,并对该高度设置了一个优先级,那么其他四个label的高度和其一样(包括优先级)。</p><h2 id="通过Auto-Layout-anchors来自动布局"><a href="#通过Auto-Layout-anchors来自动布局" class="headerlink" title="通过Auto Layout anchors来自动布局"></a>通过Auto Layout anchors来自动布局</h2><p>Every UIView has a set of anchors that define its layouts rules.<br>The most important ones are<br><strong>widthAnchor</strong>, <strong>heightAnchor</strong>, <strong>topAnchor</strong>, <strong>bottomAnchor</strong>, <strong>leftAnchor</strong>, <strong>rightAnchor</strong>, <strong>leadingAnchor</strong>, <strong>trailingAnchor</strong>, <strong>centerXAnchor</strong>, and <strong>centerYAnchor</strong>.</p><p>一般用例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> [label1, label2, label3, label4, label5] &#123;</span><br><span class="line">    label.widthAnchor.constraint(equalTo: view.widthAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    label.heightAnchor.constraint(equalToConstant: <span class="number">88</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般用例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> previous <span class="operator">=</span> previous &#123;</span><br><span class="line">    <span class="comment">// we have a previous label – create a height constraint</span></span><br><span class="line">    label.topAnchor.constraint(equalTo: previous.bottomAnchor, constant: <span class="number">10</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// this is the first label</span></span><br><span class="line">    label.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: <span class="number">0</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到的view.safeAreaLayoutGuide其实理解下来就是除了上下那两块的其他安全区域的屏幕范围。</p><p>还有这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourView.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: <span class="number">0.5</span>, constant: <span class="number">50</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>就是在0.5倍的基础上再加50的意思。</p><p>还可以用到<strong>NSLayoutConstraint.activate</strong>集合很多规则:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSLayoutConstraint</span>.activate([</span><br><span class="line">    scoreLabel.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),</span><br><span class="line">    scoreLabel.trailingAnchor.constraint(equalTo: view.layoutMarginsGuide.trailingAnchor),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// more constraints to be added here!</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>Notice the way I’m pinning the label to view.layoutMarginsGuide – that will make the score label have a little distance from the right edge of the screen.</p><h3 id="yourView-setContentHuggingPriority-UILayoutPriority-Int-for"><a href="#yourView-setContentHuggingPriority-UILayoutPriority-Int-for" class="headerlink" title="yourView.setContentHuggingPriority(UILayoutPriority(Int), for: )"></a>yourView.setContentHuggingPriority(UILayoutPriority(Int), for: )</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cluesLabel.setContentHuggingPriority(<span class="type">UILayoutPriority</span>(<span class="number">1</span>), for: .vertical)</span><br><span class="line">answersLabel.setContentHuggingPriority(<span class="type">UILayoutPriority</span>(<span class="number">1</span>), for: .vertical)</span><br></pre></td></tr></table></figure><p>优先级是从1-1000的,此处设置为1,代表最没有优先级,for是指适用于垂直面的。</p><h2 id="创建的Game项目的屏幕大小layout的适配"><a href="#创建的Game项目的屏幕大小layout的适配" class="headerlink" title="创建的Game项目的屏幕大小layout的适配"></a>创建的Game项目的屏幕大小layout的适配</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/14/2/getting-up-and-running-skcropnode">https://www.hackingwithswift.com/read/14/2/getting-up-and-running-skcropnode</a></p></blockquote><p>创建了一个Game项目,之前教程中均是使用spriteKit来制作的,一般都会设置屏幕大小为1024*768,这在一般iPad上都没问题,11-inch iPad Pro会比较特殊,所以需要做一个适配:<br>在GameViewController.swift中,将<br>“scene.scaleMode &#x3D; .aspectFill”<br>替换成<br>“scene.scaleMode &#x3D; .fill”</p><h2 id="UIEdgeInsets-–-类似于给UIView加一个padding的设置"><a href="#UIEdgeInsets-–-类似于给UIView加一个padding的设置" class="headerlink" title="UIEdgeInsets – 类似于给UIView加一个padding的设置"></a>UIEdgeInsets – 类似于给UIView加一个padding的设置</h2><p>我们创建一个UITextView:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBOutlet</span> <span class="keyword">var</span> textView: <span class="type">UITextView</span>!</span><br></pre></td></tr></table></figure><p>并在storyboard上设置了它的大小,执行后是这样的:<br><img src="/Images/UIEdgeInsets_0.png" alt="UIEdgeInsets"></p><p>如果我们给它加上Inset:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView.contentInset <span class="operator">=</span> <span class="type">UIEdgeInsets</span>(top: <span class="number">50</span>, left: <span class="number">50</span>, bottom: <span class="number">50</span>, right: <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>它就会是这样:<br><img src="/Images/UIEdgeInsets_1.png" alt="UIEdgeInsets"></p><h1 id="UITabBarController"><a href="#UITabBarController" class="headerlink" title="UITabBarController"></a>UITabBarController</h1><h2 id="如何更改Tabbar的显示文字和图标"><a href="#如何更改Tabbar的显示文字和图标" class="headerlink" title="如何更改Tabbar的显示文字和图标"></a>如何更改Tabbar的显示文字和图标</h2><p>假设3个页面依次嵌套是这样的:<br>View Controller Scene – Navigation Controller Scene – Tab Bar Controller Scene</p><p>如何更改Tabbar的显示文字和图标？<br>需要在Storyboard中找到Navigation Controller Scene(而非Tab Bar Controller Scene),随后选到这个Tabbar元素(a new type of object called a UITabBarItem),再右侧属性栏的Bar Item中去更改其的Title和Image。</p><h2 id="如何增加Tab页面"><a href="#如何增加Tab页面" class="headerlink" title="如何增加Tab页面"></a>如何增加Tab页面</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/7/5/finishing-touches-didfinishlaunchingwithoptions">https://www.hackingwithswift.com/read/7/5/finishing-touches-didfinishlaunchingwithoptions</a></p></blockquote><p>打开AppDelegate.swif,找寻到didFinishLaunchingWithOptions方法,在里面添加如下代码,最终的代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span> : <span class="keyword">Any</span>]<span class="operator">?</span> <span class="operator">=</span> <span class="literal">nil</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> tabBarController <span class="operator">=</span> window<span class="operator">?</span>.rootViewController <span class="keyword">as?</span> <span class="type">UITabBarController</span> &#123;</span><br><span class="line">        <span class="comment">// 以上代码,因为上面讲过3个页面嵌套,Tab Bar Controller Scene是最root的view</span></span><br><span class="line">        <span class="comment">// 找到我们的storyboard,我们的storyboard默认取名是Main</span></span><br><span class="line">        <span class="keyword">let</span> storyboard <span class="operator">=</span> <span class="type">UIStoryboard</span>(name: <span class="string">&quot;Main&quot;</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 之前给Navigation Controller Scene起过一个StoryboardID是NavController,这里生成一个这样的页面</span></span><br><span class="line">        <span class="keyword">let</span> vc <span class="operator">=</span> storyboard.instantiateViewController(withIdentifier: <span class="string">&quot;NavController&quot;</span>)</span><br><span class="line">        <span class="comment">// 从storyboard中可以看到,Navigation Controller Scene里面有一个tabBarItem,</span></span><br><span class="line">        <span class="comment">// 所以给tabBarItem定义成一个UITabBarItem,重要的是tag为1,因为本来就有存在的那个tag为0</span></span><br><span class="line">        vc.tabBarItem <span class="operator">=</span> <span class="type">UITabBarItem</span>(tabBarSystemItem: .topRated, tag: <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 将该tabBarItem所在的vc添加进tabBarController</span></span><br><span class="line">        tabBarController.viewControllers<span class="operator">?</span>.append(vc)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后,如何在相同的一个ViewControllerScene中区别开是哪个tab页面?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlString: <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> navigationController<span class="operator">?</span>.tabBarItem.tag <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span></span><br><span class="line">    urlString <span class="operator">=</span> <span class="string">&quot;https://www.hackingwithswift.com/samples/petitions-1.json&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?signatureCountFloor=10000&amp;limit=100&quot;</span></span><br><span class="line">    urlString <span class="operator">=</span> <span class="string">&quot;https://www.hackingwithswift.com/samples/petitions-2.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UILabel"><a href="#UILabel" class="headerlink" title="UILabel()"></a>UILabel()</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scoreLabel <span class="operator">=</span> <span class="type">UILabel</span>()</span><br><span class="line">scoreLabel.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">// 设置对齐</span></span><br><span class="line">scoreLabel.textAlignment <span class="operator">=</span> .right</span><br><span class="line"><span class="comment">// 设置内容</span></span><br><span class="line">scoreLabel.text <span class="operator">=</span> <span class="string">&quot;Score: 0&quot;</span></span><br><span class="line"><span class="comment">// 设置字体大小</span></span><br><span class="line">scoreLabel.font <span class="operator">=</span> <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">24</span>)</span><br><span class="line"><span class="comment">// 设置背景色</span></span><br><span class="line">scoreLabel.backgroundColor <span class="operator">=</span> .blue</span><br><span class="line"><span class="comment">// 设置字体颜色</span></span><br><span class="line">scoreLabel.textColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">view.addSubview(scoreLabel)</span><br></pre></td></tr></table></figure><h1 id="UITextfield"><a href="#UITextfield" class="headerlink" title="UITextfield"></a>UITextfield</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">currentAnswer <span class="operator">=</span> <span class="type">UITextField</span>()</span><br><span class="line">currentAnswer.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">// 设置placeholder</span></span><br><span class="line">currentAnswer.placeholder <span class="operator">=</span> <span class="string">&quot;Tap letters to guess&quot;</span></span><br><span class="line"><span class="comment">// 设置对齐</span></span><br><span class="line">currentAnswer.textAlignment <span class="operator">=</span> .center</span><br><span class="line"><span class="comment">// 设置字体大小</span></span><br><span class="line">currentAnswer.font <span class="operator">=</span> <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">44</span>)</span><br><span class="line"><span class="comment">// 设置是否用户可输入</span></span><br><span class="line">currentAnswer.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">view.addSubview(currentAnswer)</span><br></pre></td></tr></table></figure><p>注意:UITextField只能显示一行,而UITextView可以显示多行,这就是两者的区别。</p><h1 id="UITextView"><a href="#UITextView" class="headerlink" title="UITextView"></a>UITextView</h1><p>UITextView可以显示多行,而UITextField只能显示一行,这就是两者的区别。</p><h2 id="UITextView-contentInset-–-类似于一个padding"><a href="#UITextView-contentInset-–-类似于一个padding" class="headerlink" title="UITextView.contentInset – 类似于一个padding"></a>UITextView.contentInset – 类似于一个padding</h2><p>具体操作见 “Auto Layout 自动页面布局的设置” -&gt; “UIEdgeInsets” 。</p><h2 id="UITextView-endEditing-true-x2F-false-–-隐藏-x2F-显示-keyboard"><a href="#UITextView-endEditing-true-x2F-false-–-隐藏-x2F-显示-keyboard" class="headerlink" title="UITextView.endEditing(true&#x2F;false) – 隐藏&#x2F;显示 keyboard"></a>UITextView.endEditing(true&#x2F;false) – 隐藏&#x2F;显示 keyboard</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// textView: UITextView</span></span><br><span class="line">textView.endEditing(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="UITextView的resignFirstResponder"><a href="#UITextView的resignFirstResponder" class="headerlink" title="UITextView的resignFirstResponder()"></a>UITextView的resignFirstResponder()</h2><p>就是取消focus,让键盘隐藏的作用。<br>This is used to tell a view that has input focus that it should give up that focus. Or, in Plain English, to tell our text view that we’re finished editing it, so the keyboard can be hidden. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">saveSecretMessage</span>() &#123;</span><br><span class="line">    <span class="keyword">guard</span> secret.isHidden <span class="operator">==</span> <span class="literal">false</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">KeychainWrapper</span>.standard.set(secret.text, forKey: <span class="string">&quot;SecretMessage&quot;</span>)</span><br><span class="line">    secret.resignFirstResponder()</span><br><span class="line">    secret.isHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    title <span class="operator">=</span> <span class="string">&quot;Nothing to see here&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>p.s.</p><h1 id="GCD-Grand-Central-Dispatch"><a href="#GCD-Grand-Central-Dispatch" class="headerlink" title="GCD - Grand Central Dispatch"></a>GCD - Grand Central Dispatch</h1><p>GCD是帮助你自动化管理进程的一套东西。GCD中的三个方法之一，最重要的就是async()。</p><p>后台进程中,有四种选择,或者叫QoS level set:</p><ol><li>User Interactive: this is the highest priority background thread, and should be used when you want a background thread to do work that is important to keep your user interface working. This priority will ask the system to dedicate nearly all available CPU time to you to get the job done as quickly as possible.</li><li>User Initiated: this should be used to execute tasks requested by the user that they are now waiting for in order to continue using your app. It’s not as important as user interactive work – i.e., if the user taps on buttons to do other stuff, that should be executed first – but it is important because you’re keeping the user waiting.</li><li>The Utility queue: this should be used for long-running tasks that the user is aware of, but not necessarily desperate for now. If the user has requested something and can happily leave it running while they do something else with your app, you should use Utility.</li><li>The Background queue: this is for long-running tasks that the user isn’t actively aware of, or at least doesn’t care about its progress or when it completes.</li></ol><p>Those QoS queues affect the way the system prioritizes your work: User Interactive and User Initiated tasks will be executed as quickly as possible regardless of their effect on battery life, Utility tasks will be executed with a view to keeping power efficiency as high as possible without sacrificing too much performance, whereas Background tasks will be executed with power efficiency as its priority.</p><p>如何使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在默认的Background queue进程中</span></span><br><span class="line"><span class="comment">// The default GCD background queue has a lower priority than .userInitiated but higher than .utility.</span></span><br><span class="line"><span class="type">DispatchQueue</span>.global().async &#123;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定在User Initiated进程中</span></span><br><span class="line"><span class="type">DispatchQueue</span>.global(qos: .userInitiated).async &#123;</span><br></pre></td></tr></table></figure><p>此外,在 async() 里面的代码不需要使用[weak self] in之类的语句,因为async()执行完就会被丢弃,不存在留存东西的情况。</p><p><strong>performSelector(inBackground:)</strong> 和 <strong>performSelector(onMainThread:)</strong> 这两种方法更好用一些,因为更加简单,只要决定是放在main thread,还是background上运行就行。<br>(初步用下来,performSelector会有些问题,莫名的警告之类的,可能更推荐使用DispatchQueue.global()&#x2F;DispatchQueue.main之类的吧)<br>示例代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">performSelector(onMainThread: <span class="keyword">#selector</span>(showError), with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">showError</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Loading error&quot;</span>, message: <span class="string">&quot;There was a problem loading the feed; please check your connection and try again.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">    present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is an Objective-C call, so the @objc attribute is required.</p><p>这里发现个情况，几种代码的情况竟然都是可以的:<br>场景是,一个class ViewController: UITableViewController内定义了fun tableView的实现,这时候,需要在background中对tabaleView中的UI数据进行更新,肯定是要在主线程即main thread中更新的,<br>我们可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">    <span class="keyword">self</span><span class="operator">?</span>.tableView.reloadData()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里写self?是因为在DispatchQueue.global().async这个closure中,里面引用的外部self必须是个optional,这里请忽略</span></span><br><span class="line"><span class="keyword">self</span><span class="operator">?</span>.tableView.performSelector(onMainThread: <span class="keyword">#selector</span>(<span class="keyword">self</span><span class="operator">?</span>.tableView.reloadData), with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>竟然还可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="operator">?</span>.tableView.performSelector(onMainThread: <span class="keyword">#selector</span>(<span class="type">UITableView</span>.reloadData), with: <span class="literal">nil</span>, waitUntilDone: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>没想到的是,#selector(UITableView.reloadData)中的“UITableView.”竟然也是可以引用到这个方法的,一时半会儿有点概念不清晰，但又感觉可能可以。</p><h2 id="DispatchWorkItem-–-dispatch-queue-或-dispatch-group-下的运行单元"><a href="#DispatchWorkItem-–-dispatch-queue-或-dispatch-group-下的运行单元" class="headerlink" title="DispatchWorkItem – dispatch queue 或 dispatch group 下的运行单元"></a>DispatchWorkItem – dispatch queue 或 dispatch group 下的运行单元</h2><p>定义:<br>A DispatchWorkItem encapsulates work to be performed on a dispatch queue or a dispatch group. It is primarily used in scenarios where we require the capability of delaying or canceling a block of code from executing.</p><p>为什么需要<code>DispatchWorkItem</code>,而不是直接在<code>DispatchQueue.global()</code>&#x2F;<code>DispatchQueue.main</code>中直接定义要运行的代码?<br>因为<code>DispatchWorkItem</code>可以为后续停止该<code>DispatchWorkItem</code>埋下伏笔。<br>在开始或运行该<code>DispatchWorkItem</code>之前,你都可以<code>cancel</code>掉或delay掉。</p><p>示例代码1:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> workItem: <span class="type">DispatchWorkItem</span>?</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getSearchResults</span>(<span class="params">query</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        workItem<span class="operator">?</span>.cancel()</span><br><span class="line">        <span class="keyword">let</span> newWorkItem <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;send a backend request for <span class="subst">\(query)</span>&quot;</span>)</span><br><span class="line">            <span class="comment">// async task to fetch results based on the query</span></span><br><span class="line">        &#125;</span><br><span class="line">        workItem <span class="operator">=</span> newWorkItem</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().asyncAfter(</span><br><span class="line">            deadline: .now() <span class="operator">+</span> .milliseconds(<span class="number">30</span>), execute: newWorkItem</span><br><span class="line">        ) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cont <span class="operator">=</span> <span class="type">Controller</span>()</span><br><span class="line">cons.getSearchResults(query: <span class="string">&quot;s&quot;</span>)</span><br><span class="line">cons.getSearchResults(query: <span class="string">&quot;sh&quot;</span>)</span><br><span class="line"><span class="type">Thread</span>.sleep(forTimeInterval: <span class="type">Double</span>.random(in: <span class="number">1</span><span class="operator">...</span><span class="number">3</span>))</span><br><span class="line">cons.getSearchResults(query: <span class="string">&quot;shi&quot;</span>)</span><br><span class="line">cons.getSearchResults(query: <span class="string">&quot;shir&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行后的打印结果:</span></span><br><span class="line"><span class="comment">// send a backend request for sh</span></span><br><span class="line"><span class="comment">// send a backend request for shir</span></span><br></pre></td></tr></table></figure><p>以上代码的使用场景,比如用户在注册用户名时,当用户输入时,下一个输入字符超过多少时长的情况下,程序就会将该输入的字符放松到服务器进行校验;若在规定时间内输入了,由于有<code>workItem?.cancel()</code>,所以就会取消校验,等下次用户的输入超时的情况。</p><p>示例代码2:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> showAnimatedPresentation: <span class="type">DispatchWorkItem</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        showAnimatedPresentation <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">            <span class="comment">// show some cool animated presentation</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;showing animated Presentation&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// show the animated presentation, if the user hasn&#x27;t interacted with</span></span><br><span class="line">        <span class="comment">// the app for more than 4 seconds</span></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> .seconds(<span class="number">4</span>), execute: showAnimatedPresentation<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">usedTheApp</span>() &#123;</span><br><span class="line">        <span class="comment">// will cancel the workitem from executing</span></span><br><span class="line">        showAnimatedPresentation<span class="operator">?</span>.cancel()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;app used&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码,若正常运行,且用户未执行<code>usedTheApp</code>方法,则会在4秒后执行该<code>DispatchWorkItem</code>;但若4秒内用户执行了<code>usedTheApp</code>方法,则该<code>DispatchWorkItem</code>不会被执行到,因为被<code>cancel()</code>掉了。</p><h3 id="DispatchWorkItem-的-notify-和-perform"><a href="#DispatchWorkItem-的-notify-和-perform" class="headerlink" title="DispatchWorkItem 的 notify() 和 perform()"></a>DispatchWorkItem 的 notify() 和 perform()</h3><p><code>DispatchWorkItem</code> 的 <code>Notify()</code> 的作用是:<br>一个<code>DispatchWorkItem</code>可以指定一个特殊的workItem,使用DispatchWorkItem的Notify()来实现。当<code>DispatchWorkItem</code>执行完毕后,这个特殊的workItem会接着执行,像是一个执行的序列一样:<br>示例代码3:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getSomethingFromServer</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> newWorkItem <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fetching data from the server&quot;</span>)</span><br><span class="line">            <span class="comment">// async task to fetch results based on the query</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// work item to notify the view that the info is ready</span></span><br><span class="line">        <span class="keyword">let</span> notifyTheView <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;the info from server has arrived&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this get executed when newWorkItem has finished execution</span></span><br><span class="line">        newWorkItem.notify(queue: .main) &#123;</span><br><span class="line">            notifyTheView.perform()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async(execute: newWorkItem)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cont <span class="operator">=</span> <span class="type">Controller</span>()</span><br><span class="line">cont.getSomethingFromServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fetching data from the server</span></span><br><span class="line"><span class="comment">&lt;NSThread: 0x600001ced040&gt;&#123;number = 5, name = (null)&#125;</span></span><br><span class="line"><span class="comment">the info from server has arrived</span></span><br><span class="line"><span class="comment">&lt;_NSMainThread: 0x600001ce81c0&gt;&#123;number = 1, name = main&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>newWorkItem</code>执行完的同时,将会执行<code>notify</code>中的内容,而<code>DispatchWorkItem</code>的<code>perform()</code>是同步执行的,并非异步执行。</p><h3 id="DispatchWorkItem-的-perform"><a href="#DispatchWorkItem-的-perform" class="headerlink" title="DispatchWorkItem 的 perform()"></a>DispatchWorkItem 的 perform()</h3><p>Perform():Executes the work item’s block synchronously on the current thread.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> worker <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.perform() <span class="comment">// 在当前进程中同步执行</span></span><br></pre></td></tr></table></figure><h3 id="DispatchWorkItem-的-wait"><a href="#DispatchWorkItem-的-wait" class="headerlink" title="DispatchWorkItem 的 wait()"></a>DispatchWorkItem 的 wait()</h3><p><code>DispatchWorkItem</code>的<code>wait()</code>的作用,是由某个<code>DispatchWorkItem</code>来阻塞(block)这个thread,直到这个<code>DispatchWorkItem</code>执行完毕。<br>示例代码4:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getSomethingFromServer</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> newWorkItem <span class="operator">=</span> <span class="type">DispatchWorkItem</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fetching data from the server&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="type">Thread</span>.current)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatchQueue</span>.global().async(execute: newWorkItem)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// blocks the thread until newWorkItem finishes execution</span></span><br><span class="line">        newWorkItem.wait()</span><br><span class="line">        <span class="comment">// This gets printed after newWorkItem finishes execution</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;finishes execution&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cont <span class="operator">=</span> <span class="type">Controller</span>()</span><br><span class="line">cont.getSomethingFromServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">fetching data from the server</span></span><br><span class="line"><span class="comment">&lt;NSThread: 0x600003090f40&gt;&#123;number = 6, name = (null)&#125;</span></span><br><span class="line"><span class="comment">finishes execution</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>但并不推荐使用<code>wait()</code>,因为会在执行时造成阻塞。</p><p>非常非常奇怪:<br>为何示例代码4代码中,<code>DispatchQueue.global().async(execute: newWorkItem)</code>换成<code>xxxx.main.xxx</code>,在playground中就会停止运行也未报错。<br>这是为何？</p><h1 id="UICollectionView"><a href="#UICollectionView" class="headerlink" title="UICollectionView"></a>UICollectionView</h1><blockquote><p><a href="https://www.hackingwithswift.com/read/10/2/designing-uicollectionview-cells">https://www.hackingwithswift.com/read/10/2/designing-uicollectionview-cells</a></p></blockquote><p>在Storyboard上创建UIColletionView的过程,与创建UITableView差不多,也是在删除原有的controller,在libraries里拖拉出一个Collection View Controller拖进storyboard。</p><p>接下来要建立一个对应UICollectionViewCell的Cocoa Touch Class的文件,在storyboard中找到CollectionViewCell(就如同找到table cell一样),让其的class对应该协议,此外要给该CollectionViewCell的identifier取个名字,好在代码中生成这个cell。</p><h2 id="IndexPath-item-Int-section-Int"><a href="#IndexPath-item-Int-section-Int" class="headerlink" title="IndexPath(item: Int, section: Int)"></a>IndexPath(item: Int, section: Int)</h2><p><code> let indexPath = IndexPath(item: 1, section: 0)</code></p><h2 id="需要实现的方法-1"><a href="#需要实现的方法-1" class="headerlink" title="需要实现的方法"></a>需要实现的方法</h2><h3 id="override-func-collectionView-collectionView-UICollectionView-numberOfItemsInSection-section-Int-gt-Int"><a href="#override-func-collectionView-collectionView-UICollectionView-numberOfItemsInSection-section-Int-gt-Int" class="headerlink" title="override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int { }"></a>override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int { }</h3><p>示例代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">collectionView</span>(<span class="keyword">_</span> <span class="params">collectionView</span>: <span class="type">UICollectionView</span>, <span class="params">numberOfItemsInSection</span> <span class="params">section</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="override-func-collectionView-collectionView-UICollectionView-cellForItemAt-indexPath-IndexPath-gt-UICollectionViewCell"><a href="#override-func-collectionView-collectionView-UICollectionView-cellForItemAt-indexPath-IndexPath-gt-UICollectionViewCell" class="headerlink" title="override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {}"></a>override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {}</h3><p>示例代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">collectionView</span>(<span class="keyword">_</span> <span class="params">collectionView</span>: <span class="type">UICollectionView</span>, <span class="params">cellForItemAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell <span class="operator">=</span> collectionView.dequeueReusableCell(withReuseIdentifier: <span class="string">&quot;Person&quot;</span>, for: indexPath) <span class="keyword">as?</span> <span class="type">PersonCell</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// we failed to get a PersonCell – bail out!</span></span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">&quot;Unable to dequeue PersonCell.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we&#x27;re still here it means we got a PersonCell, so we can return it</span></span><br><span class="line">    <span class="keyword">return</span> cell</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可以实现的方法-1"><a href="#可以实现的方法-1" class="headerlink" title="可以实现的方法"></a>可以实现的方法</h2><h3 id="override-func-collectionView-collectionView-UICollectionView-didSelectItemAt-indexPath-IndexPath"><a href="#override-func-collectionView-collectionView-UICollectionView-didSelectItemAt-indexPath-IndexPath" class="headerlink" title="override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { }"></a>override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) { }</h3><p>示例代码1:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">collectionView</span>(<span class="keyword">_</span> <span class="params">collectionView</span>: <span class="type">UICollectionView</span>, <span class="params">didSelectItemAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> person <span class="operator">=</span> people[indexPath.item]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Rename person&quot;</span>, message: <span class="literal">nil</span>, preferredStyle: .alert)</span><br><span class="line">    ac.addTextField()</span><br><span class="line"></span><br><span class="line">    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Cancel&quot;</span>, style: .cancel))</span><br><span class="line"></span><br><span class="line">    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>, <span class="keyword">weak</span> ac] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> newName <span class="operator">=</span> ac<span class="operator">?</span>.textFields<span class="operator">?</span>[<span class="number">0</span>].text <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        person.name <span class="operator">=</span> newName</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span><span class="operator">?</span>.collectionView.reloadData()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码2:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">collectionView</span>(<span class="keyword">_</span> <span class="params">collectionView</span>: <span class="type">UICollectionView</span>, <span class="params">didSelectItemAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) &#123;</span><br><span class="line">    <span class="comment">// 取得被点击的cell</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell <span class="operator">=</span> collectionView.cellForItem(at: indexPath) <span class="keyword">as?</span> <span class="type">CardCell</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="collectionView-cellForItem-at-IndexPath-–-取得collectionView中指定的cell"><a href="#collectionView-cellForItem-at-IndexPath-–-取得collectionView中指定的cell" class="headerlink" title="collectionView.cellForItem(at: IndexPath) – 取得collectionView中指定的cell"></a>collectionView.cellForItem(at: IndexPath) – 取得collectionView中指定的cell</h4><p>具体用法见上面的例子。</p><h3 id="func-collectionView-collectionView-UICollectionView-layout-collectionViewLayout-UICollectionViewLayout-sizeForItemAt-indexPath-IndexPath-gt-CGSize"><a href="#func-collectionView-collectionView-UICollectionView-layout-collectionViewLayout-UICollectionViewLayout-sizeForItemAt-indexPath-IndexPath-gt-CGSize" class="headerlink" title="func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize { }"></a>func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize { }</h3><p>要求处理collectionView的delegate给每个collectionView设置指定的layOut,比如说大小等。</p><blockquote><p>Asks the delegate for the size of the specified item’s cell.</p></blockquote><p>如果你不使用本方法来定义,则collectionView就会使用默认的itemSize,那么如何改变默认尺寸的值呢,应该是在storyBoard中设置<code>Collection View</code>、<code>cell</code>的尺寸以及<code>Collection View Flow Layout</code>的具体数值。<br>见图:<br><img src="/Images/CollectionViewFlowLayout.png" alt="CollectionViewFlowLayout"><br>在代码中查看itemSize的办法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout <span class="operator">=</span> collectionView.collectionViewLayout <span class="keyword">as?</span> <span class="type">UICollectionViewFlowLayout</span></span><br><span class="line">layout<span class="operator">?</span>.itemSize <span class="operator">=</span> <span class="type">CGSize</span>(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line"><span class="built_in">print</span>(layout<span class="operator">?</span>.itemSize)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Optional((200.0, 200.0))</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这样的话,能够查看了,虽然上述代码也改变了<code>itemSize</code>的值,但却发现没有效果。是不是一定要用到下面<code>collectionView</code>的<code>sizeForItemAt</code>方法来实时变更<code>itemSize</code>的值？</p><p>看一下某个例子中的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">GameViewController</span>: <span class="title class_">UICollectionViewDelegateFlowLayout</span> &#123;</span><br><span class="line">    <span class="comment">// 必须要让实现UICollectionViewController协议的类再遵循UICollectionViewDelegateFlowLayout协议,不然会无效!!!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">collectionView</span>(<span class="keyword">_</span> <span class="params">collectionView</span>: <span class="type">UICollectionView</span>, <span class="params">layout</span> <span class="params">collectionViewLayout</span>: <span class="type">UICollectionViewLayout</span>, <span class="params">sizeForItemAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>) -&gt; <span class="type">CGSize</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> currentCardSizeValid &#123;</span><br><span class="line">            <span class="keyword">return</span> currentCardSize</span><br><span class="line">        &#125;</span><br><span class="line">        currentCardSize <span class="operator">=</span> cardSize.getCardSize(collectionView: collectionView)</span><br><span class="line">        currentCardSizeValid <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> currentCardSize</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面方法中,cardSize.getCardSize方法是自定义的用来计算尺寸的方法,此外,还多了一个flag就是currentCardSizeValid,为何要设置这个,因为多少个cell,就会计算多少次尺寸,为了节约资源,毕竟每个cell应该都是一样大小的(应该会有例外的情况),这时候只要沿用而不是重复计算才是最好的。</p><p><code>cardSize.getCardSize(collectionView: collectionView)</code>的具体代码实现见下面。</p><h4 id="如何更好地计算collectionCell的图片的合适大小"><a href="#如何更好地计算collectionCell的图片的合适大小" class="headerlink" title="如何更好地计算collectionCell的图片的合适大小"></a>如何更好地计算collectionCell的图片的合适大小</h4><p>场景是:<br>比如给到图片的大小(这就能算到图片的比例),又给到3<em>4的排放顺序(4</em>3也是可以的,需要计算哪个更划算),这时候就需要根据屏幕是横屏还是竖屏,来最终决定图片的实际大小,也就是collectionCell的最终大小。</p><p>具体见文件 <code>CardSize.swift</code>,以及如何分配横竖排的关系的文件<code>Grids.swift</code>和<code>Grid.swift</code>。</p><h1 id="UIImagePickerController"><a href="#UIImagePickerController" class="headerlink" title="UIImagePickerController"></a>UIImagePickerController</h1><p>This new class is designed to let users select an image from their camera to import into an app. When you first create a UIImagePickerController, iOS will automatically ask the user whether the app can access their photos.</p><p>注意:使用UIImagePickerController不需要取得用户的同意,因为它是整个被UIKit掌控的,iOS知道我们不会去滥用它,所以不需要取得用户的许可。</p><h2 id="privacy-permission"><a href="#privacy-permission" class="headerlink" title="privacy permission"></a>privacy permission</h2><p>查看、使用用户的照片,需要对用户进行告知:<br>we need to add a text string describing our intent. So, open Info.plist, select any item, click +, then choose the key name “Privacy - Photo Library Additions Usage Description”. Give it the value “We need to import photos” then press return.</p><h2 id="一般示例代码"><a href="#一般示例代码" class="headerlink" title="一般示例代码"></a>一般示例代码</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先由一个按钮引出</span></span><br><span class="line">navigationItem.leftBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .add, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(addNewPerson))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引出方法</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">addNewPerson</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIImagePickerController</span>()</span><br><span class="line">    picker.allowsEditing <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 由于这行代码,需要本身的class必须遵循到UIImagePickerControllerDelegate protocol,</span></span><br><span class="line">    <span class="comment">// 而且还要额外遵循 UINavigationControllerDelegate protocol.</span></span><br><span class="line">    picker.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    present(picker, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户选择照片后,会自动运行到一个方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">imagePickerController</span>(<span class="keyword">_</span> <span class="params">picker</span>: <span class="type">UIImagePickerController</span>, <span class="params">didFinishPickingMediaWithInfo</span> <span class="params">info</span>: [<span class="type">UIImagePickerController</span>.<span class="params">InfoKey</span> : <span class="keyword">Any</span>]) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> info[.editedImage] <span class="keyword">as?</span> <span class="type">UIImage</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> imageName <span class="operator">=</span> <span class="type">UUID</span>().uuidString</span><br><span class="line">    <span class="keyword">let</span> imagePath <span class="operator">=</span> getDocumentsDirectory().appendingPathComponent(imageName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> jpegData <span class="operator">=</span> image.jpegData(compressionQuality: <span class="number">0.8</span>) &#123;</span><br><span class="line">        <span class="keyword">try?</span> jpegData.write(to: imagePath)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dismiss(animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getDocumentsDirectory</span>() -&gt; <span class="type">URL</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> paths <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask)</span><br><span class="line">    <span class="keyword">return</span> paths[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中,info参数是一个dict,它有两个参数,分别是 <strong>.editedImage</strong> (the image that was edited) or <strong>.originalImage</strong> , but in our case it should only ever be the former unless you change the allowsEditing property.</p><h2 id="UIImagePickerController实例的-sourceType"><a href="#UIImagePickerController实例的-sourceType" class="headerlink" title="UIImagePickerController实例的.sourceType"></a>UIImagePickerController实例的.sourceType</h2><p><code>.sourceType</code> 可取值 <code>UIImagePickerController.camera</code>, 表示从camera中拍照并取得照片。<br>但前提还得去判断是否开放该功能:<code>UIImagePickerController.isSourceTypeAvailable(.camera)</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先判断用户是不是允许从camera中拍摄并取得照片</span></span><br><span class="line"><span class="keyword">if</span> <span class="type">UIImagePickerController</span>.isSourceTypeAvailable(.camera) &#123;</span><br><span class="line">    <span class="comment">// 省略用户选择从camera拍摄并取得照片的部分代码</span></span><br><span class="line">    <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIImagePickerController</span>()</span><br><span class="line">    picker.allowsEditing <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    picker.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    picker.sourceType <span class="operator">=</span> .camera</span><br><span class="line">    present(picker, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的实现代码可供参考:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viewDidLoad()中的代码</span></span><br><span class="line">addPersonButton <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .add, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(addNewPerson))</span><br><span class="line">navigationItem.leftBarButton <span class="operator">=</span> addPerButton</span><br><span class="line"></span><br><span class="line"><span class="comment">// addNewPerson方法</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">addNewPerson</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">UIImagePickerController</span>.isSourceTypeAvailable(.camera) &#123;</span><br><span class="line">        <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Source&quot;</span>, message: <span class="literal">nil</span>, preferredStyle: .actionSheet)</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Photos&quot;</span>, style: .default, handler: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.showPicker(fromCamera: <span class="literal">false</span>)</span><br><span class="line">        &#125;))</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Camera&quot;</span>, style: .default, handler: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.showPicker(fromCamera: <span class="literal">true</span>)</span><br><span class="line">        &#125;))</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Cancel&quot;</span>, style: .cancel))</span><br><span class="line">        ac.popoverPresentationController<span class="operator">?</span>.barButtonItem <span class="operator">=</span> navigationItem.leftBarButtonItem</span><br><span class="line">        </span><br><span class="line">        present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        showPicker(fromCamera: <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// showPicker方法</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">showPicker</span>(<span class="params">fromCamera</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIImagePickerController</span>()</span><br><span class="line">    picker.allowsEditing <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    picker.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    <span class="keyword">if</span> fromCamera &#123;</span><br><span class="line">        picker.sourceType <span class="operator">=</span> .camera</span><br><span class="line">    &#125;</span><br><span class="line">    present(picker, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpriteKit"><a href="#SpriteKit" class="headerlink" title="SpriteKit"></a>SpriteKit</h1><p>(According to the project 11 from “100 hundred days of Swift”)</p><p>Create a new project in xCode and choose Game, sets its Game Technology to be Spritekit.</p><h2 id="坐标系统的不同"><a href="#坐标系统的不同" class="headerlink" title="坐标系统的不同"></a>坐标系统的不同</h2><p>1.UIKit的物体坐标都是基于一个view的左上角为起点的,而SpriteKit是基于物体的中心点。<br>2.UIKit的坐标系Y:0是基于屏幕的上边沿,而SpriteKit是基于屏幕的下边沿。</p><h2 id="GameScene-sks-是类似于Interface-Builder的"><a href="#GameScene-sks-是类似于Interface-Builder的" class="headerlink" title="GameScene.sks 是类似于Interface Builder的"></a>GameScene.sks 是类似于Interface Builder的</h2><p>双击打开GameScene.sks,就打开了Scene Editor,这图形界面类似于Interface Builder。</p><h2 id="SKScene"><a href="#SKScene" class="headerlink" title="SKScene"></a>SKScene</h2><p>当建立一个project是基于Game的，那么GameScene.swift文件的GameScene这个class就是基于SKScene协议的。</p><h2 id="didMove-to-类似于viewDidLoad"><a href="#didMove-to-类似于viewDidLoad" class="headerlink" title="didMove(to:) 类似于viewDidLoad()"></a>didMove(to:) 类似于viewDidLoad()</h2><p>在里面写入代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didMove</span>(<span class="params">to</span> <span class="params">view</span>: <span class="type">SKView</span>) &#123;</span><br><span class="line">    <span class="comment">// 建立一个背景图片的节点</span></span><br><span class="line">    <span class="keyword">let</span> background <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;background.jpg&quot;</span>)</span><br><span class="line">    <span class="comment">// 图片的中心点是基于CGPoint坐标的,这里设置的是屏幕的中心点</span></span><br><span class="line">    background.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">512</span>, y: <span class="number">384</span>)</span><br><span class="line">    <span class="comment">// The .replace option means &quot;just draw it, ignoring any alpha values,&quot; which makes it fast for things without gaps such as our background.</span></span><br><span class="line">    background.blendMode <span class="operator">=</span> .replace</span><br><span class="line">    <span class="comment">// 这个背景图片的节点在整个场景的z坐标的-1位置,其实就是放在最后面</span></span><br><span class="line">    background.zPosition <span class="operator">=</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">    <span class="comment">// 这是用于给场景添加节点的方法</span></span><br><span class="line">    addChild(background)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="override-func-didMove-to-view-SKView"><a href="#override-func-didMove-to-view-SKView" class="headerlink" title="override func didMove(to view: SKView) { }"></a>override func didMove(to view: SKView) { }</h2><p>这个类似于viewDidLoad方法。</p><h2 id="override-func-update-currentTime-TimeInterval"><a href="#override-func-update-currentTime-TimeInterval" class="headerlink" title="override func update(_ currentTime: TimeInterval) { }"></a>override func update(_ currentTime: TimeInterval) { }</h2><p>The update() method is called once every frame, and lets us make changes to our game.<br>Try not to do too much work, because it can slow your game down.</p><h2 id="override-func-touchesBegan-touches-Set-with-event-UIEvent"><a href="#override-func-touchesBegan-touches-Set-with-event-UIEvent" class="headerlink" title="override func touchesBegan(_ touches: Set, with event: UIEvent?) { }"></a>override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) { }</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次触碰到屏幕就会进入循环</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">        <span class="comment">// 取得触碰的位置坐标</span></span><br><span class="line">        <span class="keyword">let</span> location <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">        <span class="comment">// 生成一个SKSpriteNode节点,该节点是基于CGSize生成的一个红色正方形</span></span><br><span class="line">        <span class="keyword">let</span> box <span class="operator">=</span> <span class="type">SKSpriteNode</span>(color: <span class="type">UIColor</span>.red, size: <span class="type">CGSize</span>(width: <span class="number">64</span>, height: <span class="number">64</span>))</span><br><span class="line">        <span class="comment">// 该正方形所放置的位置</span></span><br><span class="line">        box.position <span class="operator">=</span> location</span><br><span class="line">        <span class="comment">// 添加进场景</span></span><br><span class="line">        addChild(box)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="override-func-touchesEnded-touches-Set-with-event-UIEvent"><a href="#override-func-touchesEnded-touches-Set-with-event-UIEvent" class="headerlink" title="override func touchesEnded(_ touches: Set, with event: UIEvent?) {}"></a>override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {}</h2><p>Tells the responder when one or more fingers raised from a view or window.</p><h2 id="override-func-touchesMoved-touches-Set-with-event-UIEvent"><a href="#override-func-touchesMoved-touches-Set-with-event-UIEvent" class="headerlink" title="override func touchesMoved(_ touches: Set, with event: UIEvent?) { }"></a>override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) { }</h2><p>测试下来,跟touchesBegan一样的用法,只是它只在触摸屏幕并移动时,才会被触发。<br>touchesMoved() is called when an existing touch changes position.</p><h2 id="SKSpriteNode-类似于各个主页面的节点"><a href="#SKSpriteNode-类似于各个主页面的节点" class="headerlink" title="SKSpriteNode 类似于各个主页面的节点"></a>SKSpriteNode 类似于各个主页面的节点</h2><p>建立一个正方形:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SKSpriteNode</span>(color: <span class="type">UIColor</span>.red, size: <span class="type">CGSize</span>(width: <span class="number">64</span>, height: <span class="number">64</span>))</span><br></pre></td></tr></table></figure><p>建立一个基于image文件的图形:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SKSpriteNode</span>(imageNamed:)</span><br></pre></td></tr></table></figure><p>好像不能直接建立一个圆形,是不是先要做一个圆形出来,随后再基于该圆形设计出该SKSpriteNode?<br>待后续碰到了再补充吧…<br>但下面代码中ball.physicsBody &#x3D; SKPhysicsBody(circleOfRadius: ball.size.width &#x2F; 2.0)就可以设计出一个圆形的物理属性来。</p><h3 id="SKSpriteNode-texture-gt-SKTexture-imageNamed"><a href="#SKSpriteNode-texture-gt-SKTexture-imageNamed" class="headerlink" title="SKSpriteNode.texture -&gt; SKTexture(imageNamed:)"></a>SKSpriteNode.texture -&gt; SKTexture(imageNamed:)</h3><p>class called SKTexture, which is to SKSpriteNode sort of what UIImage is to UIImageView – it holds image data, but isn’t responsible for showing it.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前设定的charNode是一个SKSpriteNode,显示的是图片&quot;penguinGood&quot;</span></span><br><span class="line">charNode <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;penguinGood&quot;</span>)</span><br><span class="line"><span class="comment">// 但现在我想把charNode显示的图片改成是&quot;penguinEvil&quot;</span></span><br><span class="line"><span class="comment">// 这时只要更改charNode的材质,即charNode.texture</span></span><br><span class="line"><span class="comment">// open class SKSpriteNode : SKNode, SKWarpable &#123;</span></span><br><span class="line"><span class="comment">//      open var texture: SKTexture?</span></span><br><span class="line">charNode.texture <span class="operator">=</span> <span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;penguinEvil&quot;</span>)</span><br></pre></td></tr></table></figure><p>Changing the character node’s texture like this is helpful because it means we don’t need to keep adding and removing nodes. Instead, we can just change the texture to match what kind of penguin this is, then change the node name to match so we can do tap detection later on.</p><h3 id="SKSpriteNode-texture"><a href="#SKSpriteNode-texture" class="headerlink" title="SKSpriteNode(texture:)"></a>SKSpriteNode(texture:)</h3><p>可以直接用SKTexture生成SKSpriteNode,而不需要再设置SKSpriteNode的texture:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先设置SKTexture</span></span><br><span class="line"><span class="keyword">let</span> skyTexture <span class="operator">=</span> <span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;sky&quot;</span>)</span><br><span class="line"><span class="comment">// 再生成SKSpriteNode</span></span><br><span class="line"><span class="keyword">let</span> sprite <span class="operator">=</span> <span class="type">SKSpriteNode</span>(texture: skyTexture)</span><br></pre></td></tr></table></figure><h3 id="SKSpriteNode-colorBlendFactor-x3D-1-amp-amp-SkSpriteNode-color-x3D-red"><a href="#SKSpriteNode-colorBlendFactor-x3D-1-amp-amp-SkSpriteNode-color-x3D-red" class="headerlink" title="SKSpriteNode.colorBlendFactor &#x3D; 1 &amp;&amp; SkSpriteNode.color &#x3D; .red"></a>SKSpriteNode.colorBlendFactor &#x3D; 1 &amp;&amp; SkSpriteNode.color &#x3D; .red</h3><p>Only SKSpriteNode has a colorBlendFactor property !!!<br>SKSpriteNode.colorBlendFactor是一个CGFloat,从0.0到1.0,代表与原材质的颜色的混同程序,0.0代表颜色不会改变,就是原材质,1.0代表可以完全改变原材质的颜色。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firework <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;rocket&quot;</span>)</span><br><span class="line">firework.colorBlendFactor <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">// 这时可以设置其的颜色</span></span><br><span class="line">fireworl.color <span class="operator">=</span> .cyan</span><br></pre></td></tr></table></figure><h2 id="SKShapeNode"><a href="#SKShapeNode" class="headerlink" title="SKShapeNode"></a>SKShapeNode</h2><p>SKShapeNode是SpriteKit的一个class,它可以让你在Game中方便且快捷地画出随意的图形,比如画圆形、线、长方形,之前接触到的就是使用贝塞尔图形来画画,在Project23中,水果忍者游戏中用来切水果划屏幕的那条线,它的容器就是SKShapeNode。</p><p>SKShapeNode有一个属性叫path,是用来描绘我们想要画的图形的。当path为nil,就什么都不画了;当path被设置为一个有效的路径的话,就可以按照SKShapeNode的设置来画图形了。<br>另外,SKShapeNode期望的path是一个CGPath属性,而我们使用UIBezierPath.cgPath就能够符合这一要求了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shape <span class="operator">=</span> <span class="type">SKShapeNode</span>()</span><br><span class="line">shape.path <span class="operator">=</span> <span class="type">UIBezierPath</span>(roundedRect: <span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">128</span>, y: <span class="operator">-</span><span class="number">128</span>, width: <span class="number">256</span>, height: <span class="number">256</span>), cornerRadius: <span class="number">64</span>).cgPath</span><br><span class="line">shape.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: frame.midX, y: frame.midY)</span><br><span class="line">shape.fillColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">shape.strokeColor <span class="operator">=</span> <span class="type">UIColor</span>.blue</span><br><span class="line">shape.lineWidth <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">addChild(shape)</span><br></pre></td></tr></table></figure><h3 id="水果忍者中那条划过屏幕的线"><a href="#水果忍者中那条划过屏幕的线" class="headerlink" title="水果忍者中那条划过屏幕的线"></a>水果忍者中那条划过屏幕的线</h3><p>代码太多,还是看教程中的代码,读一遍就懂了。</p><blockquote><p><a href="https://www.hackingwithswift.com/example-code/games/how-to-create-shapes-using-skshapenode">https://www.hackingwithswift.com/example-code/games/how-to-create-shapes-using-skshapenode</a></p></blockquote><h2 id="SKPhysicsBody属性"><a href="#SKPhysicsBody属性" class="headerlink" title="SKPhysicsBody属性"></a>SKPhysicsBody属性</h2><p>感觉是给 场景 或 节点 添加物理属性范围的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// box虽然有两个框架,就是上面设置的正方形</span></span><br><span class="line"><span class="comment">// 但还得给这个box设置一个物理框架,范围就是这个正方形的范围(也就是说也能设置个圆形物理框架吧吧)</span></span><br><span class="line">box.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(rectangleOf: <span class="type">CGSize</span>(width: <span class="number">64</span>, height: <span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// The second line of code adds a physics body to the whole scene that is a line on each edge, effectively acting like a container for the scene.</span></span><br><span class="line">physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(edgeLoopFrom: frame)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还能添加圆形的球以及圆形的物理属性范围,<br>以及使用到 <strong>.resitution</strong> 的反弹属性,值范围为0-1的小数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ball <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;ballRed&quot;</span>)</span><br><span class="line"><span class="comment">// ball的物理属性范围仍旧是其本身</span></span><br><span class="line">ball.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(circleOfRadius: ball.size.width <span class="operator">/</span> <span class="number">2.0</span>)</span><br><span class="line"><span class="comment">// restitution是 恢复原状 的意思</span></span><br><span class="line">ball.physicsBody<span class="operator">?</span>.restitution <span class="operator">=</span> <span class="number">0.4</span></span><br><span class="line">ball.position <span class="operator">=</span> location</span><br><span class="line">addChild(ball)</span><br></pre></td></tr></table></figure><p>设计一个有物理属性但不会跟着动的东西,简单说就是,我造了个东西,这东西被撞了却不会动,但撞它的其他东西会被弹开:<br>这里使用到了 <strong>.isDynamic</strong> :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bouncer <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;bouncer&quot;</span>)</span><br><span class="line">bouncer.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">512</span>, y: <span class="number">0</span>)</span><br><span class="line">bouncer.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(circleOfRadius: bouncer.size.width <span class="operator">/</span> <span class="number">2.0</span>)</span><br><span class="line">bouncer.physicsBody<span class="operator">?</span>.isDynamic <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">addChild(bouncer)</span><br></pre></td></tr></table></figure><h3 id="SKPhysicsBody-texture-lt-T-SKTexture-gt-size-lt-T-CGSize-gt"><a href="#SKPhysicsBody-texture-lt-T-SKTexture-gt-size-lt-T-CGSize-gt" class="headerlink" title="SKPhysicsBody(texture: &lt;#T##SKTexture#&gt;, size: &lt;#T##CGSize#&gt;)"></a>SKPhysicsBody(texture: &lt;#T##SKTexture#&gt;, size: &lt;#T##CGSize#&gt;)</h3><p>之前都是SKPhysicsBody(circleOfRadius),或者SKPhysicsBody(rectangleOf: &lt;#T##CGSize#&gt;)来定义,虽然对生成SKPhysicsBody的效率会有很大的提高,但有时候需要让该物体的每个pixel都作为SKPhysicsBody的时候,就需要用到SKPhysicsBody(texture: &lt;#T##SKTexture#&gt;, size: &lt;#T##CGSize#&gt;),虽然会降低效率,但有时是有必要的。<br>SpriteKit can create pixel-perfect collision detection by examining the pixels in a sprite’s texture.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let sprite = SKSpriteNode(imageNamed: &quot;enemy&quot;)</span></span><br><span class="line"></span><br><span class="line">sprite.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(texture: sprite.texture<span class="operator">!</span>, size: sprite.size)</span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-categoryBitMask属性"><a href="#节点的physicsBody-categoryBitMask属性" class="headerlink" title="节点的physicsBody?.categoryBitMask属性"></a>节点的physicsBody?.categoryBitMask属性</h3><p>碰撞的时候,需要识别碰撞体,最简单的方式,是给节点设置一个name的值,但也可以给节点的physicsBody?.categoryBitMask添加值,这里的bit可以理解为是位运算的意思。<br>注意：UInt8,UInt16,UInt32,UInt64 分别表示 8 位,16 位,32 位 和 64 位的无符号整数形式。<br>比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置物理体的标示符  &lt;&lt;左移运算符  左移一位，相当于扩大2倍</span></span><br><span class="line"><span class="keyword">let</span> birdCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">0</span>  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> worldCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>  <span class="comment">//2</span></span><br><span class="line"><span class="keyword">let</span> pipeCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>  <span class="comment">//4</span></span><br><span class="line"><span class="keyword">let</span> scoreCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">3</span>  <span class="comment">//8</span></span><br></pre></td></tr></table></figure><p>具体的例子见 ontactTestBitMask &amp;&amp; collisionBitMask 知识点。(会带上上面的四个标识符一起使用)</p><h3 id="节点的physicsBody-的velocity速度属性"><a href="#节点的physicsBody-的velocity速度属性" class="headerlink" title="节点的physicsBody?的velocity速度属性"></a>节点的physicsBody?的velocity速度属性</h3><p>可设置该节点的速度,比如在touchesBegan方法中,当用户点击屏幕,就对速度进行更改:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本来因为重力等原因dy是负值,用户点击的同时,值为0</span></span><br><span class="line">    bird.physicsBody<span class="operator">?</span>.velocity <span class="operator">=</span> <span class="type">CGVector</span>(dx: <span class="number">0</span>, dy: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 但一旦停止点击,dy的值又会变成负值,小鸟又会不断下降,这是因为</span></span><br><span class="line">    <span class="comment">// self.physicsWorld.gravity = CGVector(dx: 0.0, dy: -3.0) 这个的预先设定</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此时可以给其一个向上的速度或是力</span></span><br><span class="line">    bird.physicsBody<span class="operator">?</span>.applyImpulse(<span class="type">CGVector</span>(dx: <span class="number">0</span>, dy: <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-的applyImpulse方法"><a href="#节点的physicsBody-的applyImpulse方法" class="headerlink" title="节点的physicsBody?的applyImpulse方法"></a>节点的physicsBody?的applyImpulse方法</h3><p>在 “节点的physicsBody?的velocity速度属性”知识点的例子中已经出现。</p><p>这里还有一个例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给香蕉一个自转速度和顺时针方向</span></span><br><span class="line">banana.physicsBody<span class="operator">?</span>.angularVelocity <span class="operator">=</span> <span class="operator">-</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前给用户两个slider以设置角度(后换算成radians)和速度(speed),</span></span><br><span class="line"><span class="keyword">let</span> impulse <span class="operator">=</span> <span class="type">CGVector</span>(dx: cos(radians) <span class="operator">*</span> speed, dy: sin(radians) <span class="operator">*</span> speed)</span><br><span class="line">banana.physicsBody<span class="operator">?</span>.applyImpulse(impulse)</span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-的angularVelocity属性"><a href="#节点的physicsBody-的angularVelocity属性" class="headerlink" title="节点的physicsBody?的angularVelocity属性"></a>节点的physicsBody?的angularVelocity属性</h3><p>angularVelocity 是指自身旋转的速度。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sprite.physicsBody = SKPhysicsBody(texture: sprite.texture!, size: sprite.size)</span></span><br><span class="line"></span><br><span class="line">sprite.physicsBody<span class="operator">?</span>.angularVelocity <span class="operator">=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-的angularDamping属性"><a href="#节点的physicsBody-的angularDamping属性" class="headerlink" title="节点的physicsBody?的angularDamping属性"></a>节点的physicsBody?的angularDamping属性</h3><p>angularDamping 是指减少自身旋转的速度。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sprite.physicsBody = SKPhysicsBody(texture: sprite.texture!, size: sprite.size)</span></span><br><span class="line"><span class="comment">// sprite.physicsBody?.angularVelocity = 5</span></span><br><span class="line"></span><br><span class="line">sprite.physicsBody<span class="operator">?</span>.angularDamping <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-的linearDamping属性"><a href="#节点的physicsBody-的linearDamping属性" class="headerlink" title="节点的physicsBody?的linearDamping属性"></a>节点的physicsBody?的linearDamping属性</h3><p>linearDampin 是指减少linear上的移动速度。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sprite.physicsBody = SKPhysicsBody(texture: sprite.texture!, size: sprite.size)</span></span><br><span class="line"><span class="comment">// sprite.physicsBody?.velocity = CGVector(dx: -500, dy: 0)</span></span><br><span class="line"></span><br><span class="line">sprite.physicsBody<span class="operator">?</span>.linearDamping <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="节点的physicsBody-的usesPreciseCollisionDetection属性"><a href="#节点的physicsBody-的usesPreciseCollisionDetection属性" class="headerlink" title="节点的physicsBody?的usesPreciseCollisionDetection属性"></a>节点的physicsBody?的usesPreciseCollisionDetection属性</h3><p>注意:Precise collision detection should be used rarely, and only generally with small, fast-moving objects.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">banana <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;banana&quot;</span>)</span><br><span class="line">banana.name <span class="operator">=</span> <span class="string">&quot;banana&quot;</span></span><br><span class="line">banana.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(circleOfRadius: banana.size.width <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">banana.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> <span class="type">CollisionTypes</span>.banana.rawValue</span><br><span class="line">banana.physicsBody<span class="operator">?</span>.collisionBitMask <span class="operator">=</span> <span class="type">CollisionTypes</span>.building.rawValue <span class="operator">|</span> <span class="type">CollisionTypes</span>.player.rawValue</span><br><span class="line">banana.physicsBody<span class="operator">?</span>.contactTestBitMask <span class="operator">=</span> <span class="type">CollisionTypes</span>.building.rawValue <span class="operator">|</span> <span class="type">CollisionTypes</span>.player.rawValue</span><br><span class="line">banana.physicsBody<span class="operator">?</span>.usesPreciseCollisionDetection <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">addChild(banana)</span><br></pre></td></tr></table></figure><p>示例游戏中,旋转的香蕉会撞向大楼,具体撞击的点会把大楼轰出一个半圆出来,这时候使用<code>usesPreciseCollisionDetection</code>属性,感觉是让返回的撞击点更加精确。</p><h2 id="SKScene的physicsWorld属性"><a href="#SKScene的physicsWorld属性" class="headerlink" title="SKScene的physicsWorld属性"></a>SKScene的physicsWorld属性</h2><h3 id="SKScene的physicsWorld-gravity–重力属性"><a href="#SKScene的physicsWorld-gravity–重力属性" class="headerlink" title="SKScene的physicsWorld.gravity–重力属性"></a>SKScene的physicsWorld.gravity–重力属性</h3><p>其实感觉不能叫重力属性,因为你可以设置成各个方向都有引力。<br>self.physicsWorld.gravity是CGVector数据类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.physicsWorld.gravity <span class="operator">=</span> <span class="type">CGVector</span>(dx: <span class="number">0.0</span>, dy: <span class="operator">-</span><span class="number">3.0</span>)</span><br></pre></td></tr></table></figure><p>以上代码,代表x方向没有正引力也没有负引力,y方向有3个负引力。</p><h3 id="SKScene的physicsWorld-contactDelegate-代理"><a href="#SKScene的physicsWorld-contactDelegate-代理" class="headerlink" title="SKScene的physicsWorld.contactDelegate 代理"></a>SKScene的physicsWorld.contactDelegate 代理</h3><p>物理世界的碰撞检测代理一般都设置为场景自己:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.physicsWorld.contactDelegate <span class="operator">=</span> <span class="keyword">self</span></span><br></pre></td></tr></table></figure><p>此时场景需要遵循 SKPhysicsContactDelegate 的代理协议。</p><h2 id="SKAction"><a href="#SKAction" class="headerlink" title="SKAction"></a>SKAction</h2><h3 id="SKAction-setTexture"><a href="#SKAction-setTexture" class="headerlink" title="SKAction.setTexture()"></a>SKAction.setTexture()</h3><p>给予SKNode一个新的Texture,目的是为了在SKAction.sequence中有一个动画效果。<br>例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">banana.physicsBody<span class="operator">?</span>.angularVelocity <span class="operator">=</span> <span class="operator">-</span><span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// player1 = SKSpriteNode(imageNamed: &quot;player&quot;)</span></span><br><span class="line"><span class="keyword">let</span> raiseArm <span class="operator">=</span> <span class="type">SKAction</span>.setTexture(<span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;player1Throw&quot;</span>))</span><br><span class="line"><span class="keyword">let</span> lowerArm <span class="operator">=</span> <span class="type">SKAction</span>.setTexture(<span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;player&quot;</span>))</span><br><span class="line"><span class="keyword">let</span> pause <span class="operator">=</span> <span class="type">SKAction</span>.wait(forDuration: <span class="number">0.15</span>)</span><br><span class="line"><span class="keyword">let</span> sequence <span class="operator">=</span> <span class="type">SKAction</span>.sequence([raiseArm, pause, lowerArm])</span><br><span class="line">player1.run(sequence)</span><br></pre></td></tr></table></figure><p><img src="/Images/dropBanana.gif" alt="dropBanana"></p><h3 id="SKAction-rotate"><a href="#SKAction-rotate" class="headerlink" title="SKAction.rotate"></a>SKAction.rotate</h3><p>先加载一个图形:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slotGlow: <span class="type">SKSpriteNode</span> <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;slotGlowGood&quot;</span>)</span><br></pre></td></tr></table></figure><p>是这个样子的:<br><img src="/Images/slotGlowGood@2x.png" alt="slotGlowGood@2x"></p><p>我们要让它沿着中心点始终在转:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何运动:</span></span><br><span class="line"><span class="comment">// 1.旋转 -- rotate</span></span><br><span class="line"><span class="comment">// 2.角度一个pi,即180度</span></span><br><span class="line"><span class="comment">// 3.时间为10秒,就是旋转的快慢</span></span><br><span class="line"><span class="keyword">let</span> spin <span class="operator">=</span> <span class="type">SKAction</span>.rotate(byAngle: .pi, duration: <span class="number">10</span>)</span><br><span class="line"><span class="comment">// 始终在旋转不停止</span></span><br><span class="line"><span class="keyword">let</span> spinForever <span class="operator">=</span> <span class="type">SKAction</span>.repeatForever(spin)</span><br><span class="line"><span class="comment">// 让这个slotGlow运行这个运动模式</span></span><br><span class="line">slotGlow.run(spinForever)</span><br></pre></td></tr></table></figure><h3 id="SKAction-moveBy-x-y-duration"><a href="#SKAction-moveBy-x-y-duration" class="headerlink" title="SKAction.moveBy(x:y:duration:)"></a>SKAction.moveBy(x:y:duration:)</h3><p>移动位置及持续时间。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// charNode = SKSpriteNode(imageNamed: &quot;penguinGood&quot;)</span></span><br><span class="line"><span class="comment">// charNode已可在主画面显示</span></span><br><span class="line">charNode.run(<span class="type">SKAction</span>.moveBy(x: <span class="number">0</span>, y: <span class="number">80</span>, duration: <span class="number">0.05</span>))</span><br></pre></td></tr></table></figure><h3 id="SKAction-wait-forDuration"><a href="#SKAction-wait-forDuration" class="headerlink" title="SKAction.wait(forDuration:)"></a>SKAction.wait(forDuration:)</h3><p>等待。以秒计算。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> delay <span class="operator">=</span> <span class="type">SKAction</span>.wait(forDuration: <span class="number">0.25</span>)</span><br></pre></td></tr></table></figure><h3 id="SKAction-animate-with-lt-T-SKTexture-gt-timePerFrame-lt-T-TimeInterval-gt"><a href="#SKAction-animate-with-lt-T-SKTexture-gt-timePerFrame-lt-T-TimeInterval-gt" class="headerlink" title="SKAction.animate(with: &lt;#T##[SKTexture]#&gt;, timePerFrame: &lt;#T##TimeInterval#&gt;)"></a>SKAction.animate(with: &lt;#T##[SKTexture]#&gt;, timePerFrame: &lt;#T##TimeInterval#&gt;)</h3><p>比如做一个小鸟飞翔的动画,可以拿到的小鸟的照片分别是bird-01&#x2F;bird-02&#x2F;bird-03,图像分别是:<br><img src="/Images/bird-01.png" alt="bird-01"><img src="/Images/bird-02.png" alt="bird-02"><img src="/Images/bird-03.png" alt="bird-03"><br>代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bird = SKSpriteNode(imageNamed: &quot;bird-01&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> birdTexture1 <span class="operator">=</span> <span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;bird-01&quot;</span>)</span><br><span class="line">birdTexture1.filteringMode <span class="operator">=</span> .nearest</span><br><span class="line"><span class="keyword">let</span> birdTexture2 <span class="operator">=</span> <span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;bird-02&quot;</span>)</span><br><span class="line">birdTexture2.filteringMode <span class="operator">=</span> .nearest</span><br><span class="line"><span class="keyword">let</span> birdTexture3 <span class="operator">=</span> <span class="type">SKTexture</span>(imageNamed: <span class="string">&quot;bird-03&quot;</span>)</span><br><span class="line">birdTexture3.filteringMode <span class="operator">=</span> .nearest</span><br><span class="line"><span class="keyword">let</span> anim <span class="operator">=</span> <span class="type">SKAction</span>.animate(with: [birdTexture1,birdTexture2,birdTexture3], timePerFrame: <span class="number">0.2</span>)</span><br><span class="line">bird.run(<span class="type">SKAction</span>.repeatForever(anim), withKey: <span class="string">&quot;fly&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SKAction-run-block"><a href="#SKAction-run-block" class="headerlink" title="SKAction.run(block:)"></a>SKAction.run(block:)</h3><p>SKAction.run(block:) will run any code we want, provided as a closure. “Block” is Objective-C’s name for a Swift closure.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notVisible <span class="operator">=</span> <span class="type">SKAction</span>.run &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span> <span class="keyword">self</span>.isVisible <span class="operator">=</span> <span class="literal">false</span> &#125;</span><br></pre></td></tr></table></figure><p>为何要用SKAction.run来执行这段代码,而不是直接去执行呢?<br>感觉是因为类似下面的SKAction.sequence()需要依序执行action和改变一些属性的情况。</p><h3 id="SKSpriteNode-run-lt-T-action-SKAction-SKAction-gt-withKey-lt-T-String-gt"><a href="#SKSpriteNode-run-lt-T-action-SKAction-SKAction-gt-withKey-lt-T-String-gt" class="headerlink" title="SKSpriteNode.run(&lt;#T##action: SKAction##SKAction#&gt;, withKey: &lt;#T##String#&gt;)"></a>SKSpriteNode.run(&lt;#T##action: SKAction##SKAction#&gt;, withKey: &lt;#T##String#&gt;)</h3><p>这里出现一个withKey参数,可以这么设置:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bird.run(<span class="type">SKAction</span>.repeatForever(anim), withKey: <span class="string">&quot;fly&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果要停止这个动画,就可以使用到:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bird.removeAction(forKey: <span class="string">&quot;fly&quot;</span>)</span><br></pre></td></tr></table></figure><p>还有一个让SKLabelNode显示的文字瞬间变大又还原的案例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoreLabelNode.run(<span class="type">SKAction</span>.sequence([<span class="type">SKAction</span>.scale(to: <span class="number">1.5</span>, duration: <span class="type">TimeInterval</span>(<span class="number">0.1</span>)), <span class="type">SKAction</span>.scale(to: <span class="number">1.0</span>, duration: <span class="type">TimeInterval</span>(<span class="number">0.1</span>))]))</span><br></pre></td></tr></table></figure><p><img src="/Images/SKLabelNodeScale.gif" alt="SKLabelNodeScale"></p><h3 id="SKSpriteNode-removeAction-forKey-lt-T-String-gt"><a href="#SKSpriteNode-removeAction-forKey-lt-T-String-gt" class="headerlink" title="SKSpriteNode.removeAction(forKey: &lt;#T##String#&gt;)"></a>SKSpriteNode.removeAction(forKey: &lt;#T##String#&gt;)</h3><p>紧接着上面的例子,用法是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bird.removeAction(forKey: <span class="string">&quot;fly&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="SKAction-sequence"><a href="#SKAction-sequence" class="headerlink" title="SKAction.sequence()"></a>SKAction.sequence()</h3><p>SKAction.sequence() takes an array of actions, and executes them in order. Each action won’t start executing until the previous one finished.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">hit</span>() &#123;</span><br><span class="line">    isHit <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> delay <span class="operator">=</span> <span class="type">SKAction</span>.wait(forDuration: <span class="number">0.25</span>)</span><br><span class="line">    <span class="keyword">let</span> hide <span class="operator">=</span> <span class="type">SKAction</span>.moveBy(x: <span class="number">0</span>, y: <span class="operator">-</span><span class="number">80</span>, duration: <span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">let</span> notVisible <span class="operator">=</span> <span class="type">SKAction</span>.run &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span> <span class="keyword">self</span>.isVisible <span class="operator">=</span> <span class="literal">false</span> &#125;</span><br><span class="line">    charNode.run(<span class="type">SKAction</span>.sequence([delay, hide, notVisible]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SKAction-group"><a href="#SKAction-group" class="headerlink" title="SKAction.group()"></a>SKAction.group()</h3><p>An action group specifies that all actions inside it should execute simultaneously.<br>这里要注意的一点是,SKAction.group()内的SKAction,是同时执行的,所以我们平时可以配合SKAction.sequence()一起使用,但要注意两者的明显不同之处。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scaleOut <span class="operator">=</span> <span class="type">SKAction</span>.scale(to: <span class="number">0.001</span>, duration: <span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">let</span> fadeOut <span class="operator">=</span> <span class="type">SKAction</span>.fadeOut(withDuration: <span class="number">0.2</span>)</span><br><span class="line"><span class="keyword">let</span> group <span class="operator">=</span> <span class="type">SKAction</span>.group([scaleOut, fadeOut])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> seq <span class="operator">=</span> <span class="type">SKAction</span>.sequence([group, .removeFromParent()])</span><br><span class="line">node.run(seq)</span><br></pre></td></tr></table></figure><h3 id="背景闪电的案例"><a href="#背景闪电的案例" class="headerlink" title="背景闪电的案例"></a>背景闪电的案例</h3><p>使用到 SKAction.sequence() &#x2F; SKAction.run &#x2F; SKAction.wait &#x2F; SKScene.run<br>效果图:<br><img src="/Images/backgroundcolorFlash.gif" alt="backgroundcolorFlash"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var skyColor = SKColor(red: 81.0/255.0, green: 192.0/255.0, blue: 201.0/255.0, alpha: 1.0)</span></span><br><span class="line"><span class="comment">// self.backgroundColor = skyColor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当系统检测到特定碰撞时,即调用该bgFlash方法:</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">bgFlash</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> bgFlash <span class="operator">=</span> <span class="type">SKAction</span>.run (&#123;</span><br><span class="line">        <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="type">SKColor</span>(red: <span class="number">1</span>, green: <span class="number">0</span>, blue: <span class="number">0</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> bgNormal <span class="operator">=</span> <span class="type">SKAction</span>.run (&#123;</span><br><span class="line">        <span class="keyword">self</span>.backgroundColor <span class="operator">=</span> <span class="keyword">self</span>.skyColor</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> bgFlashAndNormal <span class="operator">=</span> <span class="type">SKAction</span>.sequence([bgFlash, <span class="type">SKAction</span>.wait(forDuration: <span class="type">TimeInterval</span>(<span class="number">0.05</span>)), bgNormal, <span class="type">SKAction</span>.wait(forDuration: <span class="type">TimeInterval</span>(<span class="number">0.05</span>))])</span><br><span class="line">    <span class="keyword">self</span>.run(<span class="type">SKAction</span>.sequence([<span class="type">SKAction</span>.repeat(bgFlashAndNormal, count: <span class="number">4</span>)]), withKey: <span class="string">&quot;flash&quot;</span>)</span><br><span class="line">    <span class="comment">// 加了下面这行代码就没了效果,感觉是异步的原因,</span></span><br><span class="line">    <span class="comment">// 上一行代码还没执行完,下一行就开始执行了,所以无效了。</span></span><br><span class="line">    <span class="comment">// self.removeAction(forKey: &quot;flash&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“Game-Over”-字样从天而降-的案例"><a href="#“Game-Over”-字样从天而降-的案例" class="headerlink" title="“Game Over” 字样从天而降 的案例"></a>“Game Over” 字样从天而降 的案例</h3><p>使用到SKScene的默认Bool属性isUserInteractionEnabled,值为true。</p><p>以下例子是在游戏结束的瞬间:<br>1、玩家不能点击屏幕;<br>2、Game Over 字样从天而降;<br>3、玩家此时才能点击屏幕得到响应。</p><p><img src="/Images/gameover.gif" alt="GameOver"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lazy var gameOverLabel: SKLabelNode = &#123;</span></span><br><span class="line"><span class="comment">//    let label = SKLabelNode(fontNamed: &quot;Chalkduster&quot;)</span></span><br><span class="line"><span class="comment">//    label.text = &quot;Game Over&quot;</span></span><br><span class="line"><span class="comment">//    return label</span></span><br><span class="line"><span class="comment">//&#125;()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SKScene的默认属性isUserInteractionEnabled为true,此时用户是可以随便点击屏幕并有响应的</span></span><br><span class="line">isUserInteractionEnabled <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">addChild(gameOverLabel)</span><br><span class="line">gameOverLabel.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="keyword">self</span>.size.width <span class="operator">*</span> <span class="number">0.5</span>, y: <span class="keyword">self</span>.size.height)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> delay <span class="operator">=</span> <span class="type">SKAction</span>.wait(forDuration: <span class="type">TimeInterval</span>(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">let</span> move <span class="operator">=</span> <span class="type">SKAction</span>.move(by: <span class="type">CGVector</span>(dx: <span class="number">0</span>, dy: <span class="operator">-</span><span class="keyword">self</span>.size.height <span class="operator">*</span> <span class="number">0.5</span>), duration: <span class="number">1</span>)</span><br><span class="line">gameOverLabel.run(<span class="type">SKAction</span>.sequence([delay, move]), completion: &#123;</span><br><span class="line">    <span class="keyword">self</span>.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="SKAction-playSoundFileNamed"><a href="#SKAction-playSoundFileNamed" class="headerlink" title="SKAction.playSoundFileNamed()"></a>SKAction.playSoundFileNamed()</h3><p>SKAction.playSoundFileNamed()是在SKAction中用来播放声音的。</p><p>The three main sound file formats you’ll use are MP3, M4A and CAF, with the latter being a renamed AIFF file. AIFF is a pretty terrible file format when it comes to file size, but it’s much faster to load and use than MP3s and M4As, so you’ll use them often.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run(<span class="type">SKAction</span>.playSoundFileNamed(<span class="string">&quot;whackBad.caf&quot;</span>, waitForCompletion: <span class="literal">false</span>))</span><br></pre></td></tr></table></figure><p>这里是直接run,其实是因为func是在GameScene中,所以可以直接用run。而若你是在其他SKNode中,个人认为是可以使用SKNode.run()的。<br>注意:这里的run不同于SKAction.run(block:)</p><h3 id="SKaction-follow-lt-T-CGPath-gt-asOffset-lt-T-Bool-gt-orientToPath-lt-T-Bool-gt-speed-lt-T-CGFloat-gt"><a href="#SKaction-follow-lt-T-CGPath-gt-asOffset-lt-T-Bool-gt-orientToPath-lt-T-Bool-gt-speed-lt-T-CGFloat-gt" class="headerlink" title="SKaction.follow(&lt;#T##CGPath#&gt;, asOffset: &lt;#T##Bool#&gt;, orientToPath: &lt;#T##Bool#&gt;, speed: &lt;#T##CGFloat#&gt;)"></a>SKaction.follow(&lt;#T##CGPath#&gt;, asOffset: &lt;#T##Bool#&gt;, orientToPath: &lt;#T##Bool#&gt;, speed: &lt;#T##CGFloat#&gt;)</h3><p>意思是action是跟随者着CGPath的路径进行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path <span class="operator">=</span> <span class="type">UIBezierPath</span>()</span><br><span class="line">path.move(to: .zero)</span><br><span class="line">path.addLine(to: <span class="type">CGPoint</span>(x: xMovement, y: <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// orientToPath 的意思是跟着路径一起旋转角度。</span></span><br><span class="line"><span class="keyword">let</span> move <span class="operator">=</span> <span class="type">SKAction</span>.follow(path.cgPath, asOffset: <span class="literal">true</span>, orientToPath: <span class="literal">true</span>, speed: <span class="number">200</span>)</span><br><span class="line">node.run(move)</span><br></pre></td></tr></table></figure><p>给这个node设置了一个SKAction,这个SKAction是跟随这贝塞尔曲线(但上面确实直线,应该是跟上面的path有关系)运动。</p><p>The follow() method takes three other parameters, all of which are useful. The first decides whether the path coordinates are absolute or are relative to the node’s current position. If you specify asOffset as true, it means any coordinates in your path are adjusted to take into account the node’s position.<br>The third parameter to follow() is orientToPath and makes a complicated task into an easy one. When it’s set to true, the node will automatically rotate itself as it moves on the path so that it’s always facing down the path. Perfect for fireworks, and indeed most things! Finally, you can specify a speed to adjust how fast it moves along the path.</p><h2 id="SKPhysicsContactDelegate"><a href="#SKPhysicsContactDelegate" class="headerlink" title="SKPhysicsContactDelegate"></a>SKPhysicsContactDelegate</h2><p><strong>SKPhysicsContactDelegate协议</strong> 就类似于针对物理碰撞的处理器,所以一般都是符合SKScene协议的class(比如例子里就是GameScene) 需要另外去遵循的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameScene</span>: <span class="title class_">SKScene</span>, <span class="title class_">SKPhysicsContactDelegate</span> &#123;</span><br></pre></td></tr></table></figure><p>此外,在didMove(to:)中我们需要添加的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didMove</span>(<span class="params">to</span> <span class="params">view</span>: <span class="type">SKView</span>) &#123;</span><br><span class="line">    <span class="comment">// 之前这行代码,就是让整个屏幕作为一个物理属性范围</span></span><br><span class="line">    physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(edgeLoopFrom: frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让这整理屏幕作为一个物理属性范围,那么它的碰撞处理器是什么呢?</span></span><br><span class="line">    <span class="comment">// 是self,就是 class GameScene: SKScene, SKPhysicsContactDelegate &#123;</span></span><br><span class="line">    <span class="comment">// 这也是GameScene为什么要遵循SKPhysicsContactDelegate协议的原因</span></span><br><span class="line">    physicsWorld.contactDelegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="contactTestBitMask-amp-amp-collisionBitMask"><a href="#contactTestBitMask-amp-amp-collisionBitMask" class="headerlink" title="contactTestBitMask &amp;&amp; collisionBitMask"></a>contactTestBitMask &amp;&amp; collisionBitMask</h2><p>The <strong>collisionBitMask</strong> bitmask means “which nodes should I bump into?” By default, it’s set to everything, which is why our ball are already hitting each other and the bouncers. The <strong>contactTestBitMask</strong> bitmask means “which collisions do you want to know about?” and by default it’s set to nothing. So by setting <strong>contactTestBitMask</strong> to the value of <strong>collisionBitMask</strong> we’re saying, “tell me about every collision.”</p><ul><li>The categoryBitMask property is a number defining the type of object this is for considering collisions.</li><li>The collisionBitMask property is a number defining what categories of object this node should collide with,</li><li>The contactTestBitMask property is a number defining which collisions we want to be notified about.</li></ul><p>两者的默认设置值是什么?<br>collisionBitMask的默认值是”everything”,contactTestBitMask的默认值是”nothing”。所以,能得出结论是,两者会碰撞,但永远收不到碰撞的相关通知。</p><p>所以下面的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ball.physicsBody<span class="operator">!</span>.contactTestBitMask <span class="operator">=</span> ball.physicsBody<span class="operator">!</span>.collisionBitMask           </span><br></pre></td></tr></table></figure><p>ball.physicsBody!.collisionBitMask代表 球 的所有碰撞情况,前半句ball.physicsBody!.contactTestBitMask的意思是,哪些是需要进行上报的碰撞。<br>整个连起来就是,每个球的所有碰撞都得上报碰撞事件。</p><p>下面是一个完整的关于多个物体碰撞的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置物理体的标示符  &lt;&lt;左移运算符  左移一位，相当于扩大2倍</span></span><br><span class="line"><span class="keyword">let</span> birdCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">0</span>  <span class="comment">//1 二进制表示是1</span></span><br><span class="line"><span class="keyword">let</span> worldCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">1</span>  <span class="comment">//2 二进制表示是10</span></span><br><span class="line"><span class="keyword">let</span> pipeCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">2</span>  <span class="comment">//4 二进制表示是100</span></span><br><span class="line"><span class="keyword">let</span> scoreCategory: <span class="type">UInt32</span> <span class="operator">=</span> <span class="number">1</span> <span class="operator">&lt;&lt;</span> <span class="number">3</span>  <span class="comment">//8 二进制表示是1000</span></span><br></pre></td></tr></table></figure><p>给每个物理体设置physicsBody?.categoryBitMask的标识符:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给地面添加一个识别</span></span><br><span class="line">ground.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> worldCategory</span><br><span class="line"><span class="comment">// 给鸟添加一个识别</span></span><br><span class="line">bird.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> birdCategory</span><br><span class="line"><span class="comment">// 给管道添加一个识别</span></span><br><span class="line">pipe.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> pipeCategory</span><br><span class="line"><span class="comment">// 给得分墙添加一个识别</span></span><br><span class="line">contactNode.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> scoreCategory</span><br></pre></td></tr></table></figure><p>给所有对于鸟可能发生的碰撞进行定义:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bird.physicsBody<span class="operator">?</span>.collisionBitMask <span class="operator">=</span> worldCategory <span class="operator">|</span> pipeCategory <span class="operator">|</span> scoreCategory </span><br><span class="line"><span class="comment">// 或运算,答案是14, 二进制表示是1110</span></span><br><span class="line"><span class="comment">// 上面这行代码可以不写的,因为你不定义collisionBitMask的话,collisionBitMask就代表所有会发生的碰撞。</span></span><br><span class="line"><span class="comment">// 但这样把所有可能发生的碰撞全写上,毕竟是笔记,尽量要全一点</span></span><br></pre></td></tr></table></figure><p>给所有对于鸟来说需要上报通知的碰撞进行定义:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bird.physicsBody<span class="operator">?</span>.contactTestBitMask <span class="operator">=</span> worldCategory <span class="operator">|</span> pipeCategory <span class="operator">|</span> scoreCategory</span><br><span class="line"><span class="comment">// 把以上三种会碰到的碰撞规定需要上报</span></span><br><span class="line"><span class="comment">// 这三种碰撞是所有可能的碰撞,所以代码也可以这样写:</span></span><br><span class="line"><span class="comment">// bird.physicsBody?.contactTestBitMask = bird.physicsBody?.collisionBitMask</span></span><br></pre></td></tr></table></figure><p>以上是对鸟可能发生的碰撞以及需要上报通知的定义,你完全可以去定义 地面&#x2F;管道&#x2F;得分墙 的可能发生的碰撞以及需要上报通知的情况,<br>毕竟这里代码参考的文章中就是这么写的。</p><blockquote><p><a href="https://www.jianshu.com/p/bc22ee0f87b4">https://www.jianshu.com/p/bc22ee0f87b4</a><br>但觉得没必要,你只要定义鸟的collisionBitMask和contactTestBitMask部分就可以了,如果遇到更复杂的情况,倒是可以对类似 地面&#x2F;管道&#x2F;得分墙 进行细节上的再定义。</p></blockquote><p>所以当碰撞发生的时候就可以去判断:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">didBegin</span>(<span class="keyword">_</span> <span class="params">contact</span>: <span class="type">SKPhysicsContact</span>) &#123;</span><br><span class="line">    <span class="comment">// 当上报的是scoreCategory,就知道是和得分墙的碰撞,这是就要进行加分等操作了</span></span><br><span class="line">    <span class="keyword">if</span> contact.bodyA.categoryBitMask <span class="operator">==</span> scoreCategory <span class="operator">||</span> contact.bodyB.categoryBitMask <span class="operator">==</span> scoreCategory &#123;</span><br><span class="line">        score <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        scoreLabelNode.text <span class="operator">=</span> <span class="type">String</span>(score)</span><br><span class="line">        scoreLabelNode.run(<span class="type">SKAction</span>.sequence([<span class="type">SKAction</span>.scale(to: <span class="number">1.5</span>, duration: <span class="type">TimeInterval</span>(<span class="number">0.1</span>)), <span class="type">SKAction</span>.scale(to: <span class="number">1.0</span>, duration: <span class="type">TimeInterval</span>(<span class="number">0.1</span>))]))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当不是与得分墙的碰撞的话,就是鸟与管道或者地面的相撞了</span></span><br><span class="line">        <span class="comment">// collisionBitMask 设置成 worldCategory,是防止与管道再次发生相撞,让其直接掉到地上,</span></span><br><span class="line">        <span class="comment">// 若设置为0,因为标识符没有0的,就会发生一种情况,</span></span><br><span class="line">        <span class="comment">// 那就是小鸟直接往下掉,掉出屏幕！</span></span><br><span class="line">        bird.physicsBody<span class="operator">?</span>.collisionBitMask <span class="operator">=</span> worldCategory</span><br><span class="line">        overStatus()</span><br><span class="line">        bgFlash()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是,这样设置还是出现了问题,问题就是,当鸟撞上了得分墙了以后,它就被堵在了那里不能动了,所以鸟的collisionBitMask和contactTestBitMask都要去除scoreCategory:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bird.physicsBody<span class="operator">?</span>.collisionBitMask <span class="operator">=</span> worldCategory <span class="operator">|</span> pipeCategory</span><br><span class="line">bird.physicsBody<span class="operator">?</span>.contactTestBitMask <span class="operator">=</span> worldCategory <span class="operator">|</span> pipeCategory</span><br></pre></td></tr></table></figure><p>但是去除后,就不会有和得分墙的碰撞,也就无法产生得分了。<br>这时候就要在得分墙上动脑筋了:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contactNode.physicsBody<span class="operator">?</span>.contactTestBitMask <span class="operator">=</span> birdCategory</span><br></pre></td></tr></table></figure><p>对于鸟的碰撞,contactNode需要去通知汇报碰撞情况,而此时因为鸟是被动一方,所以继续畅通无阻地通过这堵得分墙。</p><p>对于这个问题,总结一点,就是鸟设置的碰撞排除掉空气墙,而空气墙设置的碰撞要针对鸟,这样就行了。</p><h3 id="设置了contactTestBitMask-但没设置collisionBitMask-会发生什么"><a href="#设置了contactTestBitMask-但没设置collisionBitMask-会发生什么" class="headerlink" title="设置了contactTestBitMask,但没设置collisionBitMask,会发生什么?"></a>设置了contactTestBitMask,但没设置collisionBitMask,会发生什么?</h3><p>实际没有操作过,教程中称两者不会有碰撞反应,但两者相交的时候会告知。</p><h3 id="contactTestBitMask-x2F-collisionBitMask-x2F-categoryBitMask-三个属性的建议定义格式"><a href="#contactTestBitMask-x2F-collisionBitMask-x2F-categoryBitMask-三个属性的建议定义格式" class="headerlink" title="contactTestBitMask &#x2F; collisionBitMask &#x2F; categoryBitMask 三个属性的建议定义格式"></a>contactTestBitMask &#x2F; collisionBitMask &#x2F; categoryBitMask 三个属性的建议定义格式</h3><p>SpriteKit希望我们使用UInt32格式来定义上面三个属性。</p><p>一般定义的用例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">CollisionTypes</span>: <span class="title class_">UInt32</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> player <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> wall <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> star <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> vortex <span class="operator">=</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> finish <span class="operator">=</span> <span class="number">16</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了上述三个属性,如何使用?<br>直接使用<code>CollisionTypes.player</code>来赋值可以吗?显然不行,因为它的值是<code>player</code>,而非SpriteKit要求的<code>UInt32</code>属性的值<code>1</code>。因此,需要用到<code>CollisionTypes.player.rawValue</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;block&quot;</span>)</span><br><span class="line">node.position <span class="operator">=</span> position</span><br><span class="line"></span><br><span class="line">node.physicsBody <span class="operator">=</span> <span class="type">SKPhysicsBody</span>(rectangleOf: node.size)</span><br><span class="line">node.physicsBody<span class="operator">?</span>.categoryBitMask <span class="operator">=</span> <span class="type">CollisionTypes</span>.wall.rawValue</span><br><span class="line">node.physicsBody<span class="operator">?</span>.isDynamic <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">addChild(node)</span><br></pre></td></tr></table></figure><h2 id="func-didBegin-contact-SKPhysicsContact"><a href="#func-didBegin-contact-SKPhysicsContact" class="headerlink" title="func didBegin(_ contact: SKPhysicsContact) {"></a>func didBegin(_ contact: SKPhysicsContact) {</h2><p>这是SKPhysicsContactDelegate默认会有的一个方法。<br>如果发生碰撞并上报事件了,就会调用该方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前要给需要的SKSpriteNode节点取名字,比如</span></span><br><span class="line"><span class="comment">// slotBase.name = &quot;good&quot;</span></span><br><span class="line"><span class="comment">// slotBase.name = &quot;bad&quot;</span></span><br><span class="line"><span class="comment">// ball.name = &quot;ball&quot;</span></span><br><span class="line"><span class="comment">// 这里多说一句,可以给节点取名字,也可以给节点的physicsBody?.categoryBitMask添加值,这样更好,</span></span><br><span class="line"><span class="comment">// 具体见 physicsBody?.categoryBitMask的讲解。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">didBegin</span>(<span class="keyword">_</span> <span class="params">contact</span>: <span class="type">SKPhysicsContact</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> contact.bodyA.node<span class="operator">?</span>.name <span class="operator">==</span> <span class="string">&quot;ball&quot;</span> &#123;</span><br><span class="line">        collisionBetween(ball: contact.bodyA.node<span class="operator">!</span>, object: contact.bodyB.node<span class="operator">!</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> contact.bodyB.node<span class="operator">?</span>.name <span class="operator">==</span> <span class="string">&quot;ball&quot;</span> &#123;</span><br><span class="line">        collisionBetween(ball: contact.bodyB.node<span class="operator">!</span>, object: contact.bodyA.node<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">collisionBetween</span>(<span class="params">ball</span>: <span class="type">SKNode</span>, <span class="params">object</span>: <span class="type">SKNode</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> object.name <span class="operator">==</span> <span class="string">&quot;good&quot;</span> &#123;</span><br><span class="line">        destroy(ball: ball)</span><br><span class="line">        score <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> object.name <span class="operator">==</span> <span class="string">&quot;bad&quot;</span> &#123;</span><br><span class="line">        destroy(ball: ball)</span><br><span class="line">        score <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">destroy</span>(<span class="params">ball</span>: <span class="type">SKNode</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;here&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fireParticles <span class="operator">=</span> <span class="type">SKEmitterNode</span>(fileNamed: <span class="string">&quot;FireParticles&quot;</span>) &#123;</span><br><span class="line">        fireParticles.position <span class="operator">=</span> ball.position</span><br><span class="line">        addChild(fireParticles)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> a <span class="operator">=</span> <span class="type">SKEmitterNode</span>(fileNamed: <span class="string">&quot;FireParticles&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SKSpriteNode节点的移除一定要从Parent处移除</span></span><br><span class="line">    ball.removeFromParent()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SKLabelNode"><a href="#SKLabelNode" class="headerlink" title="SKLabelNode"></a>SKLabelNode</h2><p>The SKLabelNode class is somewhat similar to UILabel in that it has a text property, a font, a position, an alignment, and so on.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个SKLabelNode,字体使用&quot;粉笔灰&quot;</span></span><br><span class="line">scoreLabel <span class="operator">=</span> <span class="type">SKLabelNode</span>(fontNamed: <span class="string">&quot;Chalkduster&quot;</span>)</span><br><span class="line"><span class="comment">// SKLabelNode的内容</span></span><br><span class="line">scoreLabel.text <span class="operator">=</span> <span class="string">&quot;Score: 0&quot;</span></span><br><span class="line">scoreLabel.horizontalAlignmentMode <span class="operator">=</span> .right</span><br><span class="line">scoreLabel.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">980</span>, y: <span class="number">700</span>)</span><br><span class="line">addChild(scoreLabel)</span><br></pre></td></tr></table></figure><h2 id="open-func-nodes-at-p-CGPoint-gt-SKNode"><a href="#open-func-nodes-at-p-CGPoint-gt-SKNode" class="headerlink" title="open func nodes(at p: CGPoint) -&gt; [SKNode]"></a>open func nodes(at p: CGPoint) -&gt; [SKNode]</h2><p>这方法是SKNode协议下的一个内置方法,作用是反馈在这个location的所有SKNode节点</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesBegan</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first &#123;</span><br><span class="line">        <span class="keyword">let</span> location <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> objects <span class="operator">=</span> nodes(at: location)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> objects.contains(editLabel) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">touchesMoved</span>(<span class="keyword">_</span> <span class="params">touches</span>: <span class="type">Set</span>&lt;<span class="type">UITouch</span>&gt;, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> touch <span class="operator">=</span> touches.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> location <span class="operator">=</span> touch.location(in: <span class="keyword">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes(at: location) &#123;</span><br><span class="line">        <span class="keyword">if</span> node.name <span class="operator">==</span> <span class="string">&quot;player&quot;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SKEmitterNode"><a href="#SKEmitterNode" class="headerlink" title="SKEmitterNode"></a>SKEmitterNode</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/11/7/special-effects-skemitternode">https://www.hackingwithswift.com/read/11/7/special-effects-skemitternode</a></p></blockquote><p>SpriteKit has a built-in particle editor to help you create effects like fire, snow, rain and smoke almost entirely through a graphical editor. </p><p>The SKEmitterNode class is new and powerful: it’s designed to create high-performance particle effects in SpriteKit games, and all you need to do is provide it with the filename of the particles you designed and it will do the rest.</p><h3 id="SKEmitterNode-fileNamed-的用例"><a href="#SKEmitterNode-fileNamed-的用例" class="headerlink" title="SKEmitterNode(fileNamed:)的用例"></a>SKEmitterNode(fileNamed:)的用例</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">destroy</span>(<span class="params">ball</span>: <span class="type">SKNode</span>) &#123;</span><br><span class="line">    <span class="comment">// 加载FireParticles.sks文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fireParticles <span class="operator">=</span> <span class="type">SKEmitterNode</span>(fileNamed: <span class="string">&quot;FireParticles&quot;</span>) &#123;</span><br><span class="line">        fireParticles.position <span class="operator">=</span> ball.position</span><br><span class="line">        addChild(fireParticles)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ball.removeFromParent()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会有在ball被清除前,先出现一个爆炸的动画。<br>在xCode中你可以点击该FireParticles.sks文件,就可以看见右侧面板上有标题叫”SpriteKit Particle Emitter”,可以在里面更改动画效果等。</p><h3 id="SKEmitterNode的advanceSimulationTime-sec-TimeInterval"><a href="#SKEmitterNode的advanceSimulationTime-sec-TimeInterval" class="headerlink" title="SKEmitterNode的advanceSimulationTime(sec: TimeInterval)"></a>SKEmitterNode的advanceSimulationTime(sec: TimeInterval)</h3><p>让SKEmitterNode提前多少秒渲染。</p><p>用例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">starField <span class="operator">=</span> <span class="type">SKEmitterNode</span>(fileNamed: <span class="string">&quot;starfield&quot;</span>)<span class="operator">!</span></span><br><span class="line">starField.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">1024</span>, y: <span class="number">384</span>)</span><br></pre></td></tr></table></figure><p>效果是这样的:<br><img src="/Images/WithoutAdvanceSimulationTime.gif" alt="WithoutAdvanceSimulationTime"><br>你会发现星空是从右边屏幕开始慢慢渲染的,但我们需要星空一开始就充满屏幕,这时候就需要用到SKEmitterNode的advanceSimulationTime(sec: TimeInterval)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提前渲染10秒的星空</span></span><br><span class="line">starField.advanceSimulationTime(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>效果是这样的:<br><img src="/Images/WithAdvanceSimulationTime.gif" alt="WithoutAdvanceSimulationTime"></p><h3 id="sks文件的制作"><a href="#sks文件的制作" class="headerlink" title=".sks文件的制作"></a>.sks文件的制作</h3><p>还没涉及到.sks文件的制作,上例中,文件制作完预览是这样的:<br><img src="/Images/FireParticles.gif" alt="FireParticles"></p><p>文章中提了一笔如何创建该sks文件:<br>Add a new file, but this time choose “Resource” under the iOS heading, then choose “SpriteKit Particle File” to see the list of options.</p><p>后续需要研究下怎么制作……………………….</p><h2 id="SKNode"><a href="#SKNode" class="headerlink" title="SKNode"></a>SKNode</h2><p>SKNode doesn’t draw images like sprites or hold text like labels; it just sits in our scene at a position, holding other nodes as children.<br>SKSpriteNode, SKLabelNode and SKEmitterNode, and they all come from SKNode.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WhackSlot</span>: <span class="title class_">SKNode</span> &#123;</span><br><span class="line">    <span class="comment">// 这里没有写init()方法,但可以有</span></span><br><span class="line">    <span class="comment">// configure方法是自己写的,并不是本身固有的方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">configure</span>(<span class="params">at</span> <span class="params">position</span>: <span class="type">CGPoint</span>) &#123;</span><br><span class="line">        <span class="comment">// 确定SKNode在什么位置</span></span><br><span class="line">        <span class="keyword">self</span>.position <span class="operator">=</span> position</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定这个SKNode显示什么图片</span></span><br><span class="line">        <span class="keyword">let</span> sprite <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;whackHole&quot;</span>)</span><br><span class="line">        addChild(sprite)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还可以加入SKCropNode让这里有个遮罩之类</span></span><br><span class="line">        <span class="comment">// 再给SKCropNode加入一个SKSpriteNode(imageNamed:)之类的</span></span><br><span class="line">        <span class="comment">// 再实现其的动画效果</span></span><br><span class="line">        <span class="comment">// 具体实现见https://www.hackingwithswift.com/read/14/2/getting-up-and-running-skcropnode</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SKNode-removeAllChildren"><a href="#SKNode-removeAllChildren" class="headerlink" title="SKNode.removeAllChildren()"></a>SKNode.removeAllChildren()</h3><p>移除SKNode中的所有子节点。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var pipes: SKNode!</span></span><br><span class="line"></span><br><span class="line">pipes.removeAllChildren()</span><br></pre></td></tr></table></figure><h3 id="SKNode-children-–-获取所有节点"><a href="#SKNode-children-–-获取所有节点" class="headerlink" title="SKNode.children – 获取所有节点"></a>SKNode.children – 获取所有节点</h3><p>children可以获取到所有的节点,它的定义是: [SKNode]。<br>下面是获取到所有节点,并始终刷新,判断节点的x坐标在屏幕左侧-300的位置时,即将其删除的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">update</span>(<span class="keyword">_</span> <span class="params">currentTime</span>: <span class="type">TimeInterval</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> children &#123;</span><br><span class="line">        <span class="keyword">if</span> node.position.x <span class="operator">&lt;</span> <span class="operator">-</span><span class="number">300</span> &#123;</span><br><span class="line">            node.removeFromParent()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="isUserInteractionEnabled-属性-–-是否让用户点击交互"><a href="#isUserInteractionEnabled-属性-–-是否让用户点击交互" class="headerlink" title="isUserInteractionEnabled 属性 – 是否让用户点击交互"></a>isUserInteractionEnabled 属性 – 是否让用户点击交互</h3><p>一个SKNode,如果只是做背景之类不需要用户点击进行交互的话,就可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// skNode: SKNode</span></span><br><span class="line"></span><br><span class="line">skNode.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="SKCropNode"><a href="#SKCropNode" class="headerlink" title="SKCropNode"></a>SKCropNode</h2><p>SKCropNode is a special kind of SKNode subclass that uses an image as a cropping mask: anything in the colored part will be visible, anything in the transparent part will be invisible.<br>SKCropNode是SKNode的子类。<br>SKCropNode.maskNode得是个SKSpriteNode。<br>SKCropNode.maskNode的作用就是:<br>在SKCropNode.maskNode范围内,这是前提,<br>SKCropNode这个node中的texture(素材),必须是要出现在maskNode范围内的才会显示。</p><p>示例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WhackSlot</span>: <span class="title class_">SKNode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">configure</span>(<span class="params">at</span> <span class="params">position</span>: <span class="type">CGPoint</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.position <span class="operator">=</span> position</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> sprite <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;whackHole&quot;</span>)</span><br><span class="line">        addChild(sprite)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> cropNode <span class="operator">=</span> <span class="type">SKCropNode</span>()</span><br><span class="line">        cropNode.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">15</span>)</span><br><span class="line">        <span class="comment">// 把cropNode放在其他node之上</span></span><br><span class="line">        cropNode.zPosition <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">// 若设置成cropNode.maskNode = nil 则charNode就会显示出来</span></span><br><span class="line">        cropNode.maskNode <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;whackMask&quot;</span>)</span><br><span class="line"></span><br><span class="line">        charNode <span class="operator">=</span> <span class="type">SKSpriteNode</span>(imageNamed: <span class="string">&quot;penguinGood&quot;</span>)</span><br><span class="line">        charNode.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="operator">-</span><span class="number">90</span>)</span><br><span class="line">        charNode.name <span class="operator">=</span> <span class="string">&quot;character&quot;</span></span><br><span class="line">        cropNode.addChild(charNode)</span><br><span class="line">        </span><br><span class="line">        addChild(cropNode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释下代码:<br>cropNode的位置在(0,15), cropNode.maskNode 是一张图片,可以理解成是cropNode的背景图,但实施其是一个人mask,在mask内的显示,不在的不显示。<br>charNode的位置在(0,-90),它在 cropNode.maskNode 的下面,所以不显示这个charNode。<br>后续会有代码让charNode往上升,就能看到了,不过这是后话。</p><p>I hope you noticed the important thing, which is that the character node is added to the crop node, and the crop node was added to the slot. This is because the crop node only crops nodes that are inside it, so we need to have a clear hierarchy: the slot has the hole and crop node as children, and the crop node has the character node as a child.</p><h2 id="AnchorPoint"><a href="#AnchorPoint" class="headerlink" title="AnchorPoint"></a>AnchorPoint</h2><p>在SpriteKit的游戏开发中经常会使用到AnchorPoint锚点这一属性,这需要配合position属性一起使用。<br>在SpriteKit中(0,0)这个点是在左下角,但UIKit中是左上角。<br>锚点的类型是CGPoint类型数据,取值范围是(0,0)~(1,1)之间,如下图:<br><img src="/Images/anchorPoint.webp" alt="AnchorPoint">。</p><p>我们以(0,0)为左上角来讲解:<br>View的position为(50,50):<br>1、 若AnchorPoint为(0.5,0.5), 就说明锚点取的是View的中心点, 则View的中心点位置是(50,50), 如下图:<br><img src="/Images/AnchorPoint_1.png" alt="AnchorPoint"><br>2、若AnchorPoint为(0,0),就说明锚点取的是View的左上角,则View的左上角位置是(50,50),如下图:<br><img src="/Images/AnchorPoint_2.png" alt="AnchorPoint"><br>3、若AnchorPoint为(1,1),就说明锚点取的是View的右下角,则View的右下角位置是(50,50),如下图:<br><img src="/Images/AnchorPoint_3.png" alt="AnchorPoint"></p><h2 id="UIViewController-与-GameScene-的关系"><a href="#UIViewController-与-GameScene-的关系" class="headerlink" title="UIViewController 与 GameScene 的关系"></a>UIViewController 与 GameScene 的关系</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/29/3/mixing-uikit-and-spritekit-uislider-and-skview">https://www.hackingwithswift.com/read/29/3/mixing-uikit-and-spritekit-uislider-and-skview</a></p></blockquote><p>默认建立game后,会有GameScene.swift和GameViewController.swift这两个文件,要解释一下的是,GameViewController.swift中的UIViewController,掌管着GameScene.swift中的GameScene。</p><p>我们一般采用的方式是,让两者互相通信,即可互相引用,但有一个强弱关系,GameViewController中的属性指向GameScene是一个强引用,而GameScene中的属性指向GameViewController的是一个弱引用,防止内存占用崩溃的情况。比如这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GameScene.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameScene</span>: <span class="title class_">SKScene</span> &#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> viewController: <span class="type">GameViewController</span>!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  GameViewController.swift</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> currentGame: <span class="type">GameScene</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> view <span class="operator">=</span> <span class="keyword">self</span>.view <span class="keyword">as!</span> <span class="type">SKView</span>? &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> scene <span class="operator">=</span> <span class="type">SKScene</span>(fileNamed: <span class="string">&quot;GameScene&quot;</span>) &#123;</span><br><span class="line">                scene.scaleMode <span class="operator">=</span> .aspectFill</span><br><span class="line">                </span><br><span class="line">                view.presentScene(scene)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 注意:主要是下面这两行来进行引用</span></span><br><span class="line">                currentGame <span class="operator">=</span> scene <span class="keyword">as?</span> <span class="type">GameScene</span></span><br><span class="line">                currentGame.viewController <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            view.ignoresSiblingOrder <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            </span><br><span class="line">            view.showsFPS <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            view.showsNodeCount <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设置后,两者就可以正常通信了。</p><h3 id="UIViewController的默认方法"><a href="#UIViewController的默认方法" class="headerlink" title="UIViewController的默认方法"></a>UIViewController的默认方法</h3><h4 id="override-func-motionBegan-motion-UIEvent-EventSubtype-with-event-UIEvent-检测设备的-晃动-x2F-shake-x2F-摇晃-效果"><a href="#override-func-motionBegan-motion-UIEvent-EventSubtype-with-event-UIEvent-检测设备的-晃动-x2F-shake-x2F-摇晃-效果" class="headerlink" title="override func motionBegan(_ motion: UIEvent.EventSubtype, with event: UIEvent?) { } 检测设备的 晃动&#x2F;shake&#x2F;摇晃 效果"></a>override func motionBegan(_ motion: UIEvent.EventSubtype, with event: UIEvent?) { } 检测设备的 晃动&#x2F;shake&#x2F;摇晃 效果</h4><p>motionBegan()只能在view controller中设置,而不能在game scenes中设置。<br>下面是在GameViewController.swift的UIViewController中建立一个方法,来调用GameScene.swift中的explodeFireworks方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="comment">// 省略必须的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">motionBegan</span>(<span class="keyword">_</span> <span class="params">motion</span>: <span class="type">UIEvent</span>.<span class="type">EventSubtype</span>, <span class="params">with</span> <span class="params">event</span>: <span class="type">UIEvent</span>?) &#123;</span><br><span class="line">        <span class="comment">// 感觉这行代码是检测主体的view是否是一个SKView</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> skView <span class="operator">=</span> view <span class="keyword">as?</span> <span class="type">SKView</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 感觉这行代码是检测SKView的scene是否是GameScene</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> gameScene <span class="operator">=</span> skView.scene <span class="keyword">as?</span> <span class="type">GameScene</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="comment">// 如果上面检测都成立,就运行GameScene.swift文件中的GameScene类中的explodeFireworks方法。</span></span><br><span class="line">        gameScene.explodeFireworks()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注:在模拟器中使用”ctrl”+”cmd”+”z”来模拟设备的晃动效果。</p><h3 id="如何在游戏中新生成GameScene-以及在此过程中与GameViewController-swift之间的联系"><a href="#如何在游戏中新生成GameScene-以及在此过程中与GameViewController-swift之间的联系" class="headerlink" title="如何在游戏中新生成GameScene,以及在此过程中与GameViewController.swift之间的联系"></a>如何在游戏中新生成GameScene,以及在此过程中与GameViewController.swift之间的联系</h3><p>在游戏中,比如玩家输掉的情况下,需要重新生成GameScene的场景,如果去做呢?<br>因为GameScene是由GameViewController来控制生成的,所以最终还是由后者来决定。<br>结合上面讲到的GameScene与GameViewController互相之间强弱引用自见的关系,具体见<code>UIViewController 与 GameScene 的关系</code>。<br>简单代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下代码在GameScene中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先生成新的游戏场景</span></span><br><span class="line"><span class="keyword">let</span> newGame <span class="operator">=</span> <span class="type">GameScene</span>(size: <span class="keyword">self</span>.size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SKTransition.crossFade 可以让一个scene过渡到另一个scene,</span></span><br><span class="line"><span class="comment">// 我的理解就是通过慢慢让一个scene消失,再让另一个scene出现.</span></span><br><span class="line"><span class="keyword">let</span> transition <span class="operator">=</span> <span class="type">SKTransition</span>.crossFade(withDuration: <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 例子中使用的是SKTransition.doorway(withDuration:)的方法,</span></span><br><span class="line"><span class="comment">// 查了下说明,说是像一个打开的大门一样让scene消失掉.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候需要使用到UIViewController了,其的view?.presentScene的作用就是,</span></span><br><span class="line"><span class="comment">// 传递一个新的scene,并让这个过滤通过你定义的transition来展现。</span></span><br><span class="line"><span class="keyword">self</span>.view<span class="operator">?</span>.presentScene(newGame, transition: transition)</span><br></pre></td></tr></table></figure><h2 id="在spriteKit中使用UIGraphicsImageRenderer生成图像的注意点"><a href="#在spriteKit中使用UIGraphicsImageRenderer生成图像的注意点" class="headerlink" title="在spriteKit中使用UIGraphicsImageRenderer生成图像的注意点"></a>在spriteKit中使用UIGraphicsImageRenderer生成图像的注意点</h2><p>先看例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GameScene</span>: <span class="title class_">SKScene</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> spriteKitNode: <span class="type">SKSpriteNode</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">didMove</span>(<span class="params">to</span> <span class="params">view</span>: <span class="type">SKView</span>) &#123;       </span><br><span class="line">                </span><br><span class="line">        <span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">200</span>, height: <span class="number">200</span>))</span><br><span class="line">        <span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">            <span class="type">UIColor</span>.red.setFill()</span><br><span class="line">            <span class="keyword">let</span> rect <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">            ctx.cgContext.addRect(rect)</span><br><span class="line">            ctx.cgContext.drawPath(using: .fill)</span><br><span class="line">            </span><br><span class="line">            <span class="type">UIColor</span>.systemBrown.setFill()</span><br><span class="line">            <span class="keyword">let</span> rect2 <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">            ctx.cgContext.addEllipse(in: rect2)</span><br><span class="line">            ctx.cgContext.drawPath(using: .fill)</span><br><span class="line">            </span><br><span class="line">            <span class="type">UIColor</span>.systemGreen.setFill()</span><br><span class="line">            <span class="keyword">let</span> rect3 <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">            ctx.cgContext.addRect(rect3)</span><br><span class="line">            ctx.cgContext.drawPath(using: .fill)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        spriteKitNode <span class="operator">=</span> <span class="type">SKSpriteNode</span>(texture: <span class="type">SKTexture</span>(image: img))</span><br><span class="line">        spriteKitNode.position <span class="operator">=</span> <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        addChild(spriteKitNode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在手机中生成的图像是这样的:<br><img src="/Images/spriteKitAndUIGraphicsImageRenderer.png" alt="spriteKitAndUIGraphicsImageRenderer"></p><p>总结:</p><ol><li>SpriteKit中的坐标是以左下角为(0,0),而UIGraphicsImageRenderer是以左上角为(0,0)的;</li><li>SpriteKit中的图形的坐标都是以图形的中心点为准的,比如上面的整个图形的坐标是(100,100),所以整个图形是生成在屏幕的左下脚,而在UIGraphicsImageRenderer中制作图形时,图形的左上角才是(0,0),比如大红正方形的坐标是(0,0),圆形的坐标也是(0,0),绿色小正方形的坐标是(100,100)。</li><li>两者使用不同的图形原点,所以在制图时要考虑到你是在哪个里面,是还在UIGraphicsImageRenderer中作画呢,还是已经跳出到SpriteKit中开始生成图形了。</li></ol><h3 id="ctx-cgContent-setBlendMode-方法-–-展现炸掉上层图像的效果"><a href="#ctx-cgContent-setBlendMode-方法-–-展现炸掉上层图像的效果" class="headerlink" title="ctx.cgContent.setBlendMode() 方法 – 展现炸掉上层图像的效果"></a>ctx.cgContent.setBlendMode() 方法 – 展现炸掉上层图像的效果</h3><p>基于上面一样的例子,这里背景色设定为白色,先看效果图:<br><img src="/Images/setBlendMode.png" alt="setBlendMode"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他代码一样</span></span><br><span class="line"></span><br><span class="line">            <span class="type">UIColor</span>.systemBrown.setFill()</span><br><span class="line">            <span class="keyword">let</span> rect2 <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">            ctx.cgContext.addEllipse(in: rect2)</span><br><span class="line">            ctx.cgContext.setBlendMode(.clear)</span><br><span class="line">            ctx.cgContext.drawPath(using: .fill)</span><br><span class="line">            </span><br><span class="line">            <span class="type">UIColor</span>.systemGreen.setFill()</span><br><span class="line">            <span class="keyword">let</span> rect3 <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">            ctx.cgContext.addRect(rect3)</span><br><span class="line">            ctx.cgContext.setBlendMode(.color)</span><br><span class="line">            ctx.cgContext.drawPath(using: .fill)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一旦设置了ctx.cgContext.setBlendMode(.clear),下面的图像生成都是这个模式,</span></span><br><span class="line"><span class="comment">// 所以后面还要ctx.cgContext.setBlendMode(.color)再切回来。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SKTransition"><a href="#SKTransition" class="headerlink" title="SKTransition"></a>SKTransition</h2><p>SKTransition的定义是A transition style from one scene to another.</p><h3 id="SKTransition-crossFade-与-SKTransition-doorway"><a href="#SKTransition-crossFade-与-SKTransition-doorway" class="headerlink" title="SKTransition.crossFade 与 SKTransition.doorway"></a>SKTransition.crossFade 与 SKTransition.doorway</h3><p>都是让scene消失掉的过渡过程,例子具体见<code>如何在游戏中新生成GameScene,以及在此过程中与GameViewController.swift之间的联系</code>这一节。</p><h1 id="NSCoding"><a href="#NSCoding" class="headerlink" title="NSCoding"></a>NSCoding</h1><blockquote><p><a href="https://www.hackingwithswift.com/read/12/3/fixing-project-10-nscoding">https://www.hackingwithswift.com/read/12/3/fixing-project-10-nscoding</a></p></blockquote><p>一般都推荐使用Codable了,所以这里就不写关于NSCoding的笔记了。</p><h1 id="UISlider"><a href="#UISlider" class="headerlink" title="UISlider"></a>UISlider</h1><h2 id="如何取得滑动值"><a href="#如何取得滑动值" class="headerlink" title="如何取得滑动值"></a>如何取得滑动值</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在storyboard上建立一个slider</span></span><br><span class="line"><span class="keyword">@IBOutlet</span> <span class="keyword">var</span> intensity: <span class="type">UISlider</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何取得UISlider的滑动数值</span></span><br><span class="line"><span class="comment">// 使用intensity.value即可</span></span><br><span class="line">intensity.value</span><br></pre></td></tr></table></figure><h2 id="如何跟踪滑动值的改变"><a href="#如何跟踪滑动值的改变" class="headerlink" title="如何跟踪滑动值的改变"></a>如何跟踪滑动值的改变</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在storyboard上建立对应该Slider的action事件</span></span><br><span class="line"><span class="comment">// 每次滑动Slider都会触发该方法</span></span><br><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">intensityChanged</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有跟踪值变化的方法,就是下面对valueChanged改变的响应事件的方法。</p><h2 id="UISlider的基本属性"><a href="#UISlider的基本属性" class="headerlink" title="UISlider的基本属性"></a>UISlider的基本属性</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  最小值</span></span><br><span class="line">slider.minimumValue <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"><span class="comment">//  最大值</span></span><br><span class="line">slider.maximumValue <span class="operator">=</span> <span class="number">100.0</span></span><br><span class="line"><span class="comment">//  设置默认值</span></span><br><span class="line">slider.setValue(sliderDefalutValue, animated: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//  滑动条有值部分颜色</span></span><br><span class="line">slider.minimumTrackTintColor <span class="operator">=</span> .orange</span><br><span class="line"><span class="comment">//  滑动条没有值部分颜色</span></span><br><span class="line">slider.maximumTrackTintColor <span class="operator">=</span> .black</span><br><span class="line"><span class="comment">//  滑块滑动的值变化触发ValueChanged事件 如果设置为滑动停止才触发则设置为false</span></span><br><span class="line">slider.isContinuous <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">//  响应事件</span></span><br><span class="line">slider.addTarget(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(sliderValueChange), for: .valueChanged)</span><br><span class="line"><span class="comment">//  修改控制器图片 -- 划动的图标改成自定义的图片</span></span><br><span class="line">slider.setThumbImage(<span class="type">UIImage</span>(named: <span class="string">&quot;diamond&quot;</span>), for: .normal)</span><br></pre></td></tr></table></figure><h2 id="UISlider-与-animation-的配合使用"><a href="#UISlider-与-animation-的配合使用" class="headerlink" title="UISlider 与 animation 的配合使用"></a>UISlider 与 animation 的配合使用</h2><p>具体见<code>UIViewPropertyAnimator的fractionComplete属性 -- 配合UISlider的使用</code>这一章节的笔记。</p><h1 id="CoreImage"><a href="#CoreImage" class="headerlink" title="CoreImage"></a>CoreImage</h1><p>Core Image is Apple’s high-speed image manipulation tookit. It does only one thing, which is to apply filters to images that manipulate them in various ways.</p><h2 id="需要import"><a href="#需要import" class="headerlink" title="需要import"></a>需要import</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreImage</span><br></pre></td></tr></table></figure><h2 id="CIContext"><a href="#CIContext" class="headerlink" title="CIContext"></a>CIContext</h2><p>The first is a Core Image context, which is the Core Image component that handles rendering. We create it here and use it throughout our app, because creating a context is computationally expensive so we don’t want to keep doing it and it’s best to re-use them where possible.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> context: <span class="type">CIContext</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// viewDidLoad()</span></span><br><span class="line">context <span class="operator">=</span> <span class="type">CIContext</span>()</span><br></pre></td></tr></table></figure><p>具体的例子见下面的CIFilter的讲解。</p><h2 id="CIFilter"><a href="#CIFilter" class="headerlink" title="CIFilter"></a>CIFilter</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/13/4/applying-filters-cicontext-cifilter">https://www.hackingwithswift.com/read/13/4/applying-filters-cicontext-cifilter</a><br>(以上有多种filter的选择,对应值的转换,以及项目实际模拟出来的各种效果,如果需要的时候可以看一下)<br>(也可以在用户导入照片的时候,提供必要的filter让其修改下照片效果等)</p></blockquote><p>The second is a Core Image filter, and will store whatever filter the user has activated. This filter will be given various input settings before we ask it to output a result for us to show in the image view.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentFilter: <span class="type">CIFilter</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// viewDidLoad()</span></span><br><span class="line">context <span class="operator">=</span> <span class="type">CIContext</span>()</span><br><span class="line"><span class="comment">// creates an example filter that will apply a sepia tone effect to images.</span></span><br><span class="line">currentFilter <span class="operator">=</span> <span class="type">CIFilter</span>(name: <span class="string">&quot;CISepiaTone&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The CIImage data type is UIImage.</span></span><br><span class="line"><span class="keyword">let</span> beginImage <span class="operator">=</span> <span class="type">CIImage</span>(image: currentImage)</span><br><span class="line"><span class="comment">// we send the result into the current Core Image Filter using the kCIInputImageKey. There are lots of Core Image key constants like this; at least this one is somewhat self-explanatory!</span></span><br><span class="line">currentFilter.setValue(beginImage, forKey: kCIInputImageKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The first line safely reads the output image from our current filter. </span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> currentFilter.outputImage <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="comment">// The second line uses the value of our intensity slider to set the kCIInputIntensityKey value of our current Core Image filter. For sepia toning a value of 0 means &quot;no effect&quot; and 1 means &quot;fully sepia.&quot;</span></span><br><span class="line"><span class="comment">// var intensity: UISlider!</span></span><br><span class="line">currentFilter.setValue(intensity.value, forKey: kCIInputIntensityKey)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的 if 语句中的代码,我们也可以总结出:</span></span><br><span class="line"><span class="comment">// 要想从CIImage -&gt; UIImage, 必须是:</span></span><br><span class="line"><span class="comment">// CIImage -&gt; CGImage -&gt; UIImage.</span></span><br><span class="line"><span class="comment">// -----------------------------------</span></span><br><span class="line"><span class="comment">// it creates a new data type called CGImage from the output image of the current filter.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cgimg <span class="operator">=</span> context.createCGImage(image, from: image.extent) &#123;</span><br><span class="line">    <span class="comment">// 转换成UIImageView需要的UIImage</span></span><br><span class="line">    <span class="keyword">let</span> processedImage <span class="operator">=</span> <span class="type">UIImage</span>(cgImage: cgimg)</span><br><span class="line">    <span class="comment">// 放入UIImageView</span></span><br><span class="line">    imageView.image <span class="operator">=</span> processedImage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UIImageWriteToSavedPhotosAlbum"><a href="#UIImageWriteToSavedPhotosAlbum" class="headerlink" title="UIImageWriteToSavedPhotosAlbum()"></a>UIImageWriteToSavedPhotosAlbum()</h1><p>向用户的相册写入图片。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设有一个UIButton的action是下面的func</span></span><br><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">save</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> imageView.image <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">#selector</span>(image(<span class="keyword">_</span>:didFinishSavingWithError:contextInfo:)), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">image</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>, <span class="params">didFinishSavingWithError</span> <span class="params">error</span>: <span class="type">Error</span>?, <span class="params">contextInfo</span>: <span class="type">UnsafeRawPointer</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">        <span class="comment">// we got back an error!</span></span><br><span class="line">        <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Save error&quot;</span>, message: error.localizedDescription, preferredStyle: .alert)</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">        present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Saved!&quot;</span>, message: <span class="string">&quot;Your altered image has been saved to your photos.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">        present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UIView-animate"><a href="#UIView-animate" class="headerlink" title="UIView.animate"></a>UIView.animate</h1><p>一般用法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">TimeInterval</span>#<span class="operator">&gt;</span>, delay: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">TimeInterval</span>#<span class="operator">&gt;</span>, animations: <span class="operator">&lt;</span>#<span class="type">T</span>##() -&gt; <span class="type">Void</span>#<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p>更丝滑的用法:(使用到了usingSpringWithDamping &#x2F; initialSpringVelocity,是为了增加润滑度的)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">TimeInterval</span>#<span class="operator">&gt;</span>, delay: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">TimeInterval</span>#<span class="operator">&gt;</span>, usingSpringWithDamping: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">CGFloat</span>#<span class="operator">&gt;</span>, initialSpringVelocity: <span class="operator">&lt;</span>#<span class="type">T</span>##<span class="type">CGFloat</span>#<span class="operator">&gt;</span>, animations: <span class="operator">&lt;</span>#<span class="type">T</span>##() -&gt; <span class="type">Void</span>#<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p>案例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.5</span>, initialSpringVelocity: <span class="number">5</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.imageView.alpha <span class="operator">=</span> <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">self</span>.imageView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.green</span><br><span class="line">    <span class="comment">// 后续可以设置案件让其还原</span></span><br><span class="line">    <span class="comment">// 比如</span></span><br><span class="line">    <span class="comment">// self.imageView.alpha = 1.0</span></span><br><span class="line">    <span class="comment">// self.imageView.backgroundColor = UIColor.clear</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里补充一点 UIColor.clear 的定义</span></span><br><span class="line">    <span class="comment">// open class var clear: UIColor &#123; get &#125; // 0.0 white, 0.0 alpha</span></span><br><span class="line">    <span class="comment">// 所以上面代码会让背景色变白并且透明度为0即不可见</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIView-animate-的-completed-的trailing-closure参数"><a href="#UIView-animate-的-completed-的trailing-closure参数" class="headerlink" title="UIView.animate 的 completed 的trailing closure参数"></a>UIView.animate 的 completed 的trailing closure参数</h2><p>下面的代码可以在animate的动画结束之后再执行一段代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span>.currentAnimation &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;) &#123; finished <span class="keyword">in</span></span><br><span class="line">    sender.isHidden <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIView-animate-的思考"><a href="#UIView-animate-的思考" class="headerlink" title="UIView.animate 的思考"></a>UIView.animate 的思考</h2><p>上面代码中,在UIView.animate中变化的是self.imageView.alpha。<br>同样的情景,但换做是一个UIButton,”_ sender: UIButton”是其传来的参数,你使用sender.isHidden &#x3D; true, 是不会有过渡变化的,而你使用sender.alpha &#x3D; 0,就会带来过渡的变化。后者很好理解,因为alpha的取值是从0-1.0之前,但为什么sender.isHidden从false到true,也是让图像从有到无,为何就没有用呢? (还记得在SwfitUI中,withAnimation中好像是可以放入true或false的改变的,也会有动画效果的)<br>教程中是这么讲的,”because isHidden is either true or false, it has no animatable values between.”<br>上面代码还用到了backgroundColor,是不是颜色从一种到另一种,其中是带有值的过渡的,所以也是可行的。</p><h2 id="使用需要是weak等去除强引用？没必要！"><a href="#使用需要是weak等去除强引用？没必要！" class="headerlink" title="使用需要是weak等去除强引用？没必要！"></a>使用需要是weak等去除强引用？没必要！</h2><p>For the animations closure we don’t need to use [weak self] because there’s no risk of strong reference cycles here – the closures passed to animate(withDuration:) method will be used once then thrown away.</p><h1 id="UIViewPropertyAnimator-–-类似于withAnimation"><a href="#UIViewPropertyAnimator-–-类似于withAnimation" class="headerlink" title="UIViewPropertyAnimator – 类似于withAnimation"></a>UIViewPropertyAnimator – 类似于withAnimation</h1><p>不同于<code>UIView.animate</code>,因为感觉它只能针对这个<code>UIView</code>,而<code>UIViewPropertyAnimator</code>使用方式类似于<code>withAnimation</code>。<br>看一下例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redBox <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">64</span>, y: <span class="number">0</span>, width: <span class="number">128</span>, height: <span class="number">128</span>))</span><br><span class="line">redBox.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">redBox.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">redBox.center.y <span class="operator">=</span> view.center.y</span><br><span class="line">view.addSubview(redBox)</span><br><span class="line"></span><br><span class="line">animator <span class="operator">=</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">2</span>, curve: .easeInOut) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>, redBox] <span class="keyword">in</span></span><br><span class="line">    redBox.center.x <span class="operator">=</span> <span class="keyword">self</span>.view.frame.width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animator.startAnimation()</span><br></pre></td></tr></table></figure><p><img src="/Images/UIViewPropertyAnimator.gif" alt="UIViewPropertyAnimator"></p><h2 id="UIViewPropertyAnimator的addCompletion方法"><a href="#UIViewPropertyAnimator的addCompletion方法" class="headerlink" title="UIViewPropertyAnimator的addCompletion方法"></a>UIViewPropertyAnimator的addCompletion方法</h2><p>再增加点特效,存在过去和回来以及旋转的效果:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> redBox <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">64</span>, y: <span class="number">0</span>, width: <span class="number">128</span>, height: <span class="number">128</span>))</span><br><span class="line">redBox.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">redBox.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">redBox.center.y <span class="operator">=</span> view.center.y</span><br><span class="line">view.addSubview(redBox)</span><br><span class="line"></span><br><span class="line">animator <span class="operator">=</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">2</span>, curve: .easeInOut) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>, redBox] <span class="keyword">in</span></span><br><span class="line">    redBox.center.x <span class="operator">=</span> <span class="keyword">self</span>.view.frame.width</span><br><span class="line">    redBox.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(rotationAngle: <span class="type">CGFloat</span>.pi).scaledBy(x: <span class="number">0.001</span>, y: <span class="number">0.001</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animator.addCompletion &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> secondAnimator <span class="operator">=</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">2</span>, curve: .easeInOut) &#123;</span><br><span class="line">        redBox.center.x <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        redBox.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(rotationAngle: <span class="type">CGFloat</span>.pi <span class="operator">*</span> <span class="number">2</span>).scaledBy(x: <span class="number">1.0</span>, y: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    secondAnimator.startAnimation()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">animator.startAnimation()</span><br></pre></td></tr></table></figure><p><img src="/Images/UIViewPropertyAnimator2.gif" alt="UIViewPropertyAnimator"></p><h2 id="UIViewPropertyAnimator的fractionComplete属性-–-配合UISlider的使用"><a href="#UIViewPropertyAnimator的fractionComplete属性-–-配合UISlider的使用" class="headerlink" title="UIViewPropertyAnimator的fractionComplete属性 – 配合UISlider的使用"></a>UIViewPropertyAnimator的fractionComplete属性 – 配合UISlider的使用</h2><p><code>UIViewPropertyAnimator</code>的f<code>fractionComplete</code>属性是个<code>CGFloat</code>。<br>我们来使用UISlider来决定该动画的完成度(个人理解):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个UISlider</span></span><br><span class="line"><span class="keyword">let</span> slider <span class="operator">=</span> <span class="type">UISlider</span>()</span><br><span class="line">slider.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">view.addSubview(slider)</span><br><span class="line"></span><br><span class="line">slider.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: <span class="operator">-</span><span class="number">400</span>).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">slider.widthAnchor.constraint(equalTo: view.widthAnchor).isActive <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义该UISlider对应的划动事件</span></span><br><span class="line">slider.addTarget(<span class="keyword">self</span>, action: <span class="keyword">#selector</span>(sliderChanged), for: .valueChanged)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个box</span></span><br><span class="line"><span class="keyword">let</span> redBox <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">64</span>, y: <span class="number">0</span>, width: <span class="number">128</span>, height: <span class="number">128</span>))</span><br><span class="line">redBox.translatesAutoresizingMaskIntoConstraints <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">redBox.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">redBox.center.y <span class="operator">=</span> view.center.y</span><br><span class="line">view.addSubview(redBox)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用UIViewPropertyAnimator来定义动画</span></span><br><span class="line">animator <span class="operator">=</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">2</span>, curve: .easeInOut) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>, redBox] <span class="keyword">in</span></span><br><span class="line">    redBox.center.x <span class="operator">=</span> <span class="keyword">self</span>.view.frame.width</span><br><span class="line">    redBox.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(rotationAngle: <span class="type">CGFloat</span>.pi).scaledBy(x: <span class="number">0.001</span>, y: <span class="number">0.001</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以及该对应划动事件的具体执行方法</span></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">sliderChanged</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UISlider</span>) &#123;</span><br><span class="line">    animator.fractionComplete <span class="operator">=</span> <span class="type">CGFloat</span>(sender.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当滑动UISlider的时候会出现的效果:<br><img src="/Images/UIViewPropertyAnimator3.gif" alt="UIViewPropertyAnimator"></p><h2 id="UIViewPropertyAnimator的stopAnimation-withoutFinishing-Bool-方法"><a href="#UIViewPropertyAnimator的stopAnimation-withoutFinishing-Bool-方法" class="headerlink" title="UIViewPropertyAnimator的stopAnimation(withoutFinishing: Bool)方法"></a>UIViewPropertyAnimator的stopAnimation(withoutFinishing: Bool)方法</h2><p>即中止动画。</p><h2 id="实例–点击卡牌后产生翻转动画的效果"><a href="#实例–点击卡牌后产生翻转动画的效果" class="headerlink" title="实例–点击卡牌后产生翻转动画的效果"></a>实例–点击卡牌后产生翻转动画的效果</h2><p><img src="/Images/cardFlipping.gif" alt="CardFlipping"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span> &#123;</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">var</span> imageView: <span class="type">UIImageView</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> flipAnimator: <span class="type">UIViewPropertyAnimator</span>?</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;1Characters_back&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        view.addSubview((imageView))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> tapGesture <span class="operator">=</span> <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(imageViewTap))</span><br><span class="line">        </span><br><span class="line">        imageView.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">true</span> <span class="comment">// 允许用户交互</span></span><br><span class="line">        imageView.addGestureRecognizer(tapGesture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">imageViewTap</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="type">UITapGestureRecognizer</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        flipAnimator <span class="operator">=</span> <span class="type">UIViewPropertyAnimator</span>(duration: <span class="number">1</span>, curve: .linear) &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>, imageView] <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 这里防止用户反复点击产生反效果,而取消用户交互的功能</span></span><br><span class="line">            <span class="keyword">self</span>.imageView.isUserInteractionEnabled <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            <span class="type">UIView</span>.transition(with: <span class="keyword">self</span>.imageView, duration: <span class="number">1</span>, options: [.transitionFlipFromRight]) &#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.image <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;NinjaAdventure&quot;</span>)</span><br><span class="line">            &#125; <span class="comment">// UIView 就是 with参数中设置的self.imageView,而不是view,这点非常重要!</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        flipAnimator<span class="operator">?</span>.startAnimation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用到了UIView.transition功能,具体用法有:</p><ul><li><code>UIView.transition(with: UIView, duration: TimeInterval, options: UIView.AnimationOptions,animations: (() -&gt; Void)?))</code></li><li><code>UIView.transition(from: UIView, to: UIView, duration: Timeinterval)</code></li><li><code>UIView.transition(from: UIView, to: UIView, duration: TimeInterval, options: UIView.AnimationOptions)</code><br>三种使用的方法,稍有不同。第一种在上例中已经展现。后两种在一些情况下可以使用,因为不能像第一种一样设置with参数,所以不能特别指定是哪个view有动画,只能默认是整个view；如果在UICollectionView中的cell,cell中有一个占据整个篇幅的ImageView,那是可以使用后两种方法的。</li></ul><h1 id="CGAffineTransform"><a href="#CGAffineTransform" class="headerlink" title="CGAffineTransform"></a>CGAffineTransform</h1><p>任何的UIView都可以使用CGAffineTransform。</p><p>一般用法案例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">1</span>, delay: <span class="number">0</span>, usingSpringWithDamping: <span class="number">0.5</span>, initialSpringVelocity: <span class="number">5</span>, options: [], animations: &#123;</span><br><span class="line">    <span class="keyword">switch</span> <span class="keyword">self</span>.currentAnimation &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">self</span>.imageView.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(scaleX: <span class="number">2</span>, y: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">self</span>.imageView.transform <span class="operator">=</span> .identity</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个知识点:</p><ol><li>UIView.transform 可更改外形、大小、角度等;</li><li>UIView.transform &#x3D; .identity 即可恢复原状。</li></ol><p>CGAffineTransform还有的用法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位移</span></span><br><span class="line"><span class="keyword">self</span>.imageView.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(translationX: <span class="operator">-</span><span class="number">256</span>, y: <span class="operator">-</span><span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line"><span class="keyword">self</span>.imageView.transform <span class="operator">=</span> <span class="type">CGAffineTransform</span>(rotationAngle: <span class="type">CGFloat</span>.pi <span class="operator">*</span> <span class="number">3.0</span> <span class="operator">/</span> <span class="number">2.0</span>)</span><br><span class="line"><span class="comment">// 但要记住,它比较懒,怎么能最快到终点,就会选这个捷径,实际这个只逆时针转了90度</span></span><br></pre></td></tr></table></figure><h2 id="CGAffineTransform-identity"><a href="#CGAffineTransform-identity" class="headerlink" title="CGAffineTransform.identity"></a>CGAffineTransform.identity</h2><p>CGAffineTransform也有identity,作用是恢复到transform之前的状态。</p><h1 id="MapKit"><a href="#MapKit" class="headerlink" title="MapKit"></a>MapKit</h1><h2 id="MKMapView及其的delegate"><a href="#MKMapView及其的delegate" class="headerlink" title="MKMapView及其的delegate"></a>MKMapView及其的delegate</h2><p>在一个UIView中建立了一个MKMapView后,需要让UIView作为这个MKMapView的delegate的话,需要在storyboard中ctrl-drag这个MKMapView到UIView上面,就会出现让你选择delegate的情况,选择好了以后就可以了。</p><p>原文是这样写的:<br>Using the assistant editor, please create an outlet for your map view called mapView. You should also set your view controller to be the delegate of the map view by Ctrl-dragging from the map view to the orange and white view controller button just above the layout area. You will also need to add import MapKit to ViewController.swift so it understands what MKMapView is.<br>Note: If you don’t set the map’s delegate, the rest of this project won’t work too well.</p><h3 id="MKMapView的用例"><a href="#MKMapView的用例" class="headerlink" title="MKMapView的用例:"></a>MKMapView的用例:</h3><p>在storyboard上生成一个map kit view。 </p><h3 id="mapType-更改显示地图的样式"><a href="#mapType-更改显示地图的样式" class="headerlink" title="mapType 更改显示地图的样式"></a>mapType 更改显示地图的样式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @IBOutlet var mapView: MKMapView!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示卫星地图,还有其他的一些选择</span></span><br><span class="line">mapView.mapType <span class="operator">=</span> .satellite</span><br></pre></td></tr></table></figure><h2 id="MKAnnotation-–-protocol"><a href="#MKAnnotation-–-protocol" class="headerlink" title="MKAnnotation – protocol"></a>MKAnnotation – protocol</h2><p>在地图上显示图钉。<br>遵循MKAnnotation协议的必须是class,不能是struct！！！<br>遵循MKAnnotation协议的情况下,必须要有一个coordinate: CLLocationCoordinate2D的声明,如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Capital</span>: <span class="title class_">NSObject</span>, <span class="title class_">MKAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="comment">// 需要实现一个CLLocationCoordinate2D</span></span><br><span class="line">    <span class="keyword">var</span> coordinate: <span class="type">CLLocationCoordinate2D</span></span><br><span class="line">    <span class="keyword">var</span> info: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">coordinate</span>: <span class="type">CLLocationCoordinate2D</span>, <span class="params">info</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> title</span><br><span class="line">        <span class="keyword">self</span>.coordinate <span class="operator">=</span> coordinate</span><br><span class="line">        <span class="keyword">self</span>.info <span class="operator">=</span> info</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在viewDidLoad()中可以生成这个annotation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> london <span class="operator">=</span> <span class="type">Capital</span>(title: <span class="string">&quot;London&quot;</span>, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">51.507222</span>, longitude: <span class="operator">-</span><span class="number">0.1275</span>), info: <span class="string">&quot;Home to the 2012 Summer Olympics.&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> oslo <span class="operator">=</span> <span class="type">Capital</span>(title: <span class="string">&quot;Oslo&quot;</span>, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">59.95</span>, longitude: <span class="number">10.75</span>), info: <span class="string">&quot;Founded over a thousand years ago.&quot;</span>)</span><br></pre></td></tr></table></figure><p>随后在地图上显示这些annotation:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @IBOutlet var mapView: MKMapView!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一起添加:</span></span><br><span class="line"><span class="comment">// mapView.addAnnotations(&lt;#T##annotations: [MKAnnotation]##[MKAnnotation]#&gt;)</span></span><br><span class="line">mapView.addAnnotations([london, oslo])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者一个一个添加:</span></span><br><span class="line"><span class="comment">// mapView.addAnnotation(&lt;#T##annotation: MKAnnotation##MKAnnotation#&gt;)</span></span><br><span class="line">mapView.addAnnotation(london)</span><br><span class="line">mapView.addAnnotation(oslo)</span><br></pre></td></tr></table></figure><h3 id="func-mapView-mapView-MKMapView-viewFor-annotation-MKAnnotation-gt-MKAnnotationView"><a href="#func-mapView-mapView-MKMapView-viewFor-annotation-MKAnnotation-gt-MKAnnotationView" class="headerlink" title="func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -&gt; MKAnnotationView? {"></a>func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -&gt; MKAnnotationView? {</h3><blockquote><p><a href="https://www.hackingwithswift.com/read/16/3/annotations-and-accessory-views-mkpinannotationview">https://www.hackingwithswift.com/read/16/3/annotations-and-accessory-views-mkpinannotationview</a></p></blockquote><p>Every time the map needs to show an annotation, it calls a <strong>viewFor method</strong> on its delegate. We don’t implement that method right now, so the default red pin is used with nothing special.</p><p>但首先要让View遵循 <strong>MKPinAnnotationView protocol</strong> :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span>, <span class="title class_">MKMapViewDelegate</span> &#123;</span><br></pre></td></tr></table></figure><p>接下来就是完成func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -&gt; MKAnnotationView? {</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mapView</span>(<span class="keyword">_</span> <span class="params">mapView</span>: <span class="type">MKMapView</span>, <span class="params">viewFor</span> <span class="params">annotation</span>: <span class="type">MKAnnotation</span>) -&gt; <span class="type">MKAnnotationView</span>? &#123;</span><br><span class="line">    <span class="comment">// 1.If the annotation isn&#x27;t from a capital city, it must return nil so iOS uses a default view.</span></span><br><span class="line">    <span class="keyword">guard</span> annotation <span class="keyword">is</span> <span class="type">Capital</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.Define a reuse identifier. This is a string that will be used to ensure we reuse annotation views as much as possible.</span></span><br><span class="line">    <span class="keyword">let</span> identifier <span class="operator">=</span> <span class="string">&quot;Capital&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.Try to dequeue an annotation view from the map view&#x27;s pool of unused views.</span></span><br><span class="line">    <span class="keyword">var</span> annotationView <span class="operator">=</span> mapView.dequeueReusableAnnotationView(withIdentifier: identifier)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> annotationView <span class="operator">==</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 4.If it isn&#x27;t able to find a reusable view, create a new one using (MKPinAnnotationView is deprecated) and sets its canShowCallout property to true. This triggers the popup with the city name.</span></span><br><span class="line">        annotationView <span class="operator">=</span> <span class="type">MKMarkerAnnotationView</span>(annotation: annotation, reuseIdentifier: identifier)</span><br><span class="line">        annotationView<span class="operator">?</span>.canShowCallout <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. Create a new UIButton using the built-in .detailDisclosure type. This is a small blue &quot;i&quot; symbol with a circle around it.</span></span><br><span class="line">        <span class="comment">// we don&#x27;t need to use addTarget() to add an action to the button, because you&#x27;ll automatically be told by the map view using a calloutAccessoryControlTapped method.</span></span><br><span class="line">        <span class="keyword">let</span> btn <span class="operator">=</span> <span class="type">UIButton</span>(type: .detailDisclosure)</span><br><span class="line">        annotationView<span class="operator">?</span>.rightCalloutAccessoryView <span class="operator">=</span> btn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 6. If it can reuse a view, update that view to use a different annotation.</span></span><br><span class="line">        annotationView<span class="operator">?</span>.annotation <span class="operator">=</span> annotation</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> annotationView</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是每个annotation被点击后实现方法了:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calloutAccessoryControlTapped method can make the tapped button know to call it.</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">mapView</span>(<span class="keyword">_</span> <span class="params">mapView</span>: <span class="type">MKMapView</span>, <span class="params">annotationView</span> <span class="params">view</span>: <span class="type">MKAnnotationView</span>, <span class="params">calloutAccessoryControlTapped</span> <span class="params">control</span>: <span class="type">UIControl</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> capital <span class="operator">=</span> view.annotation <span class="keyword">as?</span> <span class="type">Capital</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> placeName <span class="operator">=</span> capital.title</span><br><span class="line">    <span class="keyword">let</span> placeInfo <span class="operator">=</span> capital.info</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: placeName, message: placeInfo, preferredStyle: .alert)</span><br><span class="line">    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">    present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果是这样的:<br><img src="/Images/annotationButtonTapped.gif" alt="annotationButtonTapped"></p><h1 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h1><h2 id="Timer-scheduledTimer-timeInterval-lt-T-TimeInterval-gt-target-lt-T-Any-gt-selector-lt-T-Selector-gt-userInfo-lt-T-Any-gt-repeats-lt-T-Bool-gt"><a href="#Timer-scheduledTimer-timeInterval-lt-T-TimeInterval-gt-target-lt-T-Any-gt-selector-lt-T-Selector-gt-userInfo-lt-T-Any-gt-repeats-lt-T-Bool-gt" class="headerlink" title="Timer.scheduledTimer(timeInterval: &lt;#T##TimeInterval#&gt;, target: &lt;#T##Any#&gt;, selector: &lt;#T##Selector#&gt;, userInfo: &lt;#T##Any?#&gt;, repeats: &lt;#T##Bool#&gt;)"></a>Timer.scheduledTimer(timeInterval: &lt;#T##TimeInterval#&gt;, target: &lt;#T##Any#&gt;, selector: &lt;#T##Selector#&gt;, userInfo: &lt;#T##Any?#&gt;, repeats: &lt;#T##Bool#&gt;)</h2><p>多少个时间单位内(timeInterval), 执行什么代码(selector), 是否重复执行(repeats)。<br>After creating a Timer, it should be created using Timer.scheduledTimer() method to activate it.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">0.35</span>, target: <span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(createEnemy), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h2 id="invalidate-–-Timer-scheduledTimer的停止"><a href="#invalidate-–-Timer-scheduledTimer的停止" class="headerlink" title="invalidate() – Timer.scheduledTimer的停止"></a>invalidate() – Timer.scheduledTimer的停止</h2><p>让一个计时器停止:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var gameTimer: Timer?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gameTimer = Timer.scheduledTimer(timeInterval: 0.35, target: self, selector: #selector(createEnemy), userInfo: nil, repeats: true)</span></span><br><span class="line"></span><br><span class="line">gameTimer<span class="operator">?</span>.invalidate()</span><br><span class="line">gameTimer <span class="operator">=</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m inside the viewDidLoad() method!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// &quot;1 2 3 4 5\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, separator: <span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;1-2-3-4-5\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Some message&quot;</span>, terminator: <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Some message&quot;</span></span><br></pre></td></tr></table></figure><h2 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h2><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><p>两个参数,前面的条件不满足或是false,则显示预设的错误信息,并让测试时的程序崩溃。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="number">1</span> <span class="operator">==</span> <span class="number">1</span>, <span class="string">&quot;Maths failure!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="breakpoints"><a href="#breakpoints" class="headerlink" title="breakpoints"></a>breakpoints</h2><ul><li><strong>Fn+F6</strong> – 到breakpoint处时,一行一行地执行</li><li><strong>Ctrl+Cmd+Y</strong> – 执行到下一个breakpoint</li></ul><h3 id="给Breakpoint加上条件"><a href="#给Breakpoint加上条件" class="headerlink" title="给Breakpoint加上条件"></a>给Breakpoint加上条件</h3><p>例如在循环中每十次进行一次breakpoint:<br>对着设定的breakpoint右键,跳出菜单中选择”edit breakpoint”,再跳出的菜单:<br><img src="/Images/editBreakpoint.png" alt="editBreakpoint"><br>在Condition中输入”i % 10 &#x3D;&#x3D; 0”即可。</p><h3 id="Exception-Breakpoint"><a href="#Exception-Breakpoint" class="headerlink" title="Exception Breakpoint"></a>Exception Breakpoint</h3><p>Exception Breakpoint will be automatically triggered when an exception is thrown. Exceptions are errors that aren’t handled, and will cause your code to crash. With breakpoints, you can say “pause execution as soon as an exception is thrown,” so that you can examine your program state and see what the problem is.</p><p>Cmd+8 调出“Show the Breakpoint navigator”,左下角按”+”按钮,调出如下菜单,选择”Exception Breakpoint”:<br><img src="/Images/exceptionBreakpoint.png" alt="Exception Breakpoint"><br>进行必要的设置:<br><img src="/image/../Images/conceptionBreakpointDetail.png" alt="conceptionBreakpointDetail"><br>The next time your code hits a fatal problem, the exception breakpoint will trigger and you can take action.</p><p>下面的图就是当出现错误的情况时,会出现 NSException:<br><img src="/Images/NSException.png" alt="NSException"></p><h2 id="lldb窗口"><a href="#lldb窗口" class="headerlink" title="lldb窗口"></a>lldb窗口</h2><p>LLDB is the default debugger in Xcode on macOS and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator.</p><p>在运行project时,可以在菜单栏 View &gt; Debug Area &gt; Activate Console, 可以看到下面的lldb窗口:<br><img src="/Images/lldb.png" alt="lldb"></p><p>命令行:<br>p – 同print,比如要打印变量i,”p i”即可。</p><h2 id="View-Debugging"><a href="#View-Debugging" class="headerlink" title="View Debugging"></a>View Debugging</h2><p>在运行项目后,在代码页面, 菜单栏的 Debug -&gt; View Debugging -&gt; Capture View Hierarchy 。<br>如下图:</p><p><img src="/Images/viewDebugging.gif" alt="ViewDebugging"></p><p>Here’s the clever part: if you click and drag inside the hierarchy display, you’ll see you’re actually viewing a 3D representation of your view, which means you can look behind the layers to see what else is there. The hierarchy automatically puts some depth between each of its views, so they appear to pop off the canvas as you rotate them.</p><p>This debug mode is perfect for times when you know you’ve placed your view but for some reason can’t see it – often you’ll find the view is behind something else by accident.</p><p>还可以使用下图中打红圈的快捷键打开 View Debugging:<br><img src="/Images/viewDebuggingButton.png" alt="ViewDebuggingButton"></p><h1 id="CADisplayLink"><a href="#CADisplayLink" class="headerlink" title="CADisplayLink"></a>CADisplayLink</h1><blockquote><p><a href="https://www.hackingwithswift.com/example-code/system/how-to-synchronize-code-to-drawing-using-cadisplaylink">https://www.hackingwithswift.com/example-code/system/how-to-synchronize-code-to-drawing-using-cadisplaylink</a><br><a href="https://www.jianshu.com/p/5e8d783d377a">https://www.jianshu.com/p/5e8d783d377a</a></p></blockquote><p>CADisplayLink是一个能让我们以和屏幕刷新率相同的频率将内容画到屏幕上的定时器。<br>我们在应用中创建一个新的 CADisplayLink 对象，把它添加到一个runloop中，并给它提供一个 target 和 selector 在屏幕刷新的时候调用。<br>CADisplayLink比NSTimer好的地方是,后者会有延迟,而CADisplayLink的好处是,我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> displayLink <span class="operator">=</span> <span class="type">CADisplayLink</span>(target: <span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(createEnemy))</span><br><span class="line">displayLink.preferredFrameRateRange <span class="operator">=</span> <span class="type">CAFrameRateRange</span>(minimum: <span class="number">1</span>, maximum: <span class="number">2</span>)</span><br><span class="line">displayLink.add(to: .current, forMode: .common)</span><br></pre></td></tr></table></figure><p>代码在Project17上跑的通,但有些疑问,为什么CAFrameRateRange(minimum: 0.5, maximum: 0.5)的时候就会疯狂执行,而数值大于1以后,就会正常一些。</p><p>这个模块,以后要做动画游戏的时候需要好好研究一下。<br>笔记待后续补充。</p><h1 id="info-plist"><a href="#info-plist" class="headerlink" title="info.plist"></a>info.plist</h1><p>plist是property list的缩写,它包含了app、插件(extensions)的元数据(metadata),这些是关于:what language is it, what version number is it, and so on。</p><h1 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h1><h2 id="safari-extensions"><a href="#safari-extensions" class="headerlink" title="safari extensions"></a>safari extensions</h2><blockquote><p><a href="https://www.hackingwithswift.com/100">https://www.hackingwithswift.com/100</a> Day67-69</p></blockquote><p>p.s.(2023-1-28)这章节的内容实在是太乱了,新东西太多,后续还要再理一下,如果确实要写extension的话,最好结合上述网页上的实例再看。</p><p>safari extensions必须要在safari的action menu中才能启动,类似于:<br><img src="/Images/safariExtension.gif" alt="safariExtension"><br>这个extension是植入到Safari中的,它需要safari才会有用,而不是像其他程序一样可以独立运行。</p><p>生成一个在原有项目下的extension:<br>Go to the File menu and choose New &gt; Target. When you’re asked to choose a template, select iOS &gt; Application Extension &gt; Action Extension, then click Next. For the name just call it Extension(or other name whatever you want), make sure Action Type is set to “Presents User Interface”, then click Finish.<br>这样就在一个project中建立了一个extension,而我们给其取名”Extension”,最后我们在sfari的action menu中可以看到一个Extension的可点击项,上面图像中可以看到。</p><p>safari中就可以运行extension,安全性在哪里？<br>实际上,你的extension与safari是不会通信的,因为系统安全原因,而在这其中,iOS起到了一个中间桥梁的作用,iOS在其中安全地传递数据。</p><p>extensionContext:<br>母程序(parent app)就比如说你在safari里做了一个插件,那么这个safari就是母程序,插件就是extension。<br>当我们的插件被建立后,extensionContext是用来让我们控制与母程序交互的东西。</p><p>inputItems:<br>extensionContext?.inputItems是一个存有数据的数组,该数据是母程序发送给插件使用的。我们一般只关心第一个item,所以会写成extensionContext?.inputItems.first。</p><p>NSItemProvider:<br>母程序发送给我们的数据都被包装成了一个个NSItemProvider。我们的程序把所有的数组数据中的第一个取出,而这个被取出的数据应当是一个NSItemProvider。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> inputItem <span class="operator">=</span> extensionContext<span class="operator">?</span>.inputItems.first <span class="keyword">as?</span> <span class="type">NSExtensionItem</span> &#123;</span><br></pre></td></tr></table></figure><p>接下来我们把inputItem中的所有attachments,只取出第一个attachment,代码就是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> itemProvider <span class="operator">=</span> inputItem.attachments<span class="operator">?</span>.first &#123;</span><br></pre></td></tr></table></figure><p>合起来的代码就是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> inputItem <span class="operator">=</span> extensionContext<span class="operator">?</span>.inputItems.first <span class="keyword">as?</span> <span class="type">NSExtensionItem</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> itemProvider <span class="operator">=</span> inputItem.attachments<span class="operator">?</span>.first &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadItem(forTypeIdentifier: )<br>loadItem(forTypeIdentifier: )是要求数据提供者真正地去提供这个item给我们。因为它使用到了一个trailing closure,所以执行的是异步程序，这个方法会持续执行,这是因为有时候这个item提供者可能忙于载入或者发送数据。在这个trailing closure中,我们需要使用到 [weak self]去避免强引用,此外,我们还需要接受两个参数,第一个是item提供者给我们的一个dictionary,另一个是发生的任何error。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">itemProvider.loadItem(forTypeIdentifier: kUTTypePropertyList <span class="keyword">as</span> <span class="type">String</span>) &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (dict, error) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// do stuff!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先要说一下的是,在Action.js中的代码中有一段:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// run及其代码的意思是:</span></span><br><span class="line"><span class="comment">// 告知iOS这个JavaScript已经预处理完毕,把这个dictionary(里面的key分别是&quot;URL&quot;和&quot;title&quot;以及对应的值)给extension吧</span></span><br><span class="line"><span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">    parameters.<span class="title function_">completionFunction</span>(&#123; <span class="string">&quot;URL&quot;</span>: <span class="variable language_">document</span>.<span class="property">URL</span>, <span class="string">&quot;title&quot;</span>: <span class="variable language_">document</span>.<span class="property">title</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadItem的trailing closure接收到这个dictionary并进行处理,这也是其是异步方法的愿意。<br>&#x2F;&#x2F; do stuff中的代码依次是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> itemDictionary <span class="operator">=</span> dict <span class="keyword">as?</span> <span class="type">NSDictionary</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br></pre></td></tr></table></figure><p>NSDictionary是一个对我们来说是新的数据类型,但它来自旧时代的iOS代码,就把它看作是一个Swift中的dictionary吧。现在更多使用的是modern Swift dictionaries,而非NSDictionary。但这里NSDictionary是与插件配合使用的。<br>打印了一下上面的itemDictionary:<br><img src="/Images/NSDictionary.png" alt="NSDictionary"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> javaScriptValues <span class="operator">=</span> itemDictionary[<span class="type">NSExtensionJavaScriptPreprocessingResultsKey</span>] <span class="keyword">as?</span> <span class="type">NSDictionary</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br></pre></td></tr></table></figure><p>这行代码中的key为NSExtensionJavaScriptPreprocessingResultsKey,这是从JavaScript中传递过来的数据的key。</p><p>如果你打印上面javaScriptValues的值,你会看到类似:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">URL</span> <span class="operator">=</span> <span class="string">&quot;https://www.apple.com/retail/code/&quot;</span>;</span><br><span class="line">    title <span class="operator">=</span> <span class="string">&quot;Apple Retail Store - Hour of Code Workshop&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就可以设置插件中的这两个后续我们要使用的属性了:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="operator">?</span>.pageTitle <span class="operator">=</span> javaScriptValues[<span class="string">&quot;title&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">self</span><span class="operator">?</span>.pageURL <span class="operator">=</span> javaScriptValues[<span class="string">&quot;URL&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>完成代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> inputItem <span class="operator">=</span> extensionContext<span class="operator">?</span>.inputItems.first <span class="keyword">as?</span> <span class="type">NSExtensionItem</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> itemProvider <span class="operator">=</span> inputItem.attachments<span class="operator">?</span>.first &#123;</span><br><span class="line">        itemProvider.loadItem(forTypeIdentifier: kUTTypePropertyList <span class="keyword">as</span> <span class="type">String</span>) &#123;[<span class="keyword">weak</span> <span class="keyword">self</span>] (dict, error) <span class="keyword">in</span> </span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> itemDictionary <span class="operator">=</span> dict <span class="keyword">as?</span> <span class="type">NSDictionary</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> javaScriptValues <span class="operator">=</span> itemDictionary[<span class="type">NSExtensionJavaScriptPreprocessingResultsKey</span>] <span class="keyword">as?</span> <span class="type">NSDictionary</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.pageTitle <span class="operator">=</span> javaScriptValues[<span class="string">&quot;title&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.pageURL <span class="operator">=</span> javaScriptValues[<span class="string">&quot;URL&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.title <span class="operator">=</span> <span class="keyword">self</span><span class="operator">?</span>.pageTitle</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; do stuff中的代码是经过简单编写的,但建议自己去建立一个extension,看一下默认模版中是怎么遍历所有的items和providers,并最终找到第一张图片的。</p><p>info.plist内的设置:<br>先看一下设置后的info.plist内部的构成:<br><img src="/Images/NSExtensionOfInfoPlist.png" alt="NSExtensionOfInfoPlist"><br>有一个Information Property List。因为我们这里是一个插件,所以该list里面有一个NSExtension。<br>这个NSExtension里面一般有三样东西:<br>NSExtensionAttributes, NSExtensionMainStoryboard and NSExtensionPointIdentifier.<br>这里我们只关心会改变我们的插件行为的NSExtensionAttributes。<br>我们设置的目的是:<br>一是设置接收的是什么数据,二是设置后期要执行的语言类型及具体文件名。<br>在NSExtensionAttributes下面有一个NSExtensionActivationRule,Type是”String”,值是”TRUEPREDICATE”,把它修改Type为Dictionary,在里面“+”一个item,名字为”NSExtensionActivationSupportsWebPageWithMaxCount”,Type为String,值设为1。把这个值加到新设的Dictionary里面,是因为我们只想要收到网页数据(web pages),而对images或其他数据类型不感兴趣。<br>接下来选择NSExtensionAttributes,在里面添加名为”NSExtensionJavaScriptPreprocessingFile”,Type为”String”,值为”Action”。这样设置,就是当插件被called的时候,我们需要运行JavaScript的预处理文件,文件名为Action.js。这样需要注意,这里你设置的值是”Action”而不是”Action.js”,因为iOS会帮我们把.js加上去的。</p><p>既然在info.plist中已经设置了要执行的”Action.js”文件,那么我们就要创建它:<br>Right-click on your extension’s Info.plist file and choose New File. When you’re asked what template you want, choose iOS &gt; Other &gt; Empty, then name it Action.js, and put this text into it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Action</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Action</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run及其代码的意思是:</span></span><br><span class="line"><span class="comment">// 告知iOS这个JavaScript已经预处理完毕,把这个dictionary(里面的key分别是&quot;URL&quot;和&quot;title&quot;以及对应的值)给extension吧</span></span><br><span class="line"><span class="attr">run</span>: <span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">    parameters.<span class="title function_">completionFunction</span>(&#123; <span class="string">&quot;URL&quot;</span>: <span class="variable language_">document</span>.<span class="property">URL</span>, <span class="string">&quot;title&quot;</span>: <span class="variable language_">document</span>.<span class="property">title</span> &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">finalize</span>: <span class="keyword">function</span>(<span class="params">parameters</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> customJavaScript = parameters[<span class="string">&quot;customJavaScript&quot;</span>];</span><br><span class="line">    <span class="built_in">eval</span>(customJavaScript);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ExtensionPreprocessingJS</span> = <span class="keyword">new</span> <span class="title class_">Action</span></span><br></pre></td></tr></table></figure><p>There are two functions: run() and finalize(). The first is called before your extension is run, and the other is called after.<br>Apple expects the code to be exactly like this, so you shouldn’t change it other than to fill in the run() and finalize() functions.</p><p>设置到这里,我们在Project Navigator中可以看到的extenison是这样的:<br><img src="/Images/ExtensionFromProjectNavigator.png" alt="ExtensionFromProjectNavigator"><br>此外,在Build Phases的Compile Sources和Copy Bundle Resources中,应该是如上图这样,Action.js是在Copy Bundle Resources中,而不是在Compile Sources中。</p><p>最终的Action.js是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="type">Action</span> <span class="operator">=</span> function() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Action</span>.prototype <span class="operator">=</span> &#123;</span><br><span class="line">    </span><br><span class="line">run: function(parameters) &#123;</span><br><span class="line">    <span class="comment">// tell iOS the JavaScript has finished preprocessing, and give this data dictionary to the extension.</span></span><br><span class="line">    <span class="comment">// The data that is being sent has the keys &quot;URL&quot; and &quot;title&quot;, with the values being the page URL and page title.</span></span><br><span class="line">    parameters.completionFunction(&#123; <span class="string">&quot;URL&quot;</span>: document.<span class="type">URL</span>, <span class="string">&quot;title&quot;</span>: document.title &#125;);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">    </span><br><span class="line">finalize: function(parameters) &#123;</span><br><span class="line">    <span class="keyword">var</span> customJavaScript <span class="operator">=</span> parameters[<span class="string">&quot;customJavaScript&quot;</span>];</span><br><span class="line">    eval(customJavaScript);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">ExtensionPreprocessingJS</span> <span class="operator">=</span> new <span class="type">Action</span></span><br></pre></td></tr></table></figure><p>在MainInterface.storyboard上建立一个UITextNode,让其auto layout,随后ctrl+drag让其在ActionViewController上对应属性:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBOutlet</span> <span class="keyword">var</span> script: <span class="type">UITextView</span>!</span><br></pre></td></tr></table></figure><p>在extension界面的右上角加一个执行的按钮:(注意extension界面只有在被调用到插件功能的时候才会启用)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationItem.rightBarButtonItem <span class="operator">=</span> <span class="type">UIBarButtonItem</span>(barButtonSystemItem: .done, target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(done))</span><br></pre></td></tr></table></figure><p>此时写下要执行的objc的方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">done</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> item <span class="operator">=</span> <span class="type">NSExtensionItem</span>()</span><br><span class="line">    <span class="comment">// 注意看在Action.js的finalize方法中定义到了</span></span><br><span class="line">    <span class="comment">// var customJavaScript = parameters[&quot;customJavaScript&quot;];</span></span><br><span class="line">    <span class="keyword">let</span> argument: <span class="type">NSDictionary</span> <span class="operator">=</span> [<span class="string">&quot;customJavaScript&quot;</span>: script.text]</span><br><span class="line">    <span class="keyword">let</span> webDictionary: <span class="type">NSDictionary</span> <span class="operator">=</span> [<span class="type">NSExtensionJavaScriptFinalizeArgumentKey</span>: argument]</span><br><span class="line">    <span class="keyword">let</span> customJavaScript <span class="operator">=</span> <span class="type">NSItemProvider</span>(item: webDictionary, typeIdentifier: kUTTypePropertyList <span class="keyword">as</span> <span class="type">String</span>)</span><br><span class="line">    item.attachments <span class="operator">=</span> [customJavaScript]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// completeRequest(returningItems:)的调用会造成插件被关闭,并返回母程序,而且可以传回母程序任何我们定义的items。</span></span><br><span class="line">    extensionContext<span class="operator">?</span>.completeRequest(returningItems: [item])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以观察一下:<br>1、之前我们从safari接收到的是一个含有NSExtensionItem元素的列表,而这里extensionContext?.completeRequest(returningItems: [item]),最终传回safari的也是一个含有NSExtensionItem元素的列表。<br>2、我们朝NSDictionary传递的key是NSExtensionJavaScriptFinalizeArgumentKey,对应的是Action.js的finalize方法,而之前我们一开始从safari取得的key是NSExtensionJavaScriptPreprocessingResultsKey,对应的是Action.js的run方法。<br>这样就能说得通了。I realize that seems like far more effort than it ought to be, but it’s really just the reverse of what we are doing inside viewDidLoad().</p><h1 id="NotificationCenter"><a href="#NotificationCenter" class="headerlink" title="NotificationCenter"></a>NotificationCenter</h1><p>在我们的scenes背后,当有”键盘事件”、”应用进入后台”以及一些其他的事件,iOS会持续地向我们发出notification。我们可以对一些特定的notification加入observer进行回应,也可以进行数据的传递。</p><h2 id="Fixing-the-keyboard"><a href="#Fixing-the-keyboard" class="headerlink" title="Fixing the keyboard"></a>Fixing the keyboard</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/19/7/fixing-the-keyboard-notificationcenter">https://www.hackingwithswift.com/read/19/7/fixing-the-keyboard-notificationcenter</a></p></blockquote><p>iOS上会有一个keyboard的问题:<br>比如我们现在有一个可以输入多行的UITextView:<br><img src="/Images/KeyboardNotificationCenter_0.png" alt="KeyboardNotificationCenter"><br>我们可以看出这个UITextView占据屏幕的大小。<br>如果我们执行,并调出键盘来一行行的打字,当打的字即将超过键盘所在的位置的时候,会发生什么事情呢？<br><img src="/Images/KeyboardNotificationCenter_1.gif" alt="KeyboardNotificationCenter"><br>为什么会发生这样的事情?<br>因为当你调出keyboard的时候,这个textView的可使用面积没有自动去调整,仍旧那么大,就会出现打的字出现下键盘下方并被遮盖的情况。</p><h3 id="keyboardWillHideNotification-x2F-keyboardWillChangeFrameNotification"><a href="#keyboardWillHideNotification-x2F-keyboardWillChangeFrameNotification" class="headerlink" title="keyboardWillHideNotification &#x2F; keyboardWillChangeFrameNotification"></a>keyboardWillHideNotification &#x2F; keyboardWillChangeFrameNotification</h3><p>当键盘隐藏不用的时候,系统会发出keyboardWillHideNotification。<br>当键盘隐藏不用、键盘状态发生改变(比如出现,或者屏幕从portrait专程landscape等等),系统都会发出keyboardWillChangeFrameNotification。<br>看上去keyboardWillChangeFrameNotification已经涵盖了keyboardWillHideNotification,但有时候一些奇怪的场景还是需要用到keyboardWillHideNotification的(现在还没有碰到过)。</p><p>添加对这两个键盘事件的观察:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notificationCenter <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">notificationCenter.addObserver(<span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(adjustForKeyboard), name: <span class="type">UIResponder</span>.keyboardWillHideNotification, object: <span class="literal">nil</span>)</span><br><span class="line">notificationCenter.addObserver(<span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(adjustForKeyboard), name: <span class="type">UIResponder</span>.keyboardWillChangeFrameNotification, object: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>对应的adjustForKeyboard方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @IBOutlet var textView: UITextView!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">adjustForKeyboard</span>(<span class="params">notificaiton</span>: <span class="type">Notification</span>) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> keyboardValue <span class="operator">=</span> notification.userInfo<span class="operator">?</span>[<span class="type">UIResponder</span>.keyboardFrameEndUserInfoKey] <span class="keyword">as?</span> <span class="type">NSValue</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> keyboardScreenEndFrame <span class="operator">=</span> keyboardValue.cgRectValue</span><br><span class="line">    <span class="keyword">let</span> keyboardViewEndFrame <span class="operator">=</span> view.convert(keyboardScreenEndFrame, from: view.window)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假如keyboard隐藏了,则textView的contentInset正常,即四周不做任何调整</span></span><br><span class="line">    <span class="keyword">if</span> notification.name <span class="operator">==</span> <span class="type">UIResponder</span>.keyboardWillHideNotification &#123;</span><br><span class="line">        <span class="comment">// textView.contentInset可以理解为是textView的padding,感觉不是margin</span></span><br><span class="line">        textView.contentInset <span class="operator">=</span> .zero</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此时一定是keyboard在使用的情况</span></span><br><span class="line">        textView.contentInset <span class="operator">=</span> <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, left: <span class="number">0</span>, bottom: keyboardViewEndFrame.height <span class="operator">-</span> view.safeAreaInsets.bottom, right: <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 这里bottom为何是keyboardViewEndFrame.height - view.safeAreaInsets？</span></span><br><span class="line">        <span class="comment">// 因为经答应两个数值可以知道,keyboardViewEndFrame.height是从屏幕最下方开始的,包括了view.safeAreaInsets.bottom,</span></span><br><span class="line">        <span class="comment">// 而我们的textView开始设置的时候是不包含safeArea的,所以要减掉safeArea的范围。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再对scroll indicator进行设置:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">adjustForKeyboard</span>() &#123;</span><br><span class="line">    <span class="comment">// 省略上面的代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        下面这三行代码是教程中加上去的,但操作下来感觉没什么用啊</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// Scroll indicator insets control how big the scroll bars are relative to their view.</span></span><br><span class="line">    textView.scrollIndicatorInsets <span class="operator">=</span> textView.contentInset</span><br><span class="line">    <span class="comment">// textView.selectedRange应该理解为是可选择或可使用的范围</span></span><br><span class="line">    <span class="keyword">let</span> selectedRange <span class="operator">=</span> textView.selectedRange</span><br><span class="line">    <span class="comment">// 设置textView可滚动的范围</span></span><br><span class="line">    textView.scrollRangeToVisible(selectedRange)</span><br></pre></td></tr></table></figure><h2 id="NotificationCenter的post的传输自制的提醒"><a href="#NotificationCenter的post的传输自制的提醒" class="headerlink" title="NotificationCenter的post的传输自制的提醒"></a>NotificationCenter的post的传输自制的提醒</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notificationCenter <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">notificationCenter.post(name: <span class="type">Notification</span>.<span class="type">Name</span>(<span class="string">&quot;UserLoggedIn&quot;</span>), object: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>If no other part of your app has subscribed to receive that notification, nothing will happen. But you can make any other objects subscribe to that notification – it could be one thing, or ten things, it doesn’t matter. This is the essence of loose coupling: you’re transmitting the event to everyone, with no direct knowledge of who your receivers are.</p><h2 id="NotificationCenter的UIApplication-willResignActiveNotification事件"><a href="#NotificationCenter的UIApplication-willResignActiveNotification事件" class="headerlink" title="NotificationCenter的UIApplication.willResignActiveNotification事件"></a>NotificationCenter的UIApplication.willResignActiveNotification事件</h2><p>当整个程序不再是active状态(即将进入background)之前会发生的事件。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notificationCenter <span class="operator">=</span> <span class="type">NotificationCenter</span>.default</span><br><span class="line">notificationCenter.addObserver(<span class="keyword">self</span>, selector: <span class="keyword">#selector</span>(saveSecretMessage), name: <span class="type">UIApplication</span>.willResignActiveNotification, object: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h1 id="UserNotifications-–-UN"><a href="#UserNotifications-–-UN" class="headerlink" title="UserNotifications – UN"></a>UserNotifications – UN</h1><p>看下来,UserNotifications就是在程序中设置好,取得用户授权后,在固定时间点或此后的一段时间后,给用户的手机系统发送提醒信息的一个模块。</p><p>If you want to use the UserNotifications framework, you should import it:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UserNotifications</span><br></pre></td></tr></table></figure><h2 id="UNUserNotificationCenter-requestAuthorization-–-获取用户授权"><a href="#UNUserNotificationCenter-requestAuthorization-–-获取用户授权" class="headerlink" title="UNUserNotificationCenter.requestAuthorization – 获取用户授权"></a>UNUserNotificationCenter.requestAuthorization – 获取用户授权</h2><p>给用户发送提醒信息的权限,需要用户授权:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"></span><br><span class="line"><span class="comment">// options表示同意授权的权限包含: 提醒/app上标/声音 这三项</span></span><br><span class="line"><span class="comment">// granted是一个Boolean</span></span><br><span class="line">center.requestAuthorization(options: [.alert, .badge, .sound]) &#123; (granted, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> granted &#123;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳出来的是:<br><img src="/Images/requestAuthorization.png" alt="requestAuthorization"></p><h2 id="UNNotificationRequest-identifier-content-trigger"><a href="#UNNotificationRequest-identifier-content-trigger" class="headerlink" title="UNNotificationRequest(identifier:, content:, trigger:)"></a>UNNotificationRequest(identifier:, content:, trigger:)</h2><p>下面的代码设置的是TimeInterval的通知方式(<strong>UNTimeIntervalNotificationTrigger</strong>),5秒钟后,给系统发送通知信息,告知content中的内容:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"></span><br><span class="line"><span class="comment">// UNNotificationRequest的content部分</span></span><br><span class="line"><span class="keyword">let</span> content <span class="operator">=</span> <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">content.title <span class="operator">=</span> <span class="string">&quot;Late wake up call&quot;</span></span><br><span class="line">content.body <span class="operator">=</span> <span class="string">&quot;The early bird catches the worm, but the second mouse gets the cheese.&quot;</span></span><br><span class="line"><span class="comment">// -- to attach custom actions</span></span><br><span class="line">content.categoryIdentifier <span class="operator">=</span> <span class="string">&quot;alarm&quot;</span></span><br><span class="line"><span class="comment">// -- to attach custom data to the notification</span></span><br><span class="line">content.userInfo <span class="operator">=</span> [<span class="string">&quot;customData&quot;</span>: <span class="string">&quot;fizzbuzz&quot;</span>]</span><br><span class="line"><span class="comment">// -- to specify a sound</span></span><br><span class="line">content.sound <span class="operator">=</span> <span class="type">UNNotificationSound</span>.default</span><br><span class="line"></span><br><span class="line"><span class="comment">// UNNotificationRequest的trigger部分</span></span><br><span class="line"><span class="keyword">let</span> trigger <span class="operator">=</span> <span class="type">UNTimeIntervalNotificationTrigger</span>(timeInterval: <span class="number">5</span>, repeats: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> request <span class="operator">=</span> <span class="type">UNNotificationRequest</span>(identifier: <span class="type">UUID</span>().uuidString, content: content, trigger: trigger)</span><br><span class="line">center.add(request)</span><br></pre></td></tr></table></figure><p>也可以设置成Calendar的通知方式,每天10:30发送: (<strong>UNCalendarNotificationTrigger</strong>)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"></span><br><span class="line"><span class="comment">// cancel future scheduled notifications, to start over</span></span><br><span class="line"><span class="comment">// 若再次启动的话,需要删除之前悬停着的提醒设定</span></span><br><span class="line">center.removeAllPendingNotificationRequests()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> content <span class="operator">=</span> <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">content.title <span class="operator">=</span> <span class="string">&quot;Late wake up call&quot;</span></span><br><span class="line">content.body <span class="operator">=</span> <span class="string">&quot;The early bird catches the worm, but the second mouse gets the cheese.&quot;</span></span><br><span class="line"><span class="comment">// content.categoryIdentifier指你可以在notification中加入自定义的action,</span></span><br><span class="line"><span class="comment">// 下面会用到的UNNotificationCategory(identifier:, actions: [], intentIdentifiers: [])的identifier必须对应指定是&quot;alarm&quot;</span></span><br><span class="line">content.categoryIdentifier <span class="operator">=</span> <span class="string">&quot;alarm&quot;</span></span><br><span class="line"><span class="comment">// content.userInfo指你可以在notification中加入自定义的数据,</span></span><br><span class="line">content.userInfo <span class="operator">=</span> [<span class="string">&quot;customData&quot;</span>: <span class="string">&quot;fizzbuzz&quot;</span>]</span><br><span class="line">content.sound <span class="operator">=</span> <span class="type">UNNotificationSound</span>.default</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateComponents <span class="operator">=</span> <span class="type">DateComponents</span>()</span><br><span class="line">dateComponents.hour <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">dateComponents.minute <span class="operator">=</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> trigger <span class="operator">=</span> <span class="type">UNCalendarNotificationTrigger</span>(dateMatching: dateComponents, repeats: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的identifier的指定(虽然在这个例子中可有可无),但它可以让你在之后 更新(update) 或 移除(remove) 提醒。</span></span><br><span class="line"><span class="comment">// 你也可以通过 center.removeAllPendingNotificationRequests() 来移除 等待的(pending) 的提醒。</span></span><br><span class="line"><span class="keyword">let</span> request <span class="operator">=</span> <span class="type">UNNotificationRequest</span>(identifier: <span class="type">UUID</span>().uuidString, content: content, trigger: trigger)</span><br><span class="line">center.add(request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以设置一个 地理围栏(geofence),它可以基于你的地理位置来发动(trigger)通知提醒。</p><p>五秒钟后发送是这样的:<br><img src="/images/UNNotificationRequest.gif" alt="UNNotificationRequest"></p><h2 id="Acting-on-responses-–-根据用户点击选项来采取行动"><a href="#Acting-on-responses-–-根据用户点击选项来采取行动" class="headerlink" title="Acting on responses – 根据用户点击选项来采取行动"></a>Acting on responses – 根据用户点击选项来采取行动</h2><blockquote><p><a href="https://www.hackingwithswift.com/read/21/3/acting-on-responses">https://www.hackingwithswift.com/read/21/3/acting-on-responses</a></p></blockquote><p><strong>UNNotificationAction</strong> <strong>UNNotificationCategory</strong><br>使用UNNotificationAction和UNNotificationCategory,你可以针对跳出的提醒及用户的反应做出进一步的回应。<br>UNNotificationCategory对应的是上面我们设置的content.categoryIdentifier &#x3D; “alarm”。<br>UNNotificationAction设置的是用户选择点击后作出的回应。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"><span class="comment">// center.delegate = self 就必须让这个self符合UNUserNotificationCenterDelegate协议</span></span><br><span class="line">center.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// An identifier, which is a unique text string that gets sent to you when the button is tapped.</span></span><br><span class="line"><span class="comment">// A title, which is what user’s see in the interface.</span></span><br><span class="line"><span class="comment">// Options, which describe any special options that relate to the action. You can choose from .authenticationRequired, .destructive, and .foreground.</span></span><br><span class="line"><span class="comment">// .foreground -- The action causes the app to launch in the foreground.</span></span><br><span class="line"><span class="comment">// .destructive -- The action causes a destructive task.</span></span><br><span class="line"><span class="keyword">let</span> show <span class="operator">=</span> <span class="type">UNNotificationAction</span>(identifier: <span class="string">&quot;show&quot;</span>, title: <span class="string">&quot;Tell me more...&quot;</span>, options: .foreground)</span><br><span class="line"><span class="keyword">let</span> show2 <span class="operator">=</span> <span class="type">UNNotificationAction</span>(identifier: <span class="string">&quot;show2&quot;</span>, title: <span class="string">&quot;Tell me another...&quot;</span>, options: .authenticationRequired)</span><br><span class="line"><span class="comment">// 此处就必须要对应上面讲到的 content.categoryIdentifier = &quot;alarm&quot;</span></span><br><span class="line"><span class="comment">// 此处的intentIdentifiers--this is used to connect your notifications to intents, if you have created any.</span></span><br><span class="line"><span class="keyword">let</span> category <span class="operator">=</span> <span class="type">UNNotificationCategory</span>(identifier: <span class="string">&quot;alarm&quot;</span>, actions: [show, show2], intentIdentifiers: [])</span><br><span class="line"></span><br><span class="line">center.setNotificationCategories([category])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的代码是上面例子的重复,但要生成notification是必须的,所以就重复写了一遍</span></span><br><span class="line"><span class="keyword">let</span> content <span class="operator">=</span> <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">content.title <span class="operator">=</span> <span class="string">&quot;Late wake up call&quot;</span></span><br><span class="line">content.body <span class="operator">=</span> <span class="string">&quot;The early bird catches the worm, but the second mouse gets the cheese.&quot;</span></span><br><span class="line">content.categoryIdentifier <span class="operator">=</span> <span class="string">&quot;alarm&quot;</span></span><br><span class="line">content.userInfo <span class="operator">=</span> [<span class="string">&quot;customData&quot;</span>: <span class="string">&quot;fizzbuzz&quot;</span>]</span><br><span class="line">content.sound <span class="operator">=</span> <span class="type">UNNotificationSound</span>.default</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateComponents <span class="operator">=</span> <span class="type">DateComponents</span>()</span><br><span class="line">dateComponents.hour <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">dateComponents.minute <span class="operator">=</span> <span class="number">30</span></span><br><span class="line"><span class="keyword">let</span> trigger <span class="operator">=</span> <span class="type">UNTimeIntervalNotificationTrigger</span>(timeInterval: <span class="number">5</span>, repeats: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> request <span class="operator">=</span> <span class="type">UNNotificationRequest</span>(identifier: <span class="type">UUID</span>().uuidString, content: content, trigger: trigger)</span><br><span class="line">center.add(request)</span><br></pre></td></tr></table></figure><p>效果是这样的:<br><img src="/Images/UNNotificationRequest_2.gif" alt="UNNotificationRequest_2"></p><h2 id="UNUserNotificationCenter的getNotificationSettings-–-查看是否已获得用户的允许发送提醒"><a href="#UNUserNotificationCenter的getNotificationSettings-–-查看是否已获得用户的允许发送提醒" class="headerlink" title="UNUserNotificationCenter的getNotificationSettings – 查看是否已获得用户的允许发送提醒"></a>UNUserNotificationCenter的getNotificationSettings – 查看是否已获得用户的允许发送提醒</h2><p>感觉下面这样写比较好,查看是否获得用户授权发提醒,若未获授权,则请求授权;若已授权,则进一步设置提醒的内容和方式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">manageNotifications</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> notificationCenter <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line">    </span><br><span class="line">    notificationCenter.getNotificationSettings &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (settings) <span class="keyword">in</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// user has not made a choice yet regarding accepting notifications</span></span><br><span class="line">        <span class="keyword">if</span> settings.authorizationStatus <span class="operator">==</span> .notDetermined &#123;</span><br><span class="line">            <span class="comment">// use this opportunity to explain why it could be useful</span></span><br><span class="line">            <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Daily reminder&quot;</span>, message: <span class="string">&quot;Allow notifications to be reminded daily of playing Guess the Flag&quot;</span>, preferredStyle: .alert)</span><br><span class="line">            ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;Next&quot;</span>, style: .default) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.requestNotificationsAuthorization()</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// user already has accepted notifications</span></span><br><span class="line">        <span class="keyword">if</span> settings.authorizationStatus <span class="operator">==</span> .authorized &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.scheduleNotifications()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">requestNotificationsAuthorization</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> notificationCenter <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"></span><br><span class="line">    notificationCenter.requestAuthorization(options: [.alert, .badge, .sound]) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] granted, error <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> granted &#123;</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.scheduleNotifications()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// explain how notifications can be activated</span></span><br><span class="line">            <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Notifications&quot;</span>, message: <span class="string">&quot;Your choice has been saved.<span class="subst">\n</span>Should you change your mind, head to <span class="subst">\&quot;</span>Settings -&gt; Project21-Challenge3 -&gt; Notifications<span class="subst">\&quot;</span> to update your preferences.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">            ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="didReceive-–-处理上面设置的content-userInfo-x3D-“customData”-“fizzbuzz”-等传输数据"><a href="#didReceive-–-处理上面设置的content-userInfo-x3D-“customData”-“fizzbuzz”-等传输数据" class="headerlink" title="didReceive – 处理上面设置的content.userInfo &#x3D; [“customData”: “fizzbuzz”]等传输数据"></a>didReceive – 处理上面设置的content.userInfo &#x3D; [“customData”: “fizzbuzz”]等传输数据</h2><p>UNUserNotificationCenterDelegate协议定义了userNotificationCenter方法,可以接收一个@escaping,来等待并处理传输的数据:<br>(这不是必须要定义的方法,只是在需要处理传输的数据的时候才有必要)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userNotificationCenter:(<span class="type">UNUserNotificationCenter</span> <span class="operator">*</span>)center didReceiveNotificationResponse:(<span class="type">UNNotificationResponse</span> <span class="operator">*</span>)response withCompletionHandler</span><br></pre></td></tr></table></figure><p>我们可以这样定义该方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">userNotificationCenter</span>(<span class="keyword">_</span> <span class="params">center</span>: <span class="type">UNUserNotificationCenter</span>, <span class="params">didReceive</span> <span class="params">response</span>: <span class="type">UNNotificationResponse</span>, <span class="params">withCompletionHandler</span> <span class="params">completionHandler</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> userInfo <span class="operator">=</span> response.notification.request.content.userInfo</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> customData <span class="operator">=</span> userInfo[<span class="string">&quot;customData&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Custom data received: <span class="subst">\(customData)</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> response.actionIdentifier &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">UNNotificationDefaultActionIdentifier</span>:</span><br><span class="line">            <span class="comment">// the user swiped to unlock</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Default identifier&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">            <span class="comment">// 针对我们之前的三行代码:</span></span><br><span class="line">            <span class="comment">// let show = UNNotificationAction(identifier: &quot;show&quot;, title: &quot;Tell me more...&quot;, options: .foreground)</span></span><br><span class="line">            <span class="comment">// let category = UNNotificationCategory(identifier: &quot;alarm&quot;, actions: [show], intentIdentifiers: [])</span></span><br><span class="line">            <span class="comment">// center.setNotificationCategories([category])</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Show more information...&quot;</span>)</span><br><span class="line">            <span class="comment">// 你也可以再执行一遍scheduleNotifications()来设置新的提醒</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很有趣的是,它只响应center.setNotificationCategories,就是你只有点了”Tell me more…”或者”Tell me another…”按钮才会执行该方法,很奇怪,难道它只针对UNNotificationCategory,为啥？<br>center.setNotificationCategories的参数是[category],而category指向的actions是[show, show2, …],所以它只针对action来回应。</p><h1 id="使用AVFoudation模块的AVPlayer播放声音文件"><a href="#使用AVFoudation模块的AVPlayer播放声音文件" class="headerlink" title="使用AVFoudation模块的AVPlayer播放声音文件"></a>使用AVFoudation模块的AVPlayer播放声音文件</h1><p>在使用SpriteKit模块使用中,为何不使用其本身就有的SKAction.playSoundFileNamed()？<br>而是要去使用AVAudioPlayer(contentsOf: URL)?<br>教材中称是,AVAudioPlayer可以在你需要的时候,随时停止声音的播放。</p><p>基本使用方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;sliceBombFuse&quot;</span>, withExtension: <span class="string">&quot;caf&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> sound <span class="operator">=</span> <span class="keyword">try?</span>  <span class="type">AVAudioPlayer</span>(contentsOf: path) &#123;</span><br><span class="line">        bombSoundEffect <span class="operator">=</span> sound</span><br><span class="line">        sound.play()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用sound.stop()来停止播放。</p><h1 id="NSAttributedString"><a href="#NSAttributedString" class="headerlink" title="NSAttributedString"></a>NSAttributedString</h1><p>Attributed strings are made up of two parts: a plain Swift string, plus a dictionary containing a series of attributes that describe how various segments of the string are formatted. </p><p>NSAttributedString可以针对一串字符串,片段化地设置其的属性,而Label却只能整个设置。<br>我们在使用UILabel, UITextField, UITextView, UIButton, UINavigationBar等等支持text属性的情况下,更建议使用attributedText。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSAttributedString</span>(string: <span class="type">String</span>, attributes: [<span class="type">NSAttributedString</span>.Key: <span class="keyword">Any</span>]<span class="operator">?</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The examples are in codes below.</p><h2 id="NSAttributedString-Key-–-一般用法"><a href="#NSAttributedString-Key-–-一般用法" class="headerlink" title="NSAttributedString.Key – 一般用法"></a>NSAttributedString.Key – 一般用法</h2><p>NSAttributedString.Key is the attributes that you can apply to text in an attributed string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> string <span class="operator">=</span> <span class="string">&quot;This is a test string.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attributes: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">    .foregroundColor: <span class="type">UIColor</span>.white,</span><br><span class="line">    .backgroundColor: <span class="type">UIColor</span>.red,</span><br><span class="line">    .font: <span class="type">UIFont</span>.boldSystemFont(ofSize: <span class="number">36</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attributedString <span class="operator">=</span> <span class="type">NSAttributedString</span>(string: string, attributes: attributes)</span><br></pre></td></tr></table></figure><p>效果是这样的:<br><img src="/Images/NSAttributedString.Key.png" alt="NSAttributedString.Key"><br>虽然我们可以在Label中设置字符串的属性,但你不能对该字符串的不同部分设置不同的属性,而NSAttributedString可以做到。</p><h2 id="NSMutableAttributedString-string-String"><a href="#NSMutableAttributedString-string-String" class="headerlink" title="NSMutableAttributedString(string: String)"></a>NSMutableAttributedString(string: String)</h2><p>可更改属性的NSString,即使你使用let来定义,如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="string">&quot;This is a test string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> attributedString <span class="operator">=</span> <span class="type">NSMutableAttributedString</span>(string: string)</span><br><span class="line">attributedString.addAttribute(.font, value: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">8</span>), range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: <span class="number">4</span>))</span><br><span class="line">attributedString.addAttribute(.font, value: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">16</span>), range: <span class="type">NSRange</span>(location: <span class="number">5</span>, length: <span class="number">2</span>))</span><br><span class="line">attributedString.addAttribute(.font, value: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">24</span>), range: <span class="type">NSRange</span>(location: <span class="number">8</span>, length: <span class="number">1</span>))</span><br><span class="line">attributedString.addAttribute(.font, value: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">32</span>), range: <span class="type">NSRange</span>(location: <span class="number">10</span>, length: <span class="number">4</span>))</span><br><span class="line">attributedString.addAttribute(.font, value: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">40</span>), range: <span class="type">NSRange</span>(location: <span class="number">15</span>, length: <span class="number">6</span>))</span><br></pre></td></tr></table></figure><p><img src="/Images/NSMutableAttributedString.png" alt="NSMutableAttributedString"></p><h2 id="NSAttributedString-Key-–-的其他属性"><a href="#NSAttributedString-Key-–-的其他属性" class="headerlink" title="NSAttributedString.Key – 的其他属性"></a>NSAttributedString.Key – 的其他属性</h2><p>There are lots of formatting options for attributed strings, including:</p><ul><li>Set .underlineStyle to a value from NSUnderlineStyle to strike out characters.</li><li>Set .strikethroughStyle to a value from NSUnderlineStyle (no, that’s not a typo) to strike out characters.</li><li>Set .paragraphStyle to an instance of NSMutableParagraphStyle to control text alignment and spacing.</li><li>Set .link to be a URL to make clickable links in your strings.</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attributedString.addAttribute(.link, value: <span class="string">&quot;https://www.google.com&quot;</span>, range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: attributedString.length))</span><br></pre></td></tr></table></figure><p><img src="/Images/NSAttributedString.Key.link.png" alt="NSAttributedString.Key.link"></p><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><h2 id="unknown-default"><a href="#unknown-default" class="headerlink" title="@unknown default"></a>@unknown default</h2><p>There’s one final case in there to handle any unknown cases that crop up in the future. While we could have made one of the other cases handle that using a regular default case, in this project none of them really make sense for whatever might occur in the future so I’ve added a dedicated @unknown default case to handle future cases.</p><h1 id="Multipeer-Connectivity"><a href="#Multipeer-Connectivity" class="headerlink" title="Multipeer Connectivity"></a>Multipeer Connectivity</h1><p>AirDrop功能强大,但它与app的整合不够紧密。幸运的是,从iOS7开始引入了一个新的框架,就是Multipeer Connectivity。Multipeer Connectivity是建立在与AirDrop相同技术上的一个框架。它传输范围比蓝牙广,不依赖网络,但需要打开wifi或蓝牙。</p><p>具体的初步实现还是挺简单的,可以参考:</p><blockquote><p><a href="https://www.hackingwithswift.com/100/83">https://www.hackingwithswift.com/100/83</a><br><a href="https://www.hackingwithswift.com/100/84">https://www.hackingwithswift.com/100/84</a></p></blockquote><h1 id="if-else-endif"><a href="#if-else-endif" class="headerlink" title="#if #else #endif"></a><code>#if</code> <code>#else</code> <code>#endif</code></h1><blockquote><p><a href="https://www.hackingwithswift.com/read/26/3/tilt-to-move-cmmotionmanager">https://www.hackingwithswift.com/read/26/3/tilt-to-move-cmmotionmanager</a><br>上文有提到这些用法</p></blockquote><p>示例代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">update</span>(<span class="keyword">_</span> <span class="params">currentTime</span>: <span class="type">TimeInterval</span>) &#123;</span><br><span class="line"><span class="comment">// Called before each frame is rendered</span></span><br><span class="line"><span class="keyword">#if</span> targetEnvironment(simulator)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> currentTouch <span class="operator">=</span> lastTouchPosition &#123;</span><br><span class="line">            <span class="keyword">let</span> diff <span class="operator">=</span> <span class="type">CGPoint</span>(x: currentTouch.x <span class="operator">-</span> player.position.x, y: currentTouch.y <span class="operator">-</span> player.position.y)</span><br><span class="line">            physicsWorld.gravity <span class="operator">=</span> <span class="type">CGVector</span>(dx: diff.x <span class="operator">/</span> <span class="number">100</span>, dy: diff.y <span class="operator">/</span> <span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> accelerometreData <span class="operator">=</span> motionManager.accelerometerData &#123;</span><br><span class="line">            physicsWorld.gravity <span class="operator">=</span> <span class="type">CGVector</span>(dx: accelerometreData.acceleration.y <span class="operator">*</span> <span class="operator">-</span><span class="number">50</span>, dy: accelerometreData.acceleration.x <span class="operator">*</span> <span class="number">50</span>) <span class="comment">// ?? 这里x和y是倒的</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子,自己总结下来,就是:<br>在模拟器上的时候,就只编译<code>#if</code>这部分代码,但如果是在真机的时候,就只编译<code>#else</code>部分的代码。</p><h1 id="CoreMotion"><a href="#CoreMotion" class="headerlink" title="CoreMotion"></a>CoreMotion</h1><p>All motion detection is done with an Apple framework called Core Motion.</p><h2 id="CMMotionManager"><a href="#CMMotionManager" class="headerlink" title="CMMotionManager"></a>CMMotionManager</h2><p>Most of the work about motion detection is done by a class called CMMotionManager.<br>Using it here won’t require any special user permissions, so all we need to do is create an instance of the class and ask it to start collecting information.<br>We can then read from that information whenever and wherever we need to, and in this project the best place is update().<br>设备的移动等动作的检测,不需要得到用户的授权,无论何时何地我们都可以取得数据.<br>范例中,取得该数据的代码,最好的就是放在update()中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> motionManager: <span class="type">CMMotionManager</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般放在didMove(to:)</span></span><br><span class="line">motionManager <span class="operator">=</span> <span class="type">CMMotionManager</span>()</span><br><span class="line">motionManager.startAccelerometerUpdates()</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">update</span>(<span class="keyword">_</span> <span class="params">currentTime</span>: <span class="type">TimeInterval</span>) &#123;</span><br><span class="line"><span class="keyword">#if</span> targetEnvironment(simulator)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> currentTouch <span class="operator">=</span> lastTouchPosition &#123;</span><br><span class="line">            <span class="keyword">let</span> diff <span class="operator">=</span> <span class="type">CGPoint</span>(x: currentTouch.x <span class="operator">-</span> player.position.x, y: currentTouch.y <span class="operator">-</span> player.position.y)</span><br><span class="line">            physicsWorld.gravity <span class="operator">=</span> <span class="type">CGVector</span>(dx: diff.x <span class="operator">/</span> <span class="number">100</span>, dy: diff.y <span class="operator">/</span> <span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> accelerometreData <span class="operator">=</span> motionManager.accelerometerData &#123;</span><br><span class="line">            physicsWorld.gravity <span class="operator">=</span> <span class="type">CGVector</span>(dx: accelerometreData.acceleration.y <span class="operator">*</span> <span class="operator">-</span><span class="number">50</span>, dy: accelerometreData.acceleration.x <span class="operator">*</span> <span class="number">50</span>) <span class="comment">// ?? 这里x和y是倒的</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CMMotionManager-的-startAccelerometerUpdates"><a href="#CMMotionManager-的-startAccelerometerUpdates" class="headerlink" title="CMMotionManager 的 startAccelerometerUpdates"></a>CMMotionManager 的 startAccelerometerUpdates</h3><p>如上面代码有写到。<br>U   sing the startAccelerometerUpdates() method, which instructs Core Motion to start collecting accelerometer information we can read later.</p><h3 id="CMMotionManager-的-accelerometerData"><a href="#CMMotionManager-的-accelerometerData" class="headerlink" title="CMMotionManager 的 accelerometerData"></a>CMMotionManager 的 accelerometerData</h3><p>如上面代码有写到。<br>就是取得设备移动等动作的数据。</p><h1 id="Core-Graphics"><a href="#Core-Graphics" class="headerlink" title="Core Graphics"></a>Core Graphics</h1><p>Core Graphics can work on a background thread – something that UIKit can’t do – which means you can do complicated drawing without locking up your user interface.</p><p>Remember: SpriteKit’s positions things from the center and Core Graphics from the bottom left!</p><h2 id="UIGraphicsImageRenderer-–-class"><a href="#UIGraphicsImageRenderer-–-class" class="headerlink" title="UIGraphicsImageRenderer – class"></a>UIGraphicsImageRenderer – class</h2><p>That class name starts with “UI”, so what makes it anything to do with Core Graphics? Well, it isn’t a Core Graphics class; it’s a UIKit class, but it acts as a gateway to and from Core Graphics for UIKit-based apps like ours. You create a renderer object and start a rendering context, but everything between will be Core Graphics functions or UIKit methods that are designed to work with Core Graphics contexts.</p><h2 id="UIGraphicsImageRenderer的image-–-function"><a href="#UIGraphicsImageRenderer的image-–-function" class="headerlink" title="UIGraphicsImageRenderer的image – function"></a>UIGraphicsImageRenderer的image – function</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">512</span>, height: <span class="number">512</span>))</span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">let</span> rectangle <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">512</span>, height: <span class="number">512</span>)</span><br><span class="line">    </span><br><span class="line">    ctx.cgContext.setFillColor(<span class="type">UIColor</span>.red.cgColor)</span><br><span class="line">    ctx.cgContext.setStrokeColor(<span class="type">UIColor</span>.black.cgColor)</span><br><span class="line">    ctx.cgContext.setLineWidth(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    ctx.cgContext.addRect(rectangle)</span><br><span class="line">    ctx.cgContext.drawPath(using: .fillStroke)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前有设置@IBOutlet var imageView: UIImageView!</span></span><br><span class="line">imageView.image <span class="operator">=</span> img</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面例子中出现的 <code>ctx.cgContext.setFillColor</code> <code>ctx.cgContext.setStrokeColor</code> <code>ctx.cgContext.setLineWidth</code> <code>ctx.cgContext.addRect</code> <code>ctx.cgContext.drawPath</code>：</p><ul><li><strong>setFillColor()</strong> sets the fill color of our context, which is the color used on the insides of the rectangle we’ll draw.</li><li><strong>setStrokeColor()</strong> sets the stroke color of our context, which is the color used on the line around the edge of the rectangle we’ll draw.</li><li><strong>setLineWidth()</strong> adjusts the line width that will be used to stroke our rectangle. Note that the line is drawn centered on the edge of the rectangle, so a value of 10 will draw 5 points inside the rectangle and five points outside.</li><li><strong>addRect()</strong> adds a CGRect rectangle to the context’s current path to be drawn.</li><li><strong>drawPath()</strong> draws the context’s current path using the state you have configured.</li></ul><hr><p>此外,再加一个fill():</p><ul><li><strong>fill()</strong> fill() skips the add path &#x2F; draw path work and just fills the rectangle given as its parameter using whatever the current fill color is.</li></ul><p>比如下面的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">512</span>, height: <span class="number">512</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    ctx.cgContext.setFillColor(<span class="type">UIColor</span>.black.cgColor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">8</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">8</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (row <span class="operator">+</span> col) <span class="operator">%</span> <span class="number">2</span> <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">                ctx.cgContext.fill(<span class="type">CGRect</span>(x: col <span class="operator">*</span> <span class="number">64</span>, y: row <span class="operator">*</span> <span class="number">64</span>, width: <span class="number">64</span>, height: <span class="number">64</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imageView.image <span class="operator">=</span> img</span><br></pre></td></tr></table></figure><p><img src="/Images/UIGraphicsImageRenderer.webp" alt="UIGraphicsImageRenderer"><br>可以看到,使用ctx.cgContext.fill方法的时候,不需要像再上面的例子一样add path&#x2F;draw path。</p><hr><p>还有<code>translateBy</code> <code>rotate(by:)</code> <code>strokePath</code>：</p><ul><li><strong>translateBy()</strong> translates (moves) the current transformation matrix. – The default behavior of rotating the CTM is to rotate from the top-left corner of our canvas.If you want to rotate from a different position you should add a translation first. – CTM is the current transformation matrix.</li><li><strong>rotate(by:)</strong> rotates the current transformation matrix.</li><li><strong>strokePath()</strong> strokes the path with your specified line width, which is 1 if you don’t set it explicitly.</li></ul><p>可以画出的效果为:<br><img src="/Images/drawRotatedSquares.png" alt="drawRotatedSquares.png"></p><p>代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">512</span>, height: <span class="number">512</span>))</span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    ctx.cgContext.translateBy(x: <span class="number">256</span>, y: <span class="number">256</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> rotations <span class="operator">=</span> <span class="number">16</span></span><br><span class="line">    <span class="keyword">let</span> amount <span class="operator">=</span> <span class="type">Double</span>.pi <span class="operator">/</span> <span class="type">Double</span>(rotations)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> rotations &#123;</span><br><span class="line">        ctx.cgContext.rotate(by: amount)</span><br><span class="line">        ctx.cgContext.addRect(<span class="type">CGRect</span>(x: <span class="operator">-</span><span class="number">128</span>, y: <span class="operator">-</span><span class="number">128</span>, width: <span class="number">256</span>, height: <span class="number">256</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ctx.cgContext.setStrokeColor(<span class="type">UIColor</span>.black.cgColor)</span><br><span class="line">    ctx.cgContext.strokePath()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imageView.image <span class="operator">=</span> img</span><br></pre></td></tr></table></figure><hr><p>还有<code>move(to:)</code> <code>addLine(to:)</code><br>可以呈现的效果是:<br><img src="/Images/drawLines.png" alt="drawLines.png"></p><p>代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">512</span>, height: <span class="number">512</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    ctx.cgContext.translateBy(x: <span class="number">256</span>, y: <span class="number">256</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> first <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">256</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> <span class="number">512</span> &#123;</span><br><span class="line">        ctx.cgContext.rotate(by: .pi <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> first &#123;</span><br><span class="line">            ctx.cgContext.move(to: <span class="type">CGPoint</span>(x: length, y: <span class="number">50</span>))</span><br><span class="line">            first <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx.cgContext.addLine(to: <span class="type">CGPoint</span>(x: length, y: <span class="number">50</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        length <span class="operator">*=</span> <span class="number">0.99</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ctx.cgContext.setStrokeColor(<span class="type">UIColor</span>.black.cgColor)</span><br><span class="line">    ctx.cgContext.strokePath()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imageView.image <span class="operator">=</span> img</span><br></pre></td></tr></table></figure><hr><p>使用<code>NSAttributedString</code> 以及 <code>UIImage</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: <span class="type">CGSize</span>(width: <span class="number">512</span>, height: <span class="number">512</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> img <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">let</span> paragraphStyle <span class="operator">=</span> <span class="type">NSMutableParagraphStyle</span>()</span><br><span class="line">    paragraphStyle.alignment <span class="operator">=</span> .center</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">let</span> attrs: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">        .font: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">36</span>),</span><br><span class="line">        .paragraphStyle: paragraphStyle</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">let</span> string <span class="operator">=</span> <span class="string">&quot;The best-laid schemes o&#x27;<span class="subst">\n</span>mice an&#x27; men gang aft agley&quot;</span></span><br><span class="line">    <span class="keyword">let</span> attributedString <span class="operator">=</span> <span class="type">NSAttributedString</span>(string: string, attributes: attrs)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5</span></span><br><span class="line">    attributedString.draw(with: <span class="type">CGRect</span>(x: <span class="number">32</span>, y: <span class="number">32</span>, width: <span class="number">448</span>, height: <span class="number">448</span>), options: .usesLineFragmentOrigin, context: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6</span></span><br><span class="line">    <span class="keyword">let</span> mouse <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;mouse&quot;</span>)</span><br><span class="line">    mouse<span class="operator">?</span>.draw(at: <span class="type">CGPoint</span>(x: <span class="number">300</span>, y: <span class="number">150</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line">imageView.image <span class="operator">=</span> img</span><br></pre></td></tr></table></figure><p><img src="/Images/CG-ImagesAndText.webp" alt="CG-ImagesAndText"></p><p>解释一下上述6个步骤:</p><ol><li>Create a renderer at the correct size.</li><li>Define a paragraph style that aligns text to the center. – Paragraph style also has options for line height, indenting, and more.</li><li>Create an attributes dictionary containing that paragraph style, and also a font.</li><li>Wrap that attributes dictionary and a string into an instance of NSAttributedString.</li><li>Load an image from the project and draw it to the context.</li><li>Update the image view with the finished result.</li></ol><hr><p><img src="/Images/circle.png" alt="circle"><br>如何画出这个圆形的图形？(里面的字母忽略)<br>需要使用都clip()来修剪,不然就是一个长方形。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> original <span class="operator">=</span> <span class="type">UIImage</span>(contentsOfFile: path)<span class="operator">!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> renderer <span class="operator">=</span> <span class="type">UIGraphicsImageRenderer</span>(size: original.size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rounded <span class="operator">=</span> renderer.image &#123; ctx <span class="keyword">in</span></span><br><span class="line">    ctx.cgContext.addEllipse(in: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>.zero, size: original.size))</span><br><span class="line">    ctx.cgContext.clip()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把original在rounded中画出来,也是显示出来的意思</span></span><br><span class="line">    original.draw(at: <span class="type">CGPoint</span>.zero)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cell.imageView<span class="operator">?</span>.image <span class="operator">=</span> rounded</span><br></pre></td></tr></table></figure><h1 id="KeychainWrapper-–-class-–-外部文件加载"><a href="#KeychainWrapper-–-class-–-外部文件加载" class="headerlink" title="KeychainWrapper – class – 外部文件加载"></a>KeychainWrapper – class – 外部文件加载</h1><p>我们一般使用UserDefaults在设备内存储普通信息,但有时需要存储相对敏感或是偏向私人的信息,在程序外一样可以读取到该UserDefaults的数据，所以为了不让他人从我们的手机数据中简单读取到,这时候就不建议使用UserDefaults了,而是使用KeychainWrapper这个外来的类。<br>但单单用KeychainWrapper来存储数据也不安全,最好是配合LA框架的TouchID和FaceID解锁程序更好。<br>要使用KeychainWrapper,先要在项目中放入两个文件,分别是:<code>KeychainItemAccessibility.swift</code> 和 <code>KeychainWrapper.swift</code>。这两个文件已放在extraFiles文件夹中。</p><h2 id="KeychainWrapper-standard-set-value-String-forKey-key-String-–-存储数据"><a href="#KeychainWrapper-standard-set-value-String-forKey-key-String-–-存储数据" class="headerlink" title="KeychainWrapper.standard.set(_ value:String, forKey key:String ) – 存储数据"></a>KeychainWrapper.standard.set(_ value:String, forKey key:String ) – 存储数据</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">KeychainWrapper</span>.standard.set(secret.text, forKey: <span class="string">&quot;SecretMessage&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="KeychainWrapper-standard-string-forKey-String-–-读取数据"><a href="#KeychainWrapper-standard-string-forKey-String-–-读取数据" class="headerlink" title="KeychainWrapper.standard.string(forKey: String) – 读取数据"></a>KeychainWrapper.standard.string(forKey: String) – 读取数据</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text <span class="operator">=</span> <span class="type">KeychainWrapper</span>.standard.string(forKey: <span class="string">&quot;SecretMessage&quot;</span>) <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="KeychainWrapper-standard-hasValue-forKey-String-–-判断是否有值"><a href="#KeychainWrapper-standard-hasValue-forKey-String-–-判断是否有值" class="headerlink" title="KeychainWrapper.standard.hasValue(forKey: String) – 判断是否有值"></a>KeychainWrapper.standard.hasValue(forKey: String) – 判断是否有值</h2><p><code>KeychainWrapper.standard.hasValue(forKey: passwordKey)</code> 返回一个Bool</p><h1 id="LocalAuthentication-–-framework-即-LA-framework"><a href="#LocalAuthentication-–-framework-即-LA-framework" class="headerlink" title="LocalAuthentication – framework 即 LA framework"></a>LocalAuthentication – framework 即 LA framework</h1><blockquote><p><a href="https://www.hackingwithswift.com/read/28/4/touch-to-activate-touch-id-face-id-and-localauthentication">https://www.hackingwithswift.com/read/28/4/touch-to-activate-touch-id-face-id-and-localauthentication</a></p></blockquote><h2 id="import-1"><a href="#import-1" class="headerlink" title="import"></a>import</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LocalAuthentication</span><br></pre></td></tr></table></figure><h2 id="Touch-ID-和-Face-ID"><a href="#Touch-ID-和-Face-ID" class="headerlink" title="Touch ID 和 Face ID"></a>Touch ID 和 Face ID</h2><p>获得 Touch ID 和 Face ID 的用户授权以及去验证是否取得授权的大致步骤:</p><ol><li>检查设备是否支持Touch ID 和 Face ID, 或者说用户有没有在系统中设置过Touch ID 和 Face ID;</li><li>如果有,请求Touch ID 和 Face ID的授权。 当我们请求的时候,给用户一串我们为何要请求的原因的符串。当请求Touch ID的时候,我们把原因写在代码中就可以了,但请求Face ID的时候,把原因的字符串写在Info.plist文件里面–加一个key -&gt; “Privacy - Face ID Usage Description.”</li><li>当我们请求成功的时候,我们就可以做我们想做的事情了,比如解锁这个app;不然,我们就要展示错误信息了。</li></ol><p>注意:系统使用TouchID或FaceID,并不是两者都需要,只是挑一种,有一种就可以通过了。</p><h3 id="LAContext的canEvaluatePolicy-和evaluatePolicy-方法-x2F-deviceOwnerAuthenticationWithBiometrics-–-请求的安全条款类型"><a href="#LAContext的canEvaluatePolicy-和evaluatePolicy-方法-x2F-deviceOwnerAuthenticationWithBiometrics-–-请求的安全条款类型" class="headerlink" title="LAContext的canEvaluatePolicy()和evaluatePolicy()方法 &#x2F; .deviceOwnerAuthenticationWithBiometrics – 请求的安全条款类型"></a>LAContext的canEvaluatePolicy()和evaluatePolicy()方法 &#x2F; .deviceOwnerAuthenticationWithBiometrics – 请求的安全条款类型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@IBAction</span> <span class="keyword">func</span> <span class="title function_">authenticateTapped</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context <span class="operator">=</span> <span class="type">LAContext</span>()</span><br><span class="line">    <span class="keyword">var</span> error: <span class="type">NSError</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.</span></span><br><span class="line">    <span class="keyword">if</span> context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: <span class="operator">&amp;</span>error) &#123;</span><br><span class="line">        <span class="keyword">let</span> reason <span class="operator">=</span> <span class="string">&quot;Identify yourself!&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.</span></span><br><span class="line">        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] success, authenticationError <span class="keyword">in</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">if</span> success &#123;</span><br><span class="line">                    <span class="keyword">self</span><span class="operator">?</span>.unlockSecretMessage()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 3.</span></span><br><span class="line">                    <span class="comment">// error</span></span><br><span class="line">                    <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Authentication failed&quot;</span>, message: <span class="string">&quot;You could not be verified; please try again.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">                    ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">                    <span class="keyword">self</span><span class="operator">?</span>.present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 3.</span></span><br><span class="line">        <span class="comment">// no biometry</span></span><br><span class="line">        <span class="keyword">let</span> ac <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;Biometry unavailable&quot;</span>, message: <span class="string">&quot;Your device is not configured for biometric authentication.&quot;</span>, preferredStyle: .alert)</span><br><span class="line">        ac.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;OK&quot;</span>, style: .default))</span><br><span class="line">        <span class="keyword">self</span>.present(ac, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Instruments-–-part-of-XCode"><a href="#Instruments-–-part-of-XCode" class="headerlink" title="Instruments – part of XCode"></a>Instruments – part of XCode</h1><p>XCode中的Instruments,可以用来查看你的app的各种运行数据的工具。</p><h2 id="Instruments的启动"><a href="#Instruments的启动" class="headerlink" title="Instruments的启动"></a>Instruments的启动</h2><p><code>Cmd</code> + <code>I</code><br><img src="/Images/Instruments.png" alt="Instruments"></p><h2 id="Time-Profiler"><a href="#Time-Profiler" class="headerlink" title="Time Profiler"></a>Time Profiler</h2><p>是图形化测试app中每个耗时的组件。</p><blockquote><p><a href="https://www.hackingwithswift.com/read/30/3/what-can-instruments-tell-us">https://www.hackingwithswift.com/read/30/3/what-can-instruments-tell-us</a></p></blockquote><p>在Debug菜单下面,可选择两个比较有用的选项:Color Blended Layers和Color Offscreen-Rendered。</p><ul><li><strong>Color Blended Layers</strong> shows views that are opaque in green and translucent in red. If there are multiple transparent views inside each other, you’ll see more and more red.</li><li><strong>Color Offscreen-Rendered</strong> shows views that require an extra drawing pass in yellow. Some special drawing work must be drawn individually off screen then drawn again onto the screen, which means a lot more work.</li></ul><p>Broadly speaking, you want “Color Blended Layers” to show as little red as possible, and “Color Offscreen-Rendered Yellow” to show no yellow.</p><h2 id="Allocations"><a href="#Allocations" class="headerlink" title="Allocations"></a>Allocations</h2><p>The allocations instrument will tell you how many of these objects are persistent (created and still exist) and how many are transient (created and since destroyed).<br>图表里<code>persistent</code>代表建立后仍旧存在的数量,<code>transient</code>代表建立后销毁的数量。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;相关术语&quot;&gt;&lt;a href=&quot;#相关术语&quot; class=&quot;headerlink&quot; title=&quot;相关术语:&quot;&gt;&lt;/a&gt;相关术语:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UIKit&lt;/strong&gt; is the iOS user interface toolkit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IB&lt;/strong&gt; is Interface Builder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CA&lt;/strong&gt; is Core Animation. Like CALayer is a Core Animation data type responsible for managing the way your view looks. Core Animation handles animation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CG&lt;/strong&gt; is Apple’s Core Graphics framework. Like CGColor. Core Graphics handles drawing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;KVO&lt;/strong&gt; is key-value observing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NS&lt;/strong&gt; is Next Step. Steve Jobs did lots.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VFL&lt;/strong&gt; is a technique called Auto Layout Visual Format Language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCD&lt;/strong&gt; is Grand Central Dispatch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIFO&lt;/strong&gt; is First In, First Out.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MK&lt;/strong&gt; is Mapkit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NS&lt;/strong&gt; came from the NeXTSTEP libraries Foundation and AppKit(those names are still used by Apple’s Cocoa frameworks). &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UN&lt;/strong&gt; is UserNotification.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CL&lt;/strong&gt; is CoreLocation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MC&lt;/strong&gt; is Multipeer Connectivity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CM&lt;/strong&gt; is Core Motion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LA&lt;/strong&gt; is the Local Authentication framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HSB&lt;/strong&gt; is Hue, Saturation and Brightness. Using this method of creating colors you specify values between 0 and 1 to control how saturated a color is (from 0 &amp;#x3D; gray to 1 &amp;#x3D; pure color) and brightness (from 0 &amp;#x3D; black to 1 &amp;#x3D; maximum brightness), and 0 to 1 for hue. “Hue” is a value from 0 to 1 also, but it represents a position on a color wheel, like using a color picker on your Mac. Hues 0 and 1 both represent red, with all other colors lying in between.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;FileManager&quot;&gt;&lt;a href=&quot;#FileManager&quot; class=&quot;headerlink&quot; title=&quot;FileManager&quot;&gt;&lt;/a&gt;FileManager&lt;/h1&gt;&lt;h2 id=&quot;枚举程序设备目录内的所有文件&quot;&gt;&lt;a href=&quot;#枚举程序设备目录内的所有文件&quot; class=&quot;headerlink&quot; title=&quot;枚举程序设备目录内的所有文件&quot;&gt;&lt;/a&gt;枚举程序设备目录内的所有文件&lt;/h2&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fm &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;FileManager&lt;/span&gt;.default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bundle&lt;/span&gt;.main.resourcePath&lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; items &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;try!&lt;/span&gt; fm.contentsOfDirectory(atPath: path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; items &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;Bundle&quot;&gt;&lt;a href=&quot;#Bundle&quot; class=&quot;headerlink&quot; title=&quot;Bundle&quot;&gt;&lt;/a&gt;Bundle&lt;/h1&gt;&lt;h2 id=&quot;Bundle-main-url-forResource-–-仅通过文件名而返回该文件的url&quot;&gt;&lt;a href=&quot;#Bundle-main-url-forResource-–-仅通过文件名而返回该文件的url&quot; class=&quot;headerlink&quot; title=&quot;Bundle.main.url(forResource:) – 仅通过文件名而返回该文件的url&quot;&gt;&lt;/a&gt;Bundle.main.url(forResource:) – 仅通过文件名而返回该文件的url&lt;/h2&gt;&lt;p&gt;Finding a path to a file is something you’ll do a lot, because even though you know the file is called “start.txt” you don’t know where it might be on the filesystem. So, we use a built-in method of Bundle to find it: path(forResource:). This takes as its parameters the name of the file and its path extension, and returns a String? – i.e., you either get the path back or you get nil if it didn’t exist.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 假设要找寻到start.txt这个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; startWordsURL &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bundle&lt;/span&gt;.main.url(forResource: &lt;span class=&quot;string&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;, withExtension: &lt;span class=&quot;string&quot;&gt;&amp;quot;txt&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 若找到该start.txt的url后读取里面的文本内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; startWords &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;try?&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(contentsOf: startWordsURL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 省略后续代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Bundle-main-urls-forResourcesWithExtension-String-subdirectory-String-–-从直接指定文件名及具体目录名称来找所有文件&quot;&gt;&lt;a href=&quot;#Bundle-main-urls-forResourcesWithExtension-String-subdirectory-String-–-从直接指定文件名及具体目录名称来找所有文件&quot; class=&quot;headerlink&quot; title=&quot;Bundle.main.urls(forResourcesWithExtension: String?, subdirectory: String?) – 从直接指定文件名及具体目录名称来找所有文件&quot;&gt;&lt;/a&gt;Bundle.main.urls(forResourcesWithExtension: String?, subdirectory: String?) – 从直接指定文件名及具体目录名称来找所有文件&lt;/h2&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://giantslayer1980.github.io/categories/iOS/"/>
    
    <category term="Swift" scheme="http://giantslayer1980.github.io/categories/iOS/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>SwiftUI</title>
    <link href="http://giantslayer1980.github.io/SwiftUI/"/>
    <id>http://giantslayer1980.github.io/SwiftUI/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-02-27T15:11:59.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h3 id="components-seperatedBy"><a href="#components-seperatedBy" class="headerlink" title="components(seperatedBy:)"></a>components(seperatedBy:)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input <span class="operator">=</span> <span class="string">&quot;a b c&quot;</span></span><br><span class="line"><span class="keyword">let</span> letters <span class="operator">=</span> input.components(separatedBy: <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(letters)</span><br><span class="line"><span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="trimmingCharacters-in"><a href="#trimmingCharacters-in" class="headerlink" title="trimmingCharacters(in:)"></a>trimmingCharacters(in:)</h3><p>we can ask Swift to trim all whitespace at the start and end of a string like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> trimmed <span class="operator">=</span> someString.trimmingCharacters(in: .whitespacesAndNewlines)</span><br></pre></td></tr></table></figure><h3 id="读取txt文件中的内容-并转化成String"><a href="#读取txt文件中的内容-并转化成String" class="headerlink" title="读取txt文件中的内容,并转化成String"></a>读取txt文件中的内容,并转化成String</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如读取项目中的start.txt文本文件中的内容,</span></span><br><span class="line"><span class="comment">// 此外,该文本每行一个单词,随机读取一个单词:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> contentOfTxt <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;start&quot;</span>, withExtension: <span class="string">&quot;txt&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> contentOfString <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">String</span>(contentsOf: contentOfTxt) &#123;</span><br><span class="line">        <span class="keyword">let</span> allWords <span class="operator">=</span> contentOfString.components(separatedBy: <span class="string">&quot;<span class="subst">\n</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> randomWord <span class="operator">=</span> allWords.randomElement() <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">// 如果在func中,需要空return,并在下面if之外fatalError()</span></span><br><span class="line">        <span class="comment">// return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fatalError()</span></span><br></pre></td></tr></table></figure><h4 id="NSRange-amp-amp-rangeOfMisspelledWord-amp-amp-NSNotFound"><a href="#NSRange-amp-amp-rangeOfMisspelledWord-amp-amp-NSNotFound" class="headerlink" title="NSRange &amp;&amp; rangeOfMisspelledWord &amp;&amp; NSNotFound"></a>NSRange &amp;&amp; rangeOfMisspelledWord &amp;&amp; NSNotFound</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rangeOfMisspelledWord:</span></span><br><span class="line"><span class="comment">// Initiates a search of a range of a string for a misspelled word.</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">rangeOfMisspelledWord</span>(<span class="params">in</span> <span class="params">stringToCheck</span>: <span class="type">String</span>, </span><br><span class="line">                     <span class="params">range</span>: <span class="type">NSRange</span>, </span><br><span class="line">                <span class="params">startingAt</span> <span class="params">startingOffset</span>: <span class="type">Int</span>, </span><br><span class="line">                      <span class="params">wrap</span> <span class="params">wrapFlag</span>: <span class="type">Bool</span>, </span><br><span class="line">                  <span class="params">language</span>: <span class="type">String</span>) -&gt; <span class="type">NSRange</span></span><br></pre></td></tr></table></figure><h4 id="案例目的-查询一串string是否存在拼写错误"><a href="#案例目的-查询一串string是否存在拼写错误" class="headerlink" title="案例目的: 查询一串string是否存在拼写错误"></a>案例目的: 查询一串string是否存在拼写错误</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">isReal</span>(<span class="params">word</span>: <span class="type">String</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> checker <span class="operator">=</span> <span class="type">UITextChecker</span>()</span><br><span class="line">    <span class="keyword">let</span> range <span class="operator">=</span> <span class="type">NSRange</span>(location: <span class="number">0</span>, length: word.utf16.count)</span><br><span class="line">    <span class="keyword">let</span> misspelledRange <span class="operator">=</span> checker.rangeOfMisspelledWord(in: word, range: range, startingAt: <span class="number">0</span>, wrap: <span class="literal">false</span>, language: <span class="string">&quot;en&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> misspelledRange.location <span class="operator">==</span> <span class="type">NSNotFound</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">This method will make an instance of UITextChecker, which is responsible for scanning strings for misspelled words. We’ll then create an NSRange to scan the entire length of our string, then call rangeOfMisspelledWord() on our text checker so that it looks for wrong words. When that finishes we’ll get back another NSRange telling us where the misspelled word was found, but if the word was OK the location for that range will be the special value NSNotFound.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h3 id="读取JSon文件里的内容并形成一个Struct实例"><a href="#读取JSon文件里的内容并形成一个Struct实例" class="headerlink" title="读取JSon文件里的内容并形成一个Struct实例"></a>读取JSon文件里的内容并形成一个Struct实例</h3><p>这里是一个泛型函数(GenericFunction)，传入的参数T要求遵守Decodable协议<br>为什么T要符合Decodable协议?<br>因为要从JSon文件中取得数据,就存在将结果解码decode的过程,<br>所以这里要返回的是一个遵循Decodable协议的T类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">decode</span>&lt;<span class="type">T</span>: <span class="type">Decodable</span>&gt;(<span class="keyword">_</span> <span class="params">filename</span>: <span class="type">String</span>) -&gt; <span class="type">T</span> &#123;        </span><br><span class="line">        <span class="comment">// 关于Bundle:</span></span><br><span class="line">        <span class="comment">// 当Xcode构建iOS app时,即创建了一种叫Bundle的东西,它可以存在app中所有的文件.</span></span><br><span class="line">        <span class="comment">// 当要读取main app bundle里的一个文件时,就用到了Bundle.main.url(),</span></span><br><span class="line">        <span class="comment">// Bundle.main.url()得到的是一个optional,所以需要解包.</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: filename, withExtension: <span class="literal">nil</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;Failed to locate <span class="subst">\(filename)</span> in bundle.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data: <span class="type">Data</span> <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">Data</span>(contentsOf: url) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;Failed to load <span class="subst">\(filename)</span> from bundle.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对日期类字符串的显示格式的转换</span></span><br><span class="line">        <span class="comment">// 前提是转换目标的struct中某个property的格式是Date的情况下会自动套用</span></span><br><span class="line">        <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">        formatter.dateFormat <span class="operator">=</span> <span class="string">&quot;y-mm-dd&quot;</span></span><br><span class="line">        decoder.dateDecodingStrategy <span class="operator">=</span> .formatted(formatter)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> loaded <span class="operator">=</span> <span class="keyword">try?</span> decoder.decode(<span class="type">T</span>.<span class="keyword">self</span>, from: data) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;Failed to decode <span class="subst">\(filename)</span> from bundle.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loaded</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,如何调用是个问题:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个代码会出错！！！</span></span><br><span class="line"><span class="keyword">let</span> astronauts <span class="operator">=</span> <span class="type">Bundle</span>.main.decode(<span class="string">&quot;astronauts.json&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码会出现“Generic parameter ‘T’ could not be inferred！<br>那么如何去说明这个generics泛型呢？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是正确调用的代码！！！</span></span><br><span class="line"><span class="comment">// astronauts要说明类型！！！</span></span><br><span class="line"><span class="keyword">let</span> astronauts: [<span class="type">String</span>: <span class="type">Astronaut</span>] <span class="operator">=</span> <span class="type">Bundle</span>.main.decode(<span class="string">&quot;astronauts.json&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="对于JSon数据中存在变量名是snake-case的情况-如何转换成struct的属性名是camel-case-–-keyDecodingStrategy"><a href="#对于JSon数据中存在变量名是snake-case的情况-如何转换成struct的属性名是camel-case-–-keyDecodingStrategy" class="headerlink" title="对于JSon数据中存在变量名是snake case的情况,如何转换成struct的属性名是camel case? – keyDecodingStrategy"></a>对于JSon数据中存在变量名是snake case的情况,如何转换成struct的属性名是camel case? – keyDecodingStrategy</h3><p>一般我们的struct的属性名都是CamelCase的,比如firstName,但我们会遇到某些JSon数据中存在变量名是snake_case的情况,比如first_name,那么如何decode呢？<br>下面的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在sname case结构的字符串存有json数据</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;first_name&quot;: &quot;Andrew&quot;,</span></span><br><span class="line"><span class="string">    &quot;last_name&quot;: &quot;Glouberman&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的步骤:</span></span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="type">Data</span>(str.utf8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">    <span class="comment">// 下面这行是关键</span></span><br><span class="line">    decoder.keyDecodingStrategy <span class="operator">=</span> .convertFromSnakeCase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> user <span class="operator">=</span> <span class="keyword">try</span> decoder.decode(<span class="type">User</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hi, I&#x27;m <span class="subst">\(user.firstName)</span> <span class="subst">\(user.lastName)</span>&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Whoops: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对于struct属性名是firstName-而JSon数据中却只是first的属性名-如何解决并最终正确decode？"><a href="#对于struct属性名是firstName-而JSon数据中却只是first的属性名-如何解决并最终正确decode？" class="headerlink" title="对于struct属性名是firstName,而JSon数据中却只是first的属性名,如何解决并最终正确decode？"></a>对于struct属性名是firstName,而JSon数据中却只是first的属性名,如何解决并最终正确decode？</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSon字符串变成了这样</span></span><br><span class="line"><span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;first&quot;: &quot;Andrew&quot;,</span></span><br><span class="line"><span class="string">    &quot;last&quot;: &quot;Glouberman&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure><p>这时候对User结构进行如何改变:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">CodingKeys</span>: <span class="title class_">String</span>, <span class="title class_">CodingKey</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> firstName <span class="operator">=</span> <span class="string">&quot;first&quot;</span></span><br><span class="line">        <span class="keyword">case</span> lastName <span class="operator">=</span> <span class="string">&quot;last&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以进行decode操作了吗？具体还未操作过,以后遇到了再来补充这个笔记。</p><h3 id="Codable协议"><a href="#Codable协议" class="headerlink" title="Codable协议"></a>Codable协议</h3><p>Codable协议的一个简单实例<br>Codable protocol is composed of Encodable and Decodable.<br>Codable &#x3D; Encodable &amp; Decodable</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSon是类似于&#123;&quot;id&quot;:&quot;1001&quot;,&quot;name&quot;:&quot;Shaddy&quot;,&quot;grade&quot;:11&#125;这样的数据格式,</span></span><br><span class="line"><span class="comment">// 而Codable协议,可编码为在网络上最广泛使用的JSon数据格式,</span></span><br><span class="line"><span class="comment">// 后续进行JSONEncoder().encode()编码时,放入的参数必须遵循该协议</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> grade: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student <span class="operator">=</span> <span class="type">Student</span>(id: <span class="string">&quot;1001&quot;</span>,name: <span class="string">&quot;Shaddy&quot;</span>, grade: <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 将遵循Codable协议的结构,转换为JSon数据</span></span><br><span class="line">    <span class="keyword">let</span> jsonEncoder <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span><br><span class="line">    <span class="comment">// jsonEncoder.encode(_ value: Encodable)</span></span><br><span class="line">    <span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="keyword">try</span> jsonEncoder.encode(student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里为了方便显示,将jsonData转换为字符串形式,实际项目中直接将jsonData传出即可</span></span><br><span class="line">    <span class="keyword">let</span> jsonString <span class="operator">=</span> <span class="type">String</span>(decoding: jsonData, as: <span class="type">UTF8</span>.<span class="keyword">self</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result: <span class="subst">\(jsonString)</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// result: &#123;&quot;id&quot;:&quot;1001&quot;,&quot;name&quot;:&quot;Shaddy&quot;,&quot;grade&quot;:11&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里将json数据解码decode回来</span></span><br><span class="line">    <span class="keyword">let</span> jsonDecoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">    <span class="comment">// jsonDecoder.decode(type: Decodable.Protocol, from: Data)</span></span><br><span class="line">    <span class="keyword">let</span> jsonDecoderData <span class="operator">=</span> <span class="keyword">try</span> jsonDecoder.decode(<span class="type">Student</span>.<span class="keyword">self</span>, from: jsonData)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result: <span class="subst">\(jsonDecoderData)</span>&quot;</span>)</span><br><span class="line">    <span class="comment">// result: Student(id: &quot;1001&quot;, name: &quot;Shaddy&quot;, grade: 11)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.jianshu.com/p/f39994e045d2">https://www.jianshu.com/p/f39994e045d2</a></p></blockquote><p>此外,这是一个Codable协议的具体实例,可以用来处理具体从外部拿到的json数据:<br>视频地址:</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=22">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=22</a></p></blockquote><p>代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct CustomerModel: Identifiable, Decodable, Encodable &#123;</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomerModel</span>: <span class="title class_">Identifiable</span>, <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> points: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> isPremium: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 因为CustomerModel遵循Codable协议,</span></span><br><span class="line">    <span class="comment">// 所以下面的init(from decoder: Decoder)</span></span><br><span class="line">    <span class="comment">// 和enum CodingKeys: String, CodingKey</span></span><br><span class="line">    <span class="comment">// 和func encode(to encoder: Encoder)都不需要去定义了</span></span><br><span class="line"><span class="comment">//    enum CodingKeys: String, CodingKey &#123;</span></span><br><span class="line"><span class="comment">//        case id</span></span><br><span class="line"><span class="comment">//        case name</span></span><br><span class="line"><span class="comment">//        case points</span></span><br><span class="line"><span class="comment">//        case isPremium</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    init(id: String, name: String, points: Int, isPremium: Bool) &#123;</span></span><br><span class="line"><span class="comment">//        self.id = id</span></span><br><span class="line"><span class="comment">//        self.name = name</span></span><br><span class="line"><span class="comment">//        self.points = points</span></span><br><span class="line"><span class="comment">//        self.isPremium = isPremium</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    init(from decoder: Decoder) throws &#123;</span></span><br><span class="line"><span class="comment">//        let container = try decoder.container(keyedBy: CodingKeys.self)</span></span><br><span class="line"><span class="comment">//        self.id = try container.decode(String.self, forKey: .id)</span></span><br><span class="line"><span class="comment">//        self.name = try container.decode(String.self, forKey: .name)</span></span><br><span class="line"><span class="comment">//        self.points = try container.decode(Int.self, forKey: .points)</span></span><br><span class="line"><span class="comment">//        self.isPremium = try container.decode(Bool.self, forKey: .isPremium)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    func encode(to encoder: Encoder) throws &#123;</span></span><br><span class="line"><span class="comment">//        var container = encoder.container(keyedBy: CodingKeys.self)</span></span><br><span class="line"><span class="comment">//        try container.encode(id, forKey: .id)</span></span><br><span class="line"><span class="comment">//        try container.encode(name, forKey: .name)</span></span><br><span class="line"><span class="comment">//        try container.encode(points, forKey: .points)</span></span><br><span class="line"><span class="comment">//        try container.encode(isPremium, forKey: .isPremium)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CodableViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> customer: <span class="type">CustomerModel</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        getData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getData</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> getJSONData() <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        if</span></span><br><span class="line"><span class="comment">//            let localData = try? JSONSerialization.jsonObject(with: data, options: []),</span></span><br><span class="line"><span class="comment">//            let dictionary = localData as? [String: Any],</span></span><br><span class="line"><span class="comment">//            let id = dictionary[&quot;id&quot;] as? String,</span></span><br><span class="line"><span class="comment">//            let name = dictionary[&quot;name&quot;] as? String,</span></span><br><span class="line"><span class="comment">//            let points = dictionary[&quot;points&quot;] as? Int,</span></span><br><span class="line"><span class="comment">//            let isPremium = dictionary[&quot;isPremium&quot;] as? Bool &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            let newCustomer = CustomerModel(id: id, name: name, points: points, isPremium: isPremium)</span></span><br><span class="line"><span class="comment">//            customer = newCustomer</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            self.customer = try JSONDecoder().decode(CustomerModel.self, from: data)</span></span><br><span class="line"><span class="comment">//        &#125; catch let error &#123;</span></span><br><span class="line"><span class="comment">//            print(&quot;Error Decoding. \(error)&quot;)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 因为CustomerModel遵循Decodable协议,所以可以使用JSONEncoder().decode</span></span><br><span class="line">        <span class="keyword">self</span>.customer <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode(<span class="type">CustomerModel</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getJSONData方法是从网站等取得数据的,所以返回的Data是一个Optional,因为有可能失败</span></span><br><span class="line">    <span class="comment">// Data格式理解为是类似Json格式类的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getJSONData</span>() -&gt; <span class="type">Data</span>? &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果拿到的是一个符合CustomerModel的struct,如何转换成jsonData的数据:</span></span><br><span class="line"><span class="comment">//        let customer = CustomerModel(id: &quot;123&quot;, name: &quot;Vi&quot;, points: 100, isPremium: true)</span></span><br><span class="line"><span class="comment">//        // 因为CustomerModel遵循Encodable协议,所以可以使用JSONEncoder().encode</span></span><br><span class="line"><span class="comment">//        let jsonData = try? JSONEncoder().encode(customer)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面是fake了一些json数据</span></span><br><span class="line">        <span class="keyword">let</span> dictionary: [<span class="type">String</span>: <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;12345&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;points&quot;</span>: <span class="number">5</span>, <span class="string">&quot;isPremium&quot;</span>: <span class="literal">true</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用JSONSerialization.data方法将JSONObject转换成JSONData</span></span><br><span class="line">        <span class="keyword">let</span> jsonData <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONSerialization</span>.data(withJSONObject: dictionary, options: [])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonData</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CodableBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">CodableViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> customer <span class="operator">=</span> vm.customer &#123;</span><br><span class="line">                <span class="type">Text</span>(customer.id)</span><br><span class="line">                <span class="type">Text</span>(customer.name)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(customer.points)</span>&quot;</span>)</span><br><span class="line">                <span class="type">Text</span>(customer.isPremium.description)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从特定网页取数据</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> username: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> email: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> phone: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> website: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> company: <span class="type">Company</span></span><br><span class="line">    <span class="keyword">var</span> address: <span class="type">Address</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url2 <span class="operator">=</span> <span class="type">URL</span>(string: “https:<span class="comment">//jsonplaceholder.typicode.com/users&quot;)!</span></span><br><span class="line"><span class="keyword">let</span> session <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line">session.dataTask(with: url2) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> </span><br><span class="line">        <span class="keyword">let</span> data <span class="operator">=</span> data,</span><br><span class="line">        error <span class="operator">==</span> <span class="literal">nil</span>,</span><br><span class="line">        <span class="keyword">let</span> response <span class="operator">=</span> response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>,</span><br><span class="line">        rsponse.statusCode <span class="operator">&gt;=</span> <span class="number">200</span> <span class="operator">&amp;&amp;</span> response.statusCode <span class="operator">&lt;</span> <span class="number">300</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error downloading data.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="comment">//原始解析方法</span></span><br><span class="line"><span class="comment">//                let json = try JSONSerialization.jsonObject(with: data, options: .mutableLeaves)</span></span><br><span class="line"><span class="comment">//                print(json)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> users <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">User</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line"><span class="comment">//        print(users)</span></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> users&#123;</span><br><span class="line">            <span class="built_in">print</span>(user.address.geo.lat)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.resume()</span><br></pre></td></tr></table></figure><h3 id="Binding页面如何初始化preview"><a href="#Binding页面如何初始化preview" class="headerlink" title="@Binding页面如何初始化preview"></a>@Binding页面如何初始化preview</h3><p>因为某些页面有初始化@Binding的变量,那么该页面需要preview的话,如何生成预览呢？<br>一个是自己生成一些测试数据,<br>另一个就是使用.constant函数:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RFSearchListView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">RFSearchListView</span>(items: .constant([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;C&quot;</span>]))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Picturepreview项目中的PicturePreview.swift文件中,<br>使用的是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PicturePreview</span>(pictures: pictures, selectedPicture: .constant(<span class="literal">nil</span>))</span><br></pre></td></tr></table></figure><h3 id="Substring-与-String"><a href="#Substring-与-String" class="headerlink" title="Substring 与 String"></a>Substring 与 String</h3><p>Substring并不是String的子类，这是两个不同的类型，但是它们都继承了StringProtocol协议，因此存在一些共性；在开发中Substring并不常用(目前只在分割String见到)，所以往往要转成String。<br>字符串使用split()分割的时候,得到的是[Sbustring],所以要得到[String]的话,还需要再转换。<br>比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a:[<span class="type">String</span>] <span class="operator">=</span> “”“</span><br><span class="line"><span class="type">A</span></span><br><span class="line"><span class="type">B</span></span><br><span class="line">“””.split(separator: “\n”).map&#123;<span class="type">String</span>(<span class="variable">$0</span>)&#125;</span><br></pre></td></tr></table></figure><p>必须要把Substring转换成String才行。</p><h3 id="Identifiable的使用"><a href="#Identifiable的使用" class="headerlink" title="Identifiable的使用"></a>Identifiable的使用</h3><p>我们知道,当遍历一个结构的时候,<br>比如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SomeItem</span> &#123; <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>() &#125;</span><br><span class="line"><span class="type">ForEach</span>(someItems, id:\.id)</span><br></pre></td></tr></table></figure><p>或者上述结构没有定义id时,则需要用到：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(someItems, id:\.<span class="keyword">self</span>),</span><br></pre></td></tr></table></figure><p>因此需要带有id:.id或者id:.self。<br>但Identifiable就比较方便了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SomeItem</span>: <span class="title class_">Identifiable</span> &#123; <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>() &#125;</span><br></pre></td></tr></table></figure><p>这时候就可以这样简便的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(someItems) &#123; item <span class="keyword">in</span></span><br><span class="line">      <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ForEach中-self使用的注意事项"><a href="#ForEach中-self使用的注意事项" class="headerlink" title="ForEach中\.self使用的注意事项"></a>ForEach中\.self使用的注意事项</h3><p>看了文章,发现ForEach中若使用到id:\.self,则该struct之类的必须实现Hashable,实质上就是把每个item实现hashable,以便能够识别出来。<br>下面对象遵循了Identifiable协议,也是变相地遵循Hashable以便能够识别。</p><p>如果一个对象遵循Identifiable协议,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">UUID</span> <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> strings: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> colors: [<span class="type">Color</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么可以在ForEach中这样使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> students: [<span class="type">Student</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Student</span>(name: <span class="string">&quot;A&quot;</span>, strings: [<span class="string">&quot;a&quot;</span>], colors: [<span class="type">Color</span>(.green)]),</span><br><span class="line">    <span class="type">Student</span>(name: <span class="string">&quot;B&quot;</span>, strings: [<span class="string">&quot;b&quot;</span>], colors: [<span class="type">Color</span>(.green)]),</span><br><span class="line">    <span class="type">Student</span>(name: <span class="string">&quot;C&quot;</span>, strings: [<span class="string">&quot;c&quot;</span>], colors: [<span class="type">Color</span>(.red)])</span><br><span class="line">]</span><br><span class="line"><span class="type">ForEach</span>(students) &#123; student <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(student.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示结果为：</p><blockquote><p>A B C</p></blockquote><p>当Student遵循Identifiable协议时,ForEach中就不必使用id:\.self。<br>如果不遵循Identifiable协议时,就需要我们指定唯一属性的key path,<br>（Student下面的name&#x2F;strings&#x2F;colors属性都可以作为key path来使用,<br>因为都可以计算哈希值）<br>但如果连key path也没有的话,我们可以用\.self。<br>当使用\.self时,就是将整个结构对象的组合(如students)中的每个元素来一一迭代的话,<br>就需要被迭代的每个元素结构遵循Hashable协议，例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> strings: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> colors: [<span class="type">Color</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,ForEach内可以使用id的是:<br>\.self | \.name | \.strings | \.colors<br>而如果Student既不遵循Identifiable,也不遵循Hashable:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> strings: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">var</span> colors: [<span class="type">Color</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么ForEach内可以使用id的是:<br>\.name | \.strings | \.colors<br>也就是说\.self不能使用。</p><p>实际上,ForEach是在检索每个被迭代元素的哈希值,所以对于一个结构来说，一定要经过遵循并计算哈希值后,才可以被迭代。</p><p>如果哈希值相同的情况,会出现什么问题呢？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(students, id:\.colors) &#123;</span><br><span class="line">    student <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(student.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Students中前两个元素的colors属性完全相同,<br>那么初始计算的时候,这两个元素的索引哈希值也相同,<br>所以显示结果是：</p><blockquote><p>A A C</p></blockquote><p>这是平时使用当中需要注意的问题。</p><h3 id="ForEach既取得Array的元素-又取得Array的index-还能让Array中的元素调换次序但不会造成程序错误的方式"><a href="#ForEach既取得Array的元素-又取得Array的index-还能让Array中的元素调换次序但不会造成程序错误的方式" class="headerlink" title="ForEach既取得Array的元素,又取得Array的index,还能让Array中的元素调换次序但不会造成程序错误的方式"></a>ForEach既取得Array的元素,又取得Array的index,还能让Array中的元素调换次序但不会造成程序错误的方式</h3><p>例如有一个Array,里面的元素都是一个Card结构的,即cards 是 [Card],如何迭代这个cards,既能取得每个元素,还能取得每个元素的index,同时我删减、改变位置等等都不会让这次迭代出问题.<br>之前都是这么迭代的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span>cards.count, id:\.<span class="keyword">self</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 内容省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你要是做类似次序改变什么的操作,会出问题,<br>所以我们应该这么做:<br>前提是,该Array中元素必须符合Identifiable和Hashable协议,就是每个元素都有独有的识别特征,保持数据的唯一性,<br>接下来的代码应该是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ForEach</span>(<span class="type">Array</span>(cards.enumerated()), id:\.element) &#123; item <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 此时item.element代表元素本身</span></span><br><span class="line">    <span class="comment">// 同时item.offset代表元素的index</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Alamofire模块的导入及使用"><a href="#Alamofire模块的导入及使用" class="headerlink" title="Alamofire模块的导入及使用"></a>Alamofire模块的导入及使用</h3><p>注:Alamofire是使用Swift写的用来实现网络请求的模块。</p><h4 id="Alamofire模块的导入"><a href="#Alamofire模块的导入" class="headerlink" title="Alamofire模块的导入"></a>Alamofire模块的导入</h4><ol><li>从github下载, <a href="https://gitcode.net/mirrors/Alamofire/">https://gitcode.net/mirrors/Alamofire/</a> ,并解压</li><li>打开需要使用Alamofire的项目,菜单栏中:File-&gt;Add Files to “项目名称”</li><li>在弹出选择界面勾选“Copy items if needed”,找到下载解压好的Alamofire位置,选择Alamofire.xcodeproj</li><li>但有时以上做完,还是无法import Alamofire,这时要在xcode的项目目录，选择最外层这个项目名称，基本的General设置里的Frameworks,Libraries,and Embedded Content里将Alamofire添加到项目的静态库中</li><li>接下来项目就可以import Alamofire了。</li></ol><h4 id="Alamofire模块的使用"><a href="#Alamofire模块的使用" class="headerlink" title="Alamofire模块的使用"></a>Alamofire模块的使用</h4><p>貌似还没法用,下次有机会再试一下<br>关于使用方法在：<a href="https://www.jianshu.com/p/07b1ec36a689">https://www.jianshu.com/p/07b1ec36a689</a><br>里面讲到了使用Alamofire进行GET&#x2F;post及使用的细则。</p><h3 id="ProgressView-进度条"><a href="#ProgressView-进度条" class="headerlink" title="ProgressView 进度条"></a>ProgressView 进度条</h3><p>用法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProgressView</span>(value: <span class="number">5</span>, total: <span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProgressView</span>(value: <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>如果不设置范围,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ProgressView</span>(<span class="string">&quot;Downloading…&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/progressview-1.gif" alt="progressview-1.mp4"></p><h4 id="progressViewStyle"><a href="#progressViewStyle" class="headerlink" title=".progressViewStyle"></a>.progressViewStyle</h4><p>为了让progress进度条更好看一些,<br>创建一个SwiftUI文件,比如ScrumProgressViewStyle.swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ScrumProgressViewStyle</span>: <span class="title class_">ProgressViewStyle</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> color1: <span class="type">Color</span> </span><br><span class="line">    <span class="keyword">var</span> color2: <span class="type">Color</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10.0</span>)</span><br><span class="line">                .fill(color1)</span><br><span class="line">                .frame(height: <span class="number">20.0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">15.0</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">                <span class="type">ProgressView</span>(configuration)</span><br><span class="line">                    .tint(color2)</span><br><span class="line">                    .frame(height: <span class="number">12.0</span>)</span><br><span class="line">                    .padding(.horizontal)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ProgressView</span>(configuration)</span><br><span class="line">                    .frame(height: <span class="number">12.0</span>)</span><br><span class="line">                    .padding(.horizontal)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ScrumProgressViewStyle_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ProgressView</span>(value: <span class="number">0.4</span>)</span><br><span class="line">            .progressViewStyle(<span class="type">ScrumProgressViewStyle</span>(color1: .blue, color2: .green))</span><br><span class="line">            .previewLayout(.sizeThatFits)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/progressViewStyle.png" alt="&quot;progressViewStyle&quot;"></p><h3 id="为Label的-labelStyle这一modifier-创建新的样式即-trailingIcon-并遵循LabelStyle协议"><a href="#为Label的-labelStyle这一modifier-创建新的样式即-trailingIcon-并遵循LabelStyle协议" class="headerlink" title="为Label的.labelStyle这一modifier,创建新的样式即.trailingIcon,并遵循LabelStyle协议"></a>为Label的.labelStyle这一modifier,创建新的样式即.trailingIcon,并遵循LabelStyle协议</h3><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Label</span>(<span class="string">&quot;10&quot;</span>, systemImage: <span class="string">&quot;clock)</span></span><br><span class="line"><span class="string">    .labelStyle(.xxx) </span></span><br></pre></td></tr></table></figure><p>其中.xxx可以选择 .iconOnly &#x2F; .titleAndIcon &#x2F; .titleOnly等等来使用<br>(只显示icon &#x2F; 按照 icon + title 的次序显示 &#x2F; 只显示title)。<br>而此处为其添加新的选项,即 .trailingIcon,看字面意思就是和.titleAndIcon相反的,<br>即把Icon放最后,而title放前面的意思。<br>具体实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrailingIconLabelStyle</span>: <span class="title class_">LabelStyle</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            configuration.title</span><br><span class="line">            configuration.icon</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">LabelStyle</span> <span class="title class_">where</span> <span class="title class_">Self</span> == <span class="title class_">TrailingIconLabelStyle</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> trailingIcon: <span class="keyword">Self</span> &#123; <span class="keyword">Self</span>() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Label</span>(<span class="string">&quot;10&quot;</span>, systemImage: <span class="string">&quot;clock&quot;</span>)</span><br><span class="line">    .labelStyle(.trailingIcon)</span><br></pre></td></tr></table></figure><h3 id="onDelete-–-ForEach所独有的删除内部元素的功能"><a href="#onDelete-–-ForEach所独有的删除内部元素的功能" class="headerlink" title=".onDelete – ForEach所独有的删除内部元素的功能"></a>.onDelete – ForEach所独有的删除内部元素的功能</h3><blockquote><p>注意: List没有.onDelete这个midifier,但一般都是List里面嵌套ForEach,在ForEach上添加.onDelete。</p></blockquote><p>在Section内使用Foreach来依次显示列表内的内容时,<br>在ForEach内可以使用.onDelete来划动删除特定项。<br>当划动特定项时,会出现划动后的红色“删除”字样：<br><img src="/./Images/ForEach-onDelete.jpg" alt="SwiftLogo"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;Attendees&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(data.attendees) &#123; attendee <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(attendee.name)</span><br><span class="line">    &#125;</span><br><span class="line">    .onDelete &#123; indices <span class="keyword">in</span></span><br><span class="line">        data.attendees.remove(atOffsets: indices)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="swipeAction-edge-allowsFullSwipe-content-好于-onDelete功能"><a href="#swipeAction-edge-allowsFullSwipe-content-好于-onDelete功能" class="headerlink" title=".swipeAction(edge:allowsFullSwipe:content:) 好于.onDelete功能"></a>.swipeAction(edge:allowsFullSwipe:content:) 好于.onDelete功能</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子中是放在List里面,而非Section中</span></span><br><span class="line"><span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">&quot;Attendees&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">ForEach</span>(data.attendees) &#123; attendee <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(attendee.name)</span><br><span class="line">    &#125;</span><br><span class="line">    .swipeActions(edge: .trailing,</span><br><span class="line">        allowsFullSwipe: <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Archive&quot;</span>) &#123;&#125;</span><br><span class="line">                .tint(.green)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Save&quot;</span>) &#123;&#125;</span><br><span class="line">                .tint(.blue)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Junk&quot;</span>) &#123;&#125;</span><br><span class="line">                .tint(.black)</span><br><span class="line">        &#125;</span><br><span class="line">    .swipeActions(edge: .leading,</span><br><span class="line">        allowsFullSwipe: <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Share&quot;</span>) &#123;&#125;</span><br><span class="line">                .tint(.yellow)</span><br><span class="line">        &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面,对每个字元素右滑动,会出现三个选项:”Archive”&#x2F;“Save”&#x2F;“Junk”,<br>而左滑动会出现一个选项:”Share”.<br>allowsFullSwipe表示是否从头滑到尾。一般一个按钮的时候可以,多个按钮的时候不建议。</p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><h3 id="停用Button-–-disabled"><a href="#停用Button-–-disabled" class="headerlink" title="停用Button – .disabled"></a>停用Button – .disabled</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(action:&#123;&#125;) &#123;&#125;</span><br><span class="line">    .disabled(someBoolVariableIsEmpty)</span><br></pre></td></tr></table></figure><p>当变量someBoolVariableIsEmpty为true时,该Button将会被停用。</p><h3 id="buttonStyle-xxx-x2F-controlSize-large-x2F-buttonBorderShape-xxx"><a href="#buttonStyle-xxx-x2F-controlSize-large-x2F-buttonBorderShape-xxx" class="headerlink" title=".buttonStyle(.xxx) &#x2F; .controlSize(.large) &#x2F; .buttonBorderShape(.xxx)"></a>.buttonStyle(.xxx) &#x2F; .controlSize(.large) &#x2F; .buttonBorderShape(.xxx)</h3><p>Button的修饰符.buttonStyle(.xxx)以及.controlSize(.xxx) &#x2F; .buttonBorderShape(.xxx)<br>可以在使用的时候自己调试下,一些系统默认给的样式。</p><h3 id="sheet-modifier-on-List-的使用"><a href="#sheet-modifier-on-List-的使用" class="headerlink" title="sheet modifier on List 的使用"></a>sheet modifier on List 的使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>()</span><br><span class="line">    .sheet(isPresented: <span class="variable">$isPresented</span>) &#123;</span><br><span class="line">        <span class="operator">...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参数isPresented需要传入的是一个Binding<Bool>。<br>可以这样理解,因为该sheet会被下拉而退出,<br>但若下拉后该isPresented参数不被变更为false,则sheet仍会被展现,<br>这明显是错误的,所以需要进行绑定参数,而非仅仅传一个值给sheet。</p><h3 id="sheet加载的View页面的dismiss"><a href="#sheet加载的View页面的dismiss" class="headerlink" title="sheet加载的View页面的dismiss"></a>sheet加载的View页面的dismiss</h3><h4 id="使用-Environment-presentationMode-不显示该View"><a href="#使用-Environment-presentationMode-不显示该View" class="headerlink" title="使用@Environment(.presentationMode)不显示该View"></a>使用@Environment(.presentationMode)不显示该View</h4><p>在sheet加载的View中设定一个变量:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationMode</span><br></pre></td></tr></table></figure><p>当要不显示该View时,执行代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">presentationMode.wrappedValue.dismiss()</span><br></pre></td></tr></table></figure><p>即可。</p><h3 id="sheet页面的大小控制-presentationDetents-–-modifier"><a href="#sheet页面的大小控制-presentationDetents-–-modifier" class="headerlink" title="sheet页面的大小控制 presentationDetents() – modifier"></a>sheet页面的大小控制 presentationDetents() – modifier</h3><p>可控制sheet页面的大小,一般都是large,占据整个页面,可以设置成medium,或者按照百分比,或具体高度等。</p><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-display-a-bottom-sheet">https://www.hackingwithswift.com/quick-start/swiftui/how-to-display-a-bottom-sheet</a></p></blockquote><h4 id="使用-Environment-dismiss"><a href="#使用-Environment-dismiss" class="headerlink" title="使用@Environment(.dismiss)"></a>使用@Environment(.dismiss)</h4><p>在sheet加载的View中设定一个变量:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.dismiss) <span class="keyword">var</span> dismiss</span><br></pre></td></tr></table></figure><p>当要不显示该View时,执行代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dismiss()</span><br></pre></td></tr></table></figure><p>即可。</p><h4 id="interactiveDismissDisabled-–-modifier-禁止下划释放页面"><a href="#interactiveDismissDisabled-–-modifier-禁止下划释放页面" class="headerlink" title=".interactiveDismissDisabled() – modifier 禁止下划释放页面"></a>.interactiveDismissDisabled() – modifier 禁止下划释放页面</h4><p>使用.sheet()等可以放出页面,这时可以通过下划来释放该页面。<br>但使用.interactiveDismissDisabled()可以禁止该行为。<br>.interactiveDismissDisabled()默认没有参数,也可以放入true,即不允许下划释放页面,当放入false,即允许下划释放页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ExampleSheet</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.presentationMode) <span class="keyword">var</span> presentationMode</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> termsAccepted <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Terms and conditions&quot;</span>)</span><br><span class="line">                .font(.title)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Lots of legalese here.&quot;</span>)</span><br><span class="line">            <span class="type">Toggle</span>(<span class="string">&quot;Accept&quot;</span>, isOn: <span class="variable">$termsAccepted</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .interactiveDismissDisabled(<span class="operator">!</span>termsAccepted)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">close</span>() &#123;</span><br><span class="line">        presentationMode.wrappedValue.dismiss()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingSheet <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Show Sheet&quot;</span>) &#123;</span><br><span class="line">            showingSheet.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .sheet(isPresented: <span class="variable">$showingSheet</span>, content: <span class="type">ExampleSheet</span>.<span class="keyword">init</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/interactiveDismissDisabled.gif" alt="interactiveDismissDisabled"></p><h3 id="fullScreenCover-–-modifier"><a href="#fullScreenCover-–-modifier" class="headerlink" title=".fullScreenCover – modifier"></a>.fullScreenCover – modifier</h3><p>类似于.sheet(),参数也是一样的,但是可以全屏显示的View</p><blockquote><p>.fullScreenCover(isPresented: content:)</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.fullScreenCover(isPresented:<span class="variable">$variable</span>, content: &#123;</span><br><span class="line">    <span class="type">OtherView</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是.sheet()加载的弹出页面可以下拉操作,.fullScreenzCover()不可以,所以还是推荐前者。</p><h3 id="toolbar-此modifier-的使用"><a href="#toolbar-此modifier-的使用" class="headerlink" title="toolbar 此modifier 的使用"></a>toolbar 此modifier 的使用</h3><p>在List的右上角显示工具栏<br>显示一个”edit”的button按钮：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>()</span><br><span class="line">    .toolbar &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;edit&quot;</span>) &#123;</span><br><span class="line">            <span class="operator">...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在一个View上面显示”Cancel”和”Done”按钮：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">View</span>()</span><br><span class="line">    .toolbar &#123;</span><br><span class="line">        <span class="type">ToolbarItem</span>(placement: .cancellationAction) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>) &#123;</span><br><span class="line">                isPresentingEditView <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ToolbarItem</span>(placement: .confirmationAction) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Done&quot;</span>) &#123;</span><br><span class="line">                isPresentingEditView <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                scrum.update(from: data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>两个按钮是平行排列的，感觉当中还夹着一个Spacer()。<br>或者不用两个ToolbarItem的话,可以只使用一个ToolbarItemGroup来实现,里面直接放两个Button。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>).padding()</span><br><span class="line">        .navigationTitle(<span class="string">&quot;SwiftUI&quot;</span>)</span><br><span class="line">        .toolbar &#123;</span><br><span class="line">            <span class="type">ToolbarItemGroup</span>(placement: .bottomBar) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;First&quot;</span>) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Pressed&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line"></span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Second&quot;</span>) &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Pressed&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/ToolbarItemGroup.gif" alt="ToolbarItemGroup"></p><h4 id="toolbar-之-默认方法EditButton-的使用-–-也是针对ForEach而使用"><a href="#toolbar-之-默认方法EditButton-的使用-–-也是针对ForEach而使用" class="headerlink" title="toolbar 之 默认方法EditButton()的使用 – 也是针对ForEach而使用"></a>toolbar 之 默认方法EditButton()的使用 – 也是针对ForEach而使用</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span>&#123;</span><br><span class="line">    <span class="type">ForEach</span>(<span class="operator">...</span>) &#123;</span><br><span class="line">        <span class="operator">......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.toolbar &#123;</span><br><span class="line">    <span class="comment">// 会让展示列表的各个选项前出现类似删除的标志</span></span><br><span class="line">    <span class="type">EditButton</span>()</span><br><span class="line">    <span class="comment">// 但点击后一点反应也没有,它是如何运作的呢？</span></span><br><span class="line">    <span class="comment">// 看下面的比较全面的案例！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> editMode <span class="operator">=</span> <span class="type">EditMode</span>.inactive</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> items: [<span class="type">Item</span>] <span class="operator">=</span> (<span class="number">0</span><span class="operator">..&lt;</span><span class="number">5</span>).map &#123; <span class="type">Item</span>(title: <span class="string">&quot;Item #<span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>) &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> count <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">NavigationView</span>&#123;</span><br><span class="line">            <span class="type">List</span>&#123;</span><br><span class="line">                <span class="type">ForEach</span>(items)&#123;item <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(item.title)</span><br><span class="line">                &#125;</span><br><span class="line">                .onDelete(perform: &#123;offsets <span class="keyword">in</span></span><br><span class="line">                    items.remove(atOffsets: offsets)</span><br><span class="line">                &#125;)</span><br><span class="line">                .onMove(perform: &#123; source, destination <span class="keyword">in</span></span><br><span class="line">                    items.move(fromOffsets: source, toOffset: destination)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            .onAppear()&#123;</span><br><span class="line">                count <span class="operator">=</span> items.count</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationBarTitle(<span class="string">&quot;List&quot;</span>)</span><br><span class="line">            .navigationBarItems(leading: <span class="type">EditButton</span>(), trailing: <span class="type">Button</span>(<span class="string">&quot;Add&quot;</span>, action: &#123;</span><br><span class="line">                items.append(<span class="type">Item</span>(title: <span class="string">&quot;Item #<span class="subst">\(count)</span>&quot;</span>))</span><br><span class="line">                count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;))</span><br><span class="line">            .environment(\.editMode, <span class="variable">$editMode</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现:<br>1.点击EditButton的Edit按钮,会显示ForEach后面修饰的.onDelete和.onMove修饰符,说明写在List上的EditButton,其实是激活了List里面ForEach修饰的各种方法,其中就包括上面写好的.onDelete和.onMove;<br>2.这里有一个@State var editMode &#x3D; EditMode.inactive和.environment(.editMode, $editMode),这里还有一个案例,可以使用到这个EditMode:<br>(就是根据EditMode状态的不同,而显示不同的按钮)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Item</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> i <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.title <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(Item.i)</span>&quot;</span></span><br><span class="line">        <span class="type">Item</span>.i <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView2</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isEditMode: <span class="type">EditMode</span> <span class="operator">=</span> .inactive</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> selection <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">UUID</span>&gt;()</span><br><span class="line">    <span class="keyword">var</span> items <span class="operator">=</span> [<span class="type">Item</span>(), <span class="type">Item</span>(), <span class="type">Item</span>(), <span class="type">Item</span>(), <span class="type">Item</span>()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(selection: <span class="variable">$selection</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(items) &#123; item <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(item.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationBarTitle(<span class="type">Text</span>(<span class="string">&quot;Demo&quot;</span>))</span><br><span class="line">            .navigationBarItems(</span><br><span class="line">                leading: <span class="type">EditButton</span>(),</span><br><span class="line">                trailing: addDelButton</span><br><span class="line">            )</span><br><span class="line">            .environment(\.editMode, <span class="keyword">self</span>.<span class="variable">$isEditMode</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据isEditMode的状态来改变显示不同的按钮:</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> addDelButton: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> isEditMode <span class="operator">==</span> .inactive &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Button</span>(action: reset) &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;plus&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Button</span>(action: reset) &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;trash&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">reset</span>() &#123;</span><br><span class="line">        selection <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">UUID</span>&gt;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.以上案例还用到了List(selection:)</p><h4 id="toolbar-之-EditButton-的单选或多选元素的操作"><a href="#toolbar-之-EditButton-的单选或多选元素的操作" class="headerlink" title="toolbar 之 EditButton()的单选或多选元素的操作"></a>toolbar 之 EditButton()的单选或多选元素的操作</h4><p>下面例子是多选元素:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selection <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line">    <span class="comment">// 单选的话改成 @State private var selection: String?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> names <span class="operator">=</span> [</span><br><span class="line">        <span class="string">&quot;Cyril&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Lana&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mallory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sterling&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(names, id: \.<span class="keyword">self</span>, selection: <span class="variable">$selection</span>) &#123; name <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(name)</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;List Selection&quot;</span>)</span><br><span class="line">            .toolbar &#123;</span><br><span class="line">                <span class="type">EditButton</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/row-selection.gif" alt="row selection"></p><h3 id="List-之-refreshable-modifier-–-下拉更新"><a href="#List-之-refreshable-modifier-–-下拉更新" class="headerlink" title="List 之 refreshable() modifier – 下拉更新"></a>List 之 refreshable() modifier – 下拉更新</h3><p>通过下滑出现更新操作。<br>代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NewsItem</span>: <span class="title class_">Decodable</span>, <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> strap: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> news <span class="operator">=</span> [</span><br><span class="line">        <span class="type">NewsItem</span>(id: <span class="number">0</span>, title: <span class="string">&quot;Want the latest news?&quot;</span>, strap: <span class="string">&quot;Pull to refresh!&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(news) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                    <span class="type">Text</span>(item.title)</span><br><span class="line">                        .font(.headline)</span><br><span class="line">                    <span class="type">Text</span>(item.strap)</span><br><span class="line">                        .foregroundColor(.secondary)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .refreshable &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">// Fetch and decode JSON into news items</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://www.hackingwithswift.com/samples/news-1.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">                    <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">                    news <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">NewsItem</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">                &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                    <span class="comment">// Something went wrong; clear the news</span></span><br><span class="line">                    news <span class="operator">=</span> []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/refreshable.gif" alt="refreshable"></p><h3 id="State-与-StateObject-x2F-ObservedObject-x2F-EnvironmentObject-的区别？"><a href="#State-与-StateObject-x2F-ObservedObject-x2F-EnvironmentObject-的区别？" class="headerlink" title="@State 与 @StateObject &#x2F; @ObservedObject &#x2F; @EnvironmentObject 的区别？"></a>@State 与 @StateObject &#x2F; @ObservedObject &#x2F; @EnvironmentObject 的区别？</h3><p>the @State property wrapper works only for value types, such as structures and enumerations.<br>@ObservedObject, @StateObject, and @EnvironmentObject declare a reference type as a source of truth. To use these property wrappers with your class, you need to make your class observable.<br>总结下来:<br>1.@State 仅用于Struct 和 Enum 等 值类型，存储在View内部；而@StateObject、@ObservedObject和@EnvironmentObject用于引用类型,即class对象，存储在View外部（但可以在View内部命名）。<br>2.若要使用@ObservedObject、@StateObject和@EnvironmentObject的话，要使得对应的class实现ObservableObject协议。</p><h3 id="StateObject-x2F-ObservedObject-两者如何区别使用"><a href="#StateObject-x2F-ObservedObject-两者如何区别使用" class="headerlink" title="@StateObject &#x2F; @ObservedObject 两者如何区别使用?"></a>@StateObject &#x2F; @ObservedObject 两者如何区别使用?</h3><p>看下来的心得：<br>定义@ObservedObject的View,如果是作为subView的话,那么当parentView中的视图存在更新的情况下,这个subView中的@ObservedObject属性就会再次创建。因此,subView只做展示,该subView自身不会主动做数据更新(若要自身主动更新,则使用@StateObject,但注意性能消耗问题）。<br>但另一种情况,parentView是通过@StateObject来创建对象,subView中是使用了@ObservedObject来接收对象,则不会让页面的数据产生错乱。例如下面的例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserProgress</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> score <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">InnerView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// subView使用@ObservedObject来接收对象！！！</span></span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> progress: <span class="type">UserProgress</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Increase Score&quot;</span>) &#123;</span><br><span class="line">            progress.score <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// parentView使用@StateObject来创建对象！！！</span></span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> progress <span class="operator">=</span> <span class="type">UserProgress</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Your score is <span class="subst">\(progress.score)</span>&quot;</span>)</span><br><span class="line">            <span class="type">InnerView</span>(progress: progress)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上,因为InnerView是来接收这个progress引用变量的,所以可以改变它,相应会反馈到parent view中。<br>记住: 不要使用@ObservedObject来创建实例,假如你真的要这么做,使用@StateObject.</p><p>下面的内容是从其他地方总结下来的,暂且放一下吧,领会上面的就够了,而且验证下来上面是对的。</p><blockquote><p><a href="https://blog.csdn.net/fzhlee/article/details/114269326">https://blog.csdn.net/fzhlee/article/details/114269326</a><br>若是在某个View中使用@ObservedObject来创建一个实例,当这个View页面刷新时,这个@ObservedObject创建的实例会再次创建,这会给大多数场景带来意外(比如你已经改变过该实例的属性的值了,突然它又重新创建了一遍,那改变的值又还原了)。所以,此时使用@StateObject来创建实例比较好,因为它有储存属性,而不像@ObservedObject,具有@ObservedObject的视图,但没有保留ObservableObject，则每次该视图重绘其主体时都会创建一个新实例。</p></blockquote><p>但是,这不意味着要将所有@ObservedObject属性均标记为@StateObject。若每次重新绘制视图时,都要重新创建@StateObject实例的话,则会消耗性能。此外,如果本意就是要创建一个新的实例的情况下,那么新实例就会被忽略,从而引起一个隐藏的错误。</p><p>简单来说,对于在使用它的视图中初始化的所有可观察属性，都应使用@StateObject。如果ObservableObject实例是在外部创建的，并传递给使用它的视图，请使用@ObservedObject标记您的属性。 </p><p>@StateObject – Use this on certain &#x2F; init<br>@ObservedObject – use this for subviews</p><p>我们也可以说,@EnvironmentObject与@StateObject一样,都有存储属性。</p><p>此外,从外部文章中找到的 @StateObject &#x2F; @ObservedObject 两者如何区别使用的解答:<br>When you want to use a class instance elsewhere – when you’ve created it in view A using @StateObject and want to use that same object in view B – you use a slightly different property wrapper called @ObservedObject. That’s the only difference: when creating the shared data use @StateObject, but when you’re just using it in a different view you should use @ObservedObject instead.</p><h3 id="如何让-Published-遵循Codable协议"><a href="#如何让-Published-遵循Codable协议" class="headerlink" title="如何让 @Published 遵循Codable协议"></a>如何让 @Published 遵循Codable协议</h3><p>我们定义一个名为User的class,并遵循Codable协议,再定义一个@Published属性name:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">ObservableObject</span>, <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Paul Hudson&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错信息为：<br>Type ‘User’ does not conform to protocol ‘Encodable’.<br>如何解决这个问题:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/adding-codable-conformance-for-published-properties">https://www.hackingwithswift.com/books/ios-swiftui/adding-codable-conformance-for-published-properties</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">ObservableObject</span>, <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Paul Hudson&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">CodingKeys</span>: <span class="title class_">CodingKey</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">from</span> <span class="params">decoder</span>: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">        name <span class="operator">=</span> <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">encode</span>(<span class="params">to</span> <span class="params">encoder</span>: <span class="type">Encoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> container <span class="operator">=</span> encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">try</span> container.encode(name, forKey: .name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>1.设置遵循CodingKey的enum;<br>2.设置required init(from decoder: Decoder) throws,里面包含到需要decode的@Published元素;<br>3.设置encode方法,并设置需要encode的@Published元素;<br>4.只要设置了以上,发现@Published元素即使有很多,只要设置你需要encode和decode的@Published元素即可,并不是每个都要去设置encode和decode的。</p><h3 id="EnvironmentObject-传值的简单示例"><a href="#EnvironmentObject-传值的简单示例" class="headerlink" title="@EnvironmentObject 传值的简单示例"></a>@EnvironmentObject 传值的简单示例</h3><p>这是需要共享的基本数据：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="comment">// 因为需要传递这个对象给其他View,所以定义private会让意图混淆,虽然可能你写了private也不大会出错</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Taylor Swift&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是两个用来接收上述数据的结构类型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">EditView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextField</span>(<span class="string">&quot;Name&quot;</span>, text: <span class="variable">$user</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DisplayView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(user.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么,在ContentView中,如何向EditView()和DisplayView传递一个User对象？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">EditView</span>().environmentObject(user)</span><br><span class="line">            <span class="type">DisplayView</span>().environmentObject(user)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以把ContentView改成这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">EditView</span>()</span><br><span class="line">    <span class="type">DisplayView</span>()</span><br><span class="line">&#125;</span><br><span class="line">.environmentObject(user)</span><br></pre></td></tr></table></figure><p>上例把 user 放到 ContentView 的环境中，但是因为 EditView 和 DisplayView 都是 ContentView 的子视图，所以它们自动继承了 ContentView 的环境。</p><h4 id="environmentObject-user-和-EnvironmentObject-var-user-User-之间是如何建立联系的？"><a href="#environmentObject-user-和-EnvironmentObject-var-user-User-之间是如何建立联系的？" class="headerlink" title=".environmentObject(user) 和 @EnvironmentObject var user: User 之间是如何建立联系的？"></a>.environmentObject(user) 和 @EnvironmentObject var user: User 之间是如何建立联系的？</h4><p>你会发现,.environmentObject(user)中只有一个user,而不是(user:user),那@EnvironmentObject var user: User是如何正确识别并接收的呢？<br>查了资料,有称是通过字典的类型存键和类型存值来进行的。比如键存的是数据类型,就是User,而值就是User()。<br>真的是这样吗？<br>那如果我同时传递两个相同类型的对象,接收方如何区分？<br>看到一片解释是:<br>That @EnvironmentObject property wrapper will automatically look for a User instance in the environment, and place whatever it finds into the user property. If it can’t find a User in the environment your code will just crash.<br>但貌似也没解释问题所在。</p><h3 id="badge-的使用"><a href="#badge-的使用" class="headerlink" title=".badge() 的使用"></a>.badge() 的使用</h3><p>一般用于 List &#x2F; TabView 上.<br>List的Text上使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会在第一个Text后面多一个5的标识,某些场景应该用的到</span></span><br><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello, world&quot;</span>)</span><br><span class="line">        .badge(<span class="number">5</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/badgeAndList.png" alt="&quot;badgeAndList&quot;"><br>若没有List,你光在Text下加badge是没有用的.</p><p>在TabView上使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line">    <span class="type">Color</span>.red</span><br><span class="line">        .tabItem &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;heart.fill&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .badge(<span class="string">&quot;New&quot;</span>) <span class="comment">// 在Image上角上有一个标识,可以代表有新内容</span></span><br><span class="line">        <span class="comment">// .badge(2) 可以表示有2个更新</span></span><br><span class="line">    <span class="type">Color</span>.green.opacity(<span class="number">0.5</span>)</span><br><span class="line">        .tabItem &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;heart.fill&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/badgeAndTabView.png" alt="&quot;badgeAndTabView&quot;"><br>以上在tabItem中使用Image和Text的组合,不如可以使用Label,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他代码省略</span></span><br><span class="line"><span class="type">TabView</span> &#123;</span><br><span class="line"><span class="type">Color</span>.red</span><br><span class="line">    .tabItem &#123;</span><br><span class="line">        <span class="type">Label</span>(<span class="string">&quot;Hello&quot;</span>, systemImage: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .badge(<span class="string">&quot;New&quot;</span>) </span><br><span class="line"><span class="comment">// 以下代码略...</span></span><br></pre></td></tr></table></figure><p>Badge在List上使用,会自动在list的右侧使用secondary颜色来显示:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Wi-Fi&quot;</span>)</span><br><span class="line">        .badge(<span class="string">&quot;LAN Solo&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Bluetooth&quot;</span>)</span><br><span class="line">        .badge(<span class="string">&quot;On&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/badge-list.webp" alt="badge-list"></p><h3 id="FocusState-的使用-让TextField受到focused"><a href="#FocusState-的使用-让TextField受到focused" class="headerlink" title="@FocusState 的使用 (让TextField受到focused)"></a>@FocusState 的使用 (让TextField受到focused)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FocusStateBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @FocusState不需要赋值,下面的TextField的.focused会自动改变值</span></span><br><span class="line">    <span class="meta">@FocusState</span> <span class="keyword">private</span> <span class="keyword">var</span> usernameInFocus: <span class="type">Bool</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> username: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@FocusState</span> <span class="keyword">private</span> <span class="keyword">var</span> passwordInFocus: <span class="type">Bool</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> password: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Add your name here ...&quot;</span>, text: <span class="variable">$username</span>)</span><br><span class="line">                .focused(<span class="variable">$usernameInFocus</span>)</span><br><span class="line">                .padding(.leading)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity)</span><br><span class="line">                .background(<span class="type">Color</span>.gray.brightness(<span class="number">0.3</span>))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">SecureField</span>(<span class="string">&quot;Add your password here ...&quot;</span>, text: <span class="variable">$password</span>)</span><br><span class="line">                .focused(<span class="variable">$passwordInFocus</span>)</span><br><span class="line">                .padding(.leading)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity)</span><br><span class="line">                .background(<span class="type">Color</span>.gray.brightness(<span class="number">0.3</span>))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Sign Up 🚀&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> usernameIsValid <span class="operator">=</span> <span class="operator">!</span>username.isEmpty</span><br><span class="line">                <span class="keyword">let</span> passwordIsValid <span class="operator">=</span> <span class="operator">!</span>password.isEmpty</span><br><span class="line">                <span class="keyword">if</span> usernameIsValid <span class="operator">&amp;&amp;</span> passwordIsValid &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Sign Up&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> usernameIsValid &#123;</span><br><span class="line">                    usernameInFocus <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                    passwordInFocus <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    usernameInFocus <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                    passwordInFocus <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">0.5</span>) &#123;</span><br><span class="line">                <span class="keyword">self</span>.usernameInFocus <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码设置太多@FocusState,所以用enum来简洁代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FocusStateBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="comment">// 为什么要符合Hashable,因为下面.focused的参数binding要求</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">OnboardingFields</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> username, password</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @FocusState private var usernameInFocus: Bool</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> username: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//@FocusState private var passwordInFocus: Bool</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> password: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="meta">@FocusState</span> <span class="keyword">private</span> <span class="keyword">var</span> fieldInFocus: <span class="type">OnboardingFields</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">30</span>) &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Add your name here ...&quot;</span>, text: <span class="variable">$username</span>)</span><br><span class="line">                <span class="comment">// .focused($usernameInFocus)</span></span><br><span class="line">                <span class="comment">// .focused(&lt;#T##binding: FocusState&lt;Hashable&gt;.Binding##FocusState&lt;Hashable&gt;.Binding#&gt;, equals: &lt;#T##Hashable#&gt;)</span></span><br><span class="line">                .focused(<span class="variable">$fieldInFocus</span>, equals: .username)</span><br><span class="line">                .padding(.leading)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity)</span><br><span class="line">                .background(<span class="type">Color</span>.gray.brightness(<span class="number">0.3</span>))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">SecureField</span>(<span class="string">&quot;Add your password here ...&quot;</span>, text: <span class="variable">$password</span>)</span><br><span class="line">                <span class="comment">// .focused($passwordInFocus)</span></span><br><span class="line">                .focused(<span class="variable">$fieldInFocus</span>, equals: .password)</span><br><span class="line">                .padding(.leading)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity)</span><br><span class="line">                .background(<span class="type">Color</span>.gray.brightness(<span class="number">0.3</span>))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Sign Up 🚀&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> usernameIsValid <span class="operator">=</span> <span class="operator">!</span>username.isEmpty</span><br><span class="line">                <span class="keyword">let</span> passwordIsValid <span class="operator">=</span> <span class="operator">!</span>password.isEmpty</span><br><span class="line">                <span class="keyword">if</span> usernameIsValid <span class="operator">&amp;&amp;</span> passwordIsValid &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Sign Up&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> usernameIsValid &#123;</span><br><span class="line">                    <span class="comment">// usernameInFocus = false</span></span><br><span class="line">                    <span class="comment">// passwordInFocus = true</span></span><br><span class="line">                    fieldInFocus <span class="operator">=</span> .password</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// usernameInFocus = true</span></span><br><span class="line">                    <span class="comment">// passwordInFocus = false</span></span><br><span class="line">                    fieldInFocus <span class="operator">=</span> .username</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">0.5</span>) &#123;</span><br><span class="line">                <span class="comment">// self.usernameInFocus = true</span></span><br><span class="line">                <span class="keyword">self</span>.fieldInFocus <span class="operator">=</span> .username</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onSubmit-x2F-submitLabel-给TextField的修饰符"><a href="#onSubmit-x2F-submitLabel-给TextField的修饰符" class="headerlink" title=".onSubmit &#x2F; .submitLabel 给TextField的修饰符"></a>.onSubmit &#x2F; .submitLabel 给TextField的修饰符</h3><p>使用TextField并focused时候,跳出的键盘右下角就会出现对应的search&#x2F;next&#x2F;route字样:<br>（还有很多其他的可以显示）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;Placeholder...&quot;</span>, text: <span class="variable">$text1</span>)</span><br><span class="line">        <span class="comment">// 手机上跳出的键盘的右下角显示&quot;路线&quot;</span></span><br><span class="line">        .submitLabel(.route)</span><br><span class="line">        .onSubmit &#123; <span class="built_in">print</span>(<span class="string">&quot;Something to the console!&quot;</span>) &#125;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;Placeholder...&quot;</span>, text: <span class="variable">$text1</span>)</span><br><span class="line">        <span class="comment">// 手机上跳出的键盘的右下角显示&quot;下一项&quot;</span></span><br><span class="line">        .submitLabel(.next)</span><br><span class="line">        .onSubmit &#123; <span class="built_in">print</span>(<span class="string">&quot;Something to the console!&quot;</span>) &#125;</span><br><span class="line">    <span class="type">TextField</span>(<span class="string">&quot;Placeholder...&quot;</span>, text: <span class="variable">$text1</span>)</span><br><span class="line">        <span class="comment">// 手机上跳出的键盘的右下角显示&quot;搜索&quot;</span></span><br><span class="line">        .submitLabel(.search)</span><br><span class="line">        .onSubmit &#123; <span class="built_in">print</span>(<span class="string">&quot;Something to the console!&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/submitLabel.PNG" alt="&quot;submitLabel"><br>这里出现的.submitLabel(),可以将之前默认的”return”显示成”search”,还可以是”continue”&#x2F;“done”&#x2F;“go”&#x2F;“join”&#x2F;“next”&#x2F;“return”&#x2F;“route”&#x2F;“search”&#x2F;“send”.</p><h3 id="textField-amp-focused-amp-submitLabel-–-让表单输入更顺畅"><a href="#textField-amp-focused-amp-submitLabel-–-让表单输入更顺畅" class="headerlink" title="textField &amp; .focused &amp; .submitLabel – 让表单输入更顺畅"></a>textField &amp; .focused &amp; .submitLabel – 让表单输入更顺畅</h3><p>三个textField,键盘上按Next的时候,会自动跳到下一个,看一下实现的原理:<br>使用到了.focus(item::…)<br>.submitLabel(.next)和.submitLabel(.join)貌似没有用处啊。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Field</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> firstName</span><br><span class="line">        <span class="keyword">case</span> lastName</span><br><span class="line">        <span class="keyword">case</span> emailAddress</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> firstName <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lastName <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> emailAddress <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@FocusState</span> <span class="keyword">private</span> <span class="keyword">var</span> focusedField: <span class="type">Field</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Enter your first name&quot;</span>, text: <span class="variable">$firstName</span>)</span><br><span class="line">                .focused(<span class="variable">$focusedField</span>, equals: .firstName)</span><br><span class="line">                .textContentType(.givenName)</span><br><span class="line">                .submitLabel(.next)</span><br><span class="line"></span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Enter your last name&quot;</span>, text: <span class="variable">$lastName</span>)</span><br><span class="line">                .focused(<span class="variable">$focusedField</span>, equals: .lastName)</span><br><span class="line">                .textContentType(.familyName)</span><br><span class="line">                .submitLabel(.next)</span><br><span class="line"></span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Enter your email address&quot;</span>, text: <span class="variable">$emailAddress</span>)</span><br><span class="line">                .focused(<span class="variable">$focusedField</span>, equals: .emailAddress)</span><br><span class="line">                .textContentType(.emailAddress)</span><br><span class="line">                .submitLabel(.join)</span><br><span class="line">        &#125;</span><br><span class="line">        .onSubmit &#123;</span><br><span class="line">            <span class="keyword">switch</span> focusedField &#123;</span><br><span class="line">            <span class="keyword">case</span> .firstName:</span><br><span class="line">                focusedField <span class="operator">=</span> .lastName</span><br><span class="line">            <span class="keyword">case</span> .lastName:</span><br><span class="line">                focusedField <span class="operator">=</span> .emailAddress</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Creating account…&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/multi-textField-submit.gif" alt="multi-textField-submit"></p><h3 id="使用AVFoudation模块的AVPlayer播放声音文件"><a href="#使用AVFoudation模块的AVPlayer播放声音文件" class="headerlink" title="使用AVFoudation模块的AVPlayer播放声音文件"></a>使用AVFoudation模块的AVPlayer播放声音文件</h3><blockquote><p>具体使用示例在官方教程中：<br><a href="https://developer.apple.com/tutorials/app-dev-training/managing-state-and-life-cycle">https://developer.apple.com/tutorials/app-dev-training/managing-state-and-life-cycle</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AVFoundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设声音文件是ding.wav</span></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: <span class="string">&quot;ding&quot;</span>, withExtension: <span class="string">&quot;wav&quot;</span>)</span><br><span class="line"><span class="comment">// 定义player变量</span></span><br><span class="line"><span class="keyword">var</span> player: <span class="type">AVPlayer</span> &#123; <span class="type">AVPlayer</span>(url: url) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在View中使用player</span></span><br><span class="line"><span class="comment">// 比如在一个ZStack中</span></span><br><span class="line"><span class="type">ZStack</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 在ZStack出现时</span></span><br><span class="line">    .onAppear &#123;</span><br><span class="line">        <span class="comment">// 设置从头开始播放</span></span><br><span class="line">        player.seek(to: .zero)</span><br><span class="line">        <span class="comment">// 开始播放</span></span><br><span class="line">        player.play()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="as-的使用"><a href="#as-的使用" class="headerlink" title="as 的使用"></a>as 的使用</h3><p>as是个操作符<br>作用：将派生类转换为基类。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里将int类型的number转换成了Float类型</span></span><br><span class="line"><span class="comment">// 但不能将 number: Int 事先定义类型,会报错</span></span><br><span class="line"><span class="keyword">var</span> number <span class="operator">=</span> <span class="number">1</span> <span class="keyword">as</span> <span class="type">Float</span></span><br><span class="line"><span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><blockquote><p>1.0</p></blockquote><h2 id="FileManager-的使用"><a href="#FileManager-的使用" class="headerlink" title="FileManager 的使用"></a>FileManager 的使用</h2><blockquote><p><a href="https://blog.csdn.net/u011146511/article/details/79362028">https://blog.csdn.net/u011146511/article/details/79362028</a></p></blockquote><h3 id="获取用户文档目录路径"><a href="#获取用户文档目录路径" class="headerlink" title="获取用户文档目录路径"></a>获取用户文档目录路径</h3><p>FileManager.default.urls(for:in:)<br>其中for是一个enum,可以查看下,有专门给movie、books、pictures等等很多进行储存的目录等。<br>此外in也是一个enum,最多用到的就是.userDomainMask</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">FileManager</span>.default</span><br><span class="line"><span class="keyword">let</span> urlForDocument <span class="operator">=</span> manager.urls(for: .documentDirectory, in:.userDomainMask)</span><br><span class="line"><span class="built_in">print</span>(urlForDocument)</span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> urlForDocument[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">URL</span></span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="built_in">print</span>(url.path)</span><br></pre></td></tr></table></figure><blockquote><p>[file:&#x2F;&#x2F;&#x2F;Users&#x2F;vito&#x2F;Library&#x2F;Developer&#x2F;XCPGDevices&#x2F;xxxxxxxxxxxxxxxxx&#x2F;yyyyyyyyyyyyyyyy&#x2F;Documents&#x2F;]<br>file:&#x2F;&#x2F;&#x2F;Users&#x2F;vito&#x2F;Library&#x2F;Developer&#x2F;XCPGDevices&#x2F;xxxxxxxxxxxxxxxxx&#x2F;yyyyyyyyyyyyyyyy&#x2F;Documents&#x2F;<br>&#x2F;Users&#x2F;vito&#x2F;Library&#x2F;Developer&#x2F;XCPGDevices&#x2F;xxxxxxxxxxxxxxxxx&#x2F;yyyyyyyyyyyyyyyy&#x2F;Documents&#x2F;</p></blockquote><h3 id="对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表"><a href="#对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表" class="headerlink" title="对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表"></a>对指定路径执行浅搜索，返回指定目录路径下的文件、子目录及符号链接的列表</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码接着上面的</span></span><br><span class="line"><span class="keyword">let</span> contentsOfPath <span class="operator">=</span> <span class="keyword">try?</span> manager.contentsOfDirectory(atPath: url.path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;contentsOfPath: <span class="subst">\(contentsOfPath)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>contentsOfPath: Optional([])</p></blockquote><p>结果是个Optional的空列表，说明该目录内为空，没有文件、目录等。</p><h3 id="深度遍历-递归遍历子文件夹"><a href="#深度遍历-递归遍历子文件夹" class="headerlink" title="深度遍历,递归遍历子文件夹"></a>深度遍历,递归遍历子文件夹</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> enumeratorAtPath <span class="operator">=</span> manager.enumerator(atPath: url.path)</span><br><span class="line"><span class="comment">// let enumeratorAtURL = manager.enumerator(at: url, includingPropertiesForKeys: nil,options: .skipsHiddenFiles, errorHandler:nil)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;enumeratorAtPath: <span class="subst">\(enumeratorAtPath<span class="operator">?</span>.allObjects)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>enumeratorAtPath: Optional([])</p></blockquote><h3 id="深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）"><a href="#深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）" class="headerlink" title="深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）"></a>深度遍历，会递归遍历子文件夹（包括符号链接，所以要求性能的话用enumeratorAtPath）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> subPaths <span class="operator">=</span> manager.subpaths(atPath: url.path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;subPaths: <span class="subst">\(subPaths)</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="通过FileManager在本地建立文件夹并存储文件-以及对应的删除文件夹和文件"><a href="#通过FileManager在本地建立文件夹并存储文件-以及对应的删除文件夹和文件" class="headerlink" title="通过FileManager在本地建立文件夹并存储文件,以及对应的删除文件夹和文件"></a>通过FileManager在本地建立文件夹并存储文件,以及对应的删除文件夹和文件</h4><p>下面的例子类似于放入缓存中的NSCache,只是这里是存入用户的文件系统中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocalFileManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> instance <span class="operator">=</span> <span class="type">LocalFileManager</span>()</span><br><span class="line">    <span class="keyword">let</span> folderName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;MyApp_Images&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        createFolderIfNeeded()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">createFolderIfNeeded</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">FileManager</span></span><br><span class="line">                .default</span><br><span class="line">                .urls(for: .cachesDirectory, in: .userDomainMask)</span><br><span class="line">                .first<span class="operator">?</span></span><br><span class="line">                .appendingPathComponent(folderName)</span><br><span class="line">                .path</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="operator">!</span><span class="type">FileManager</span>.default.fileExists(atPath: path) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="type">FileManager</span>.default.createDirectory(atPath: <span class="type">URL</span>(string:path)<span class="operator">!</span>, withIntermediateDirectories: <span class="literal">true</span>, attributes: <span class="literal">nil</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Successfully creating folder.&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error creating folder. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteFolder</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">FileManager</span></span><br><span class="line">                .default</span><br><span class="line">                .urls(for: .cachesDirectory, in: .userDomainMask)</span><br><span class="line">                .first<span class="operator">?</span></span><br><span class="line">                .appendingPathComponent(folderName)</span><br><span class="line">                .path</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">FileManager</span>.default.removeItem(atPath: path)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Successfully deletinging folder.&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error deleting folder. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">saveImage</span>(<span class="params">image</span>: <span class="type">UIImage</span>, <span class="params">savedFileName</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="comment">// 储存图片,总结下来就是:</span></span><br><span class="line">        <span class="comment">// 1.UIImageWriteToSavedPhotosAlbum()存到用户的图片库</span></span><br><span class="line">        <span class="comment">// 2.存到程序的磁盘空间内:</span></span><br><span class="line">        <span class="comment">// a.将UIImage图像转换成Data</span></span><br><span class="line">        <span class="comment">// b.调用jpegData()</span></span><br><span class="line">        <span class="comment">// 具体如下:</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        if let jpegData = yourUIImage.jpegData(compressionQuality: 0.8) &#123;</span></span><br><span class="line"><span class="comment">            try? jpegData.write(to: yourURL, options: [.atomic, .completeFileProtection])</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="comment">// image.pngData也是有的</span></span><br><span class="line">            <span class="comment">// compressionQuality是压缩比例</span></span><br><span class="line">            <span class="keyword">let</span> data <span class="operator">=</span> image.jpegData(compressionQuality: <span class="number">1.0</span>),</span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> getPathForImage(name: savedFileName)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error Getting Data.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 存储数据</span></span><br><span class="line">        <span class="comment">// data.write(to: URL)</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> data.write(to: path)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Successful saving.&quot;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error saving. <span class="subst">\(error)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getImage</span>(<span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">UIImage</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> getPathForImage(name: name)<span class="operator">?</span>.path,</span><br><span class="line">            <span class="type">FileManager</span>.default.fileExists(atPath: path)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIImage</span>(contentsOfFile: path)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getPathForImage</span>(<span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">URL</span>? &#123;</span><br><span class="line">        <span class="comment">// let directory = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first</span></span><br><span class="line">        <span class="comment">// let path = directory?.appendingPathComponent(&quot;\(savedFileName).jpg&quot;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> <span class="type">FileManager</span></span><br><span class="line">                .default</span><br><span class="line">                .urls(for: .cachesDirectory, in: .userDomainMask)</span><br><span class="line">                .first<span class="operator">?</span></span><br><span class="line">                .appendingPathComponent(folderName)</span><br><span class="line">                .appendingPathComponent(<span class="string">&quot;<span class="subst">\(name)</span>.jpg&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error getting path.&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteImage</span>(<span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> path <span class="operator">=</span> getPathForImage(name: name),</span><br><span class="line">            <span class="type">FileManager</span>.default.fileExists(atPath: path.path)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error getting path.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> <span class="type">FileManager</span>.default.removeItem(at: path)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Successfully deleted.&quot;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error deleting image. <span class="subst">\(error)</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileManagerViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 需要在各个class或struct中移动的时候,</span></span><br><span class="line">    <span class="comment">// Image的数据移动起来相对比较麻烦,</span></span><br><span class="line">    <span class="comment">// 而UIImage相对容易,</span></span><br><span class="line">    <span class="comment">// 所以推荐UIImage作为背景等时,当要作为数据处理的情况.</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> image: <span class="type">UIImage</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;threemonths&quot;</span></span><br><span class="line">    <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">LocalFileManager</span>.instance</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> infoMessage: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        getImageFromAssetsFolder()</span><br><span class="line">        getImageFromFileManager()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getImageFromAssetsFolder</span>() &#123;</span><br><span class="line">        image <span class="operator">=</span> <span class="type">UIImage</span>(named: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getImageFromFileManager</span>() &#123;</span><br><span class="line">        image <span class="operator">=</span> manager.getImage(name: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">saveImage</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> image <span class="operator">=</span> image <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        infoMessage <span class="operator">=</span> manager.saveImage(image: image, savedFileName: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteImage</span>() &#123;</span><br><span class="line">        infoMessage <span class="operator">=</span> manager.deleteImage(name: imageName)</span><br><span class="line">        manager.deleteFolder()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FileManagerBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">FileManagerViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> vm.image &#123;</span><br><span class="line">                    <span class="type">Image</span>(uiImage: image)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .scaledToFill()</span><br><span class="line">                        .frame(width: <span class="number">350</span>, height: <span class="number">500</span>)</span><br><span class="line">                        .clipped()</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Button</span> &#123;</span><br><span class="line">                        vm.saveImage()</span><br><span class="line">                    &#125; label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Save to FileManager&quot;</span>)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .font(.headline)</span><br><span class="line">                            .padding()</span><br><span class="line">                            .padding(.horizontal)</span><br><span class="line">                            .background(<span class="type">Color</span>.blue)</span><br><span class="line">                            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">Button</span> &#123;</span><br><span class="line">                        vm.deleteImage()</span><br><span class="line">                    &#125; label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Delete from FileManager&quot;</span>)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .font(.headline)</span><br><span class="line">                            .padding()</span><br><span class="line">                            .padding(.horizontal)</span><br><span class="line">                            .background(<span class="type">Color</span>.red.opacity(<span class="number">0.7</span>))</span><br><span class="line">                            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(vm.infoMessage)</span><br><span class="line">                    .font(.largeTitle)</span><br><span class="line">                    .fontWeight(.semibold)</span><br><span class="line">                    .foregroundColor(.purple)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;File Manager&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UIImageWriteToSavedPhotosAlbum-存到用户的图片库"><a href="#UIImageWriteToSavedPhotosAlbum-存到用户的图片库" class="headerlink" title="UIImageWriteToSavedPhotosAlbum()存到用户的图片库"></a>UIImageWriteToSavedPhotosAlbum()存到用户的图片库</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageSaver</span>: <span class="title class_">NSObject</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> successHandler: (() -&gt; <span class="type">Void</span>)<span class="operator">?</span></span><br><span class="line">    <span class="keyword">var</span> errorHandler: ((<span class="type">Error</span>) -&gt; <span class="type">Void</span>)<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">writeToPhotoAlbum</span>(<span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">        <span class="type">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">#selector</span>(saveCompleted), <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @objc 是使用到object-c的代码,为了正常被swift编译而需要加的</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">saveCompleted</span>(<span class="keyword">_</span> <span class="params">image</span>: <span class="type">UIImage</span>, <span class="params">didFinishSavingWithError</span> <span class="params">error</span>: <span class="type">Error</span>?, <span class="params">contextInfo</span>: <span class="type">UnsafeRawPointer</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">            errorHandler<span class="operator">?</span>(error)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            successHandler<span class="operator">?</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得需要用户授权:<br>在 Targets 的 Info 中添加“Privacy - Photo Library Additions Usage Description”,值可以写做”We want to save the filtered photo.”</p><h4 id="write-to-atomically-encoding-写入文件"><a href="#write-to-atomically-encoding-写入文件" class="headerlink" title="write(to:atomically:encoding) 写入文件"></a>write(to:atomically:encoding) 写入文件</h4><p>write(to:atomically:encoding) 有三个参数:</p><ol><li>A url to write to</li><li>Whether to make the write atomic, which means “all at once”.原子写入,若文件较大,一般都会选择true。</li><li>What character encoding to use.</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">getDocumentsDirectory</span>() -&gt; <span class="type">URL</span> &#123;</span><br><span class="line">    <span class="comment">// find all possible documents directories for this user</span></span><br><span class="line">    <span class="keyword">let</span> paths <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// just send back the first one, which ought to be the only one</span></span><br><span class="line">    <span class="keyword">return</span> paths[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    .onTapGesture &#123;</span><br><span class="line">        <span class="keyword">let</span> str <span class="operator">=</span> <span class="string">&quot;Test Message&quot;</span></span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> getDocumentsDirectory().appendingPathComponent(<span class="string">&quot;message.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> str.write(to: url, atomically: <span class="literal">true</span>, encoding: .utf8)</span><br><span class="line">            <span class="keyword">let</span> input <span class="operator">=</span> <span class="keyword">try</span> <span class="type">String</span>(contentsOf: url)</span><br><span class="line">            <span class="built_in">print</span>(input)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Atomic Writing:<br>Atomic writing causes the system to write our full file to a temporary filename (not the one we asked for), and when that’s finished it does a simple rename to our target filename. This means either the whole file is there or nothing is.<br>就是原子写入的时候,是完全写入一个临时文件,然后改名成目标文件。需要注意的一点是,要么文件在,要么文件不存在。这就能保证文件不会出错了,就不会被其他人写入了。</p><h4 id="write-to-lt-T-URL-gt-options-lt-T-Data-WritingOptions-gt"><a href="#write-to-lt-T-URL-gt-options-lt-T-Data-WritingOptions-gt" class="headerlink" title="write(to: &lt;#T##URL#&gt;, options: &lt;#T##Data.WritingOptions#&gt;)"></a>write(to: &lt;#T##URL#&gt;, options: &lt;#T##Data.WritingOptions#&gt;)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init()</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: savePath)</span><br><span class="line">    locations <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Location</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    locations <span class="operator">=</span> []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func save()</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONEncoder</span>().encode(locations)</span><br><span class="line">    <span class="keyword">try</span> data.write(to: savePath, options: [.atomic, .completeFileProtection])</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unable to save data.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉用Data的write来写入结构化后的文件，可能更好一点。<br>Yes, all it takes to ensure that the file is stored with strong encryption is to add .completeFileProtection to the data writing options.<br>Using this approach we can write any amount of data in any number of files – it’s much more flexible than UserDefaults, and also allows us to load and save data as needed rather than immediately when the app launches as with UserDefaults.</p><h3 id="NSCache-–-缓存存储"><a href="#NSCache-–-缓存存储" class="headerlink" title="NSCache – 缓存存储"></a>NSCache – 缓存存储</h3><p>很多时候,取得的数据不需要存入手机,而只是需要放入缓存中。</p><p>下面的例子,类似于FileManager存储image的结构类型,只是存入缓存中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> instance <span class="operator">=</span> <span class="type">CacheManager</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// var imageCache: NSCache&lt;AnyObject, AnyObject&gt;</span></span><br><span class="line">    <span class="comment">// 把NSCache想像成key/value的结构,</span></span><br><span class="line">    <span class="comment">// key一般是String,但这里得是个Object,String是一个Struct,</span></span><br><span class="line">    <span class="comment">// 而NSString是一个class类,故此处不能单单使用String.</span></span><br><span class="line">    <span class="comment">// 至于转换, &quot;Hello&quot; as NSString 即完成了将String转换成NSString.</span></span><br><span class="line">    <span class="keyword">var</span> imageCache: <span class="type">NSCache</span>&lt;<span class="type">NSString</span>, <span class="type">UIImage</span>&gt; <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cache <span class="operator">=</span> <span class="type">NSCache</span>&lt;<span class="type">NSString</span>, <span class="type">UIImage</span>&gt;()</span><br><span class="line">        <span class="comment">// cache.countLimit 是指NSCache中Object的最多数量</span></span><br><span class="line">        cache.countLimit <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">        <span class="comment">// cache.totalCostLimit 是指NSCache的容量限制</span></span><br><span class="line">        cache.totalCostLimit <span class="operator">=</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">100</span> <span class="comment">// 100Mb</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cache</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">image</span>: <span class="type">UIImage</span>, <span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="comment">// name根据imageCache设定的必须是NSString,而不是String</span></span><br><span class="line">        imageCache.setObject(image, forKey: name <span class="keyword">as</span> <span class="type">NSString</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Add to Cache&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">remove</span>(<span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">String</span>&#123;</span><br><span class="line">        imageCache.removeObject(forKey: name <span class="keyword">as</span> <span class="type">NSString</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Remove from Cache&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">get</span>(<span class="params">name</span>: <span class="type">String</span>) -&gt; <span class="type">UIImage</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> imageCache.object(forKey: name <span class="keyword">as</span> <span class="type">NSString</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CacheViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> startImage: <span class="type">UIImage</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> cachedImage: <span class="type">UIImage</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> infoMessage: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;threemonths&quot;</span></span><br><span class="line">    <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">CacheManager</span>.instance</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        getImagesFromAssetsFolder()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getImagesFromAssetsFolder</span>() &#123;</span><br><span class="line">        startImage <span class="operator">=</span> <span class="type">UIImage</span>(named: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">saveToCache</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> startImage <span class="operator">=</span> startImage <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        infoMessage <span class="operator">=</span> manager.add(image: startImage, name: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">removeFromCache</span>() &#123;</span><br><span class="line">        infoMessage <span class="operator">=</span> manager.remove(name: imageName)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getFromCache</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> returnedImage <span class="operator">=</span>  manager.get(name: imageName) &#123;</span><br><span class="line">            cachedImage <span class="operator">=</span> returnedImage</span><br><span class="line">            infoMessage <span class="operator">=</span> <span class="string">&quot;Got image from Cache&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            infoMessage <span class="operator">=</span> <span class="string">&quot;Image not found from Cache&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CacheBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">CacheViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> vm.startImage &#123;</span><br><span class="line">                    <span class="type">Image</span>(uiImage: image)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .scaledToFill()</span><br><span class="line">                        .frame(width: <span class="number">200</span>, height: <span class="number">250</span>)</span><br><span class="line">                        .clipped()</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Text</span>(vm.infoMessage)</span><br><span class="line">                    .font(.headline)</span><br><span class="line">                    .foregroundColor(.purple)</span><br><span class="line">                    .frame(height:<span class="number">30</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="type">HStack</span> &#123;</span><br><span class="line">                    <span class="type">Button</span> &#123;</span><br><span class="line">                        vm.saveToCache()</span><br><span class="line">                    &#125; label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Save to Cache&quot;</span>)</span><br><span class="line">                            .font(.headline)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .padding()</span><br><span class="line">                            .background(<span class="type">Color</span>.blue)</span><br><span class="line">                            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="type">Button</span> &#123;</span><br><span class="line">                        vm.removeFromCache()</span><br><span class="line">                    &#125; label: &#123;</span><br><span class="line">                        <span class="type">Text</span>(<span class="string">&quot;Delete from Cache&quot;</span>)</span><br><span class="line">                            .font(.headline)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .padding()</span><br><span class="line">                            .background(<span class="type">Color</span>.red)</span><br><span class="line">                            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    vm.getFromCache()</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;get from Cache&quot;</span>)</span><br><span class="line">                        .font(.headline)</span><br><span class="line">                        .foregroundColor(.white)</span><br><span class="line">                        .padding()</span><br><span class="line">                        .background(<span class="type">Color</span>.green)</span><br><span class="line">                        .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> vm.cachedImage &#123;</span><br><span class="line">                    <span class="type">Image</span>(uiImage: image)</span><br><span class="line">                        .resizable()</span><br><span class="line">                        .scaledToFill()</span><br><span class="line">                        .frame(width: <span class="number">200</span>, height: <span class="number">250</span>)</span><br><span class="line">                        .clipped()</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Spacer</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Cache&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义View的Modifier-并进行调用"><a href="#自定义View的Modifier-并进行调用" class="headerlink" title="自定义View的Modifier,并进行调用"></a>自定义View的Modifier,并进行调用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义modifier 需要遵循 ViewModifier协议</span></span><br><span class="line"><span class="comment">// 并且在func body(content: Content) -&gt; some View 中定义具体的修饰</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DefaultButtonViewModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> backgroundColor: <span class="type">Color</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .foregroundColor(.white)</span><br><span class="line">            .frame(height: <span class="number">55</span>)</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">            .background(backgroundColor)</span><br><span class="line">            .cornerRadius(<span class="number">10</span>)</span><br><span class="line">            .shadow(radius: <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是调用上述DefalutButtonViewModifier结构的方法的View的扩展</span></span><br><span class="line"><span class="comment">// 实际是为了让View方便调用才写的</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">withDefaultButtonFormatting</span>(<span class="params">backgroundColor</span>: <span class="type">Color</span> <span class="operator">=</span> .blue) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 此处省略了</span></span><br><span class="line">        <span class="comment">// self.</span></span><br><span class="line">        modifier(<span class="type">DefaultButtonViewModifier</span>(backgroundColor: backgroundColor))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">// 下面两种不同的调用自定义modifier的方式</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, my world!&quot;</span>)</span><br><span class="line">                .font(.headline)</span><br><span class="line">                .withDefaultButtonFormatting()</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, my world!&quot;</span>)</span><br><span class="line">                .font(.subheadline)</span><br><span class="line">                .modifier(<span class="type">DefaultButtonViewModifier</span>(backgroundColor: .green))</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, my world!&quot;</span>)</span><br><span class="line">                .font(.title)</span><br><span class="line">                .withDefaultButtonFormatting(backgroundColor: .yellow)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为Button自定义样式"><a href="#为Button自定义样式" class="headerlink" title="为Button自定义样式"></a>为Button自定义样式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PressableButtonStyle</span>: <span class="title class_">ButtonStyle</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> scaledAmount: <span class="type">CGFloat</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">scaledAmount</span>: <span class="type">CGFloat</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.scaledAmount <span class="operator">=</span> scaledAmount</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeBody</span>(<span class="params">configuration</span>: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// configuration可以使用到</span></span><br><span class="line">        <span class="comment">// configuration.isPressed 代表button被按下</span></span><br><span class="line">        <span class="comment">// configuration.label是用来调整button的label的</span></span><br><span class="line">        configuration.label</span><br><span class="line">            .scaleEffect(configuration.isPressed <span class="operator">?</span> scaledAmount : <span class="number">1.0</span>)</span><br><span class="line">            .opacity(configuration.isPressed <span class="operator">?</span> <span class="number">0.9</span> : <span class="number">1.0</span>)</span><br><span class="line">            .brightness(configuration.isPressed <span class="operator">?</span> <span class="number">0.5</span> : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">withPressableStyle</span>(<span class="params">scaledAmount</span>: <span class="type">CGFloat</span> <span class="operator">=</span> <span class="number">0.9</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.buttonStyle(<span class="type">PressableButtonStyle</span>(scaledAmount:scaledAmount))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test0004</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(action: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,label: &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Click Me&quot;</span>)</span><br><span class="line">                .font(.headline)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity)</span><br><span class="line">                .background(<span class="type">Color</span>.blue)</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                .shadow(color: <span class="type">Color</span>.blue.opacity(<span class="number">0.3</span>),</span><br><span class="line">                        radius: <span class="number">10</span>, x: <span class="number">0.0</span>, y: <span class="number">10</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">            <span class="comment">// 以下样式都是自带的</span></span><br><span class="line">            <span class="comment">// .buttonStyle(PlainButtonStyle())</span></span><br><span class="line">            <span class="comment">// .buttonStyle(DefaultButtonStyle())</span></span><br><span class="line">            <span class="comment">//使用自定义样式</span></span><br><span class="line">            <span class="comment">// .buttonStyle(PressableButtonStyle(scaledAmount: 0.9))</span></span><br><span class="line">            <span class="comment">// 建议这样调用,因为上面写了调用的方法</span></span><br><span class="line">            .withPressableStyle(scaledAmount: <span class="number">1.2</span>)</span><br><span class="line">            .padding(<span class="number">40</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法:"></a>一般用法:</h3><p>.transition(.scale)<br>即让尺寸大小的变化有一个过渡。</p><h3 id="一般案例-–-需要配合withAnimation等进行实现"><a href="#一般案例-–-需要配合withAnimation等进行实现" class="headerlink" title="一般案例 – 需要配合withAnimation等进行实现"></a>一般案例 – 需要配合withAnimation等进行实现</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showDetails <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Press to show details&quot;</span>) &#123;</span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    showDetails.toggle()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> showDetails &#123;</span><br><span class="line">                <span class="comment">// Moves in from the bottom</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                    .transition(.move(edge: .bottom))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Moves in from leading out, out to trailing edge.</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                    .transition(.slide)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Starts small and grows to full size.</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                    .transition(.scale)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/transition.gif" alt="transition"><br>记得,withAnimation是确定有动画会出现,而每个view定义的transition这个midifier是确定以什么样的动画实现。</p><h3 id="combined-with-–-method-combine-transitions"><a href="#combined-with-–-method-combine-transitions" class="headerlink" title="combined(with:) – method - combine transitions"></a>combined(with:) – method - combine transitions</h3><p>呈现连续的动画的功能:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showDetails <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Press to show details&quot;</span>) &#123;</span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    showDetails.toggle()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> showDetails &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                     .transition(<span class="type">AnyTransition</span>.opacity.combined(with: .slide))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/combined.gif" alt="combined"></p><p>也可以事先写好modifier,以后批量使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyTransition</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> moveAndScale: <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="type">AnyTransition</span>.move(edge: .bottom).combined(with: .scale)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showDetails <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Press to show details&quot;</span>) &#123;</span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    showDetails.toggle()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> showDetails &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                    .transition(.moveAndScale)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/combined2.gif" alt="combined"></p><h3 id="asymmetric"><a href="#asymmetric" class="headerlink" title=".asymmetric"></a>.asymmetric</h3><p>.asymmetric lets us use one transition when the view is being shown and another when it’s disappearing. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.transition(.asymmetric(insertion: .scale, removal: .opacity))</span><br></pre></td></tr></table></figure><p>即在进入的时候以尺寸变化为过渡,而在不显示的时候通过显示透明度消失的方式。<br>例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showDetails <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Press to show details&quot;</span>) &#123;</span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    showDetails.toggle()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> showDetails &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Details go here.&quot;</span>)</span><br><span class="line">                    .transition(.asymmetric(insertion: .move(edge: .leading), removal: .move(edge: .bottom)))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/asymmetric.gif" alt="asymmetric"></p><h3 id="建立自定义Transition"><a href="#建立自定义Transition" class="headerlink" title="建立自定义Transition"></a>建立自定义Transition</h3><p>具体定义是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyTransition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a transition defined between an active modifier and an identity</span></span><br><span class="line">    <span class="comment">/// modifier.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">modifier</span>&lt;<span class="type">E</span>&gt;(<span class="params">active</span>: <span class="type">E</span>, <span class="params">identity</span>: <span class="type">E</span>) -&gt; <span class="type">AnyTransition</span> <span class="keyword">where</span> <span class="type">E</span> : <span class="type">ViewModifier</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实例一:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CornerRotateModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> amount: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> anchor: <span class="type">UnitPoint</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .rotationEffect(.degrees(amount), anchor: anchor)</span><br><span class="line">            <span class="comment">// .clipped()是以防绕出整体范围的时候进行一个切割</span></span><br><span class="line">            .clipped()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyTransition</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> pivot: <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="comment">// 初始状态是绕着支点逆时针旋转90度,最后状态是顺时针旋转90度绕回原点</span></span><br><span class="line">        .modifier(active: <span class="type">CornerRotateModifier</span>(amount: <span class="operator">-</span><span class="number">90</span>, anchor: .topLeading),</span><br><span class="line">                  identity: <span class="type">CornerRotateModifier</span>(amount: <span class="number">0</span>, anchor: .topLeading))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Transitions</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isShowingRed <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 蓝色在红色的下方,但红色因为逆时针旋转出区域又经过.clipped()切割,所以一开始看不到,</span></span><br><span class="line">            <span class="comment">// isShowingRed转变为true时,红色区域顺时针旋转回来时,能看到红色区域旋转并覆盖蓝色区域。</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(.blue)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isShowingRed &#123;</span><br><span class="line">                <span class="type">Rectangle</span>()</span><br><span class="line">                    .fill(.red)</span><br><span class="line">                    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">                    .transition(.pivot)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            withAnimation &#123;</span><br><span class="line">                isShowingRed.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体实例二:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">RotateViewModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> rotation: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .rotationEffect(<span class="type">Angle</span>(degrees: rotation))</span><br><span class="line">            <span class="comment">// 当showRectangle变为true的时候,content出现,</span></span><br><span class="line">            <span class="comment">// 则content的位移offset就是(x:0,y:0);</span></span><br><span class="line">            <span class="comment">// 当showRectangle变为false的时候,content离开画面,</span></span><br><span class="line">            <span class="comment">// 而且content的位移offset就是(x:屏幕宽度,y:屏幕高度);</span></span><br><span class="line">            <span class="comment">// 若下面设置成UIScreen.main.bounds.width/5的时候，</span></span><br><span class="line">            <span class="comment">// 你就会发现content在x和y上位移了一点点,随后全部消失</span></span><br><span class="line">            .offset(</span><br><span class="line">                x: rotation <span class="operator">!=</span> <span class="number">0</span> <span class="operator">?</span> <span class="type">UIScreen</span>.main.bounds.width : <span class="number">0</span>,</span><br><span class="line">                y: rotation <span class="operator">!=</span> <span class="number">0</span> <span class="operator">?</span> <span class="type">UIScreen</span>.main.bounds.height : <span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">AnyTransition</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虽然都是rotating,但调用的时候提示是V,代表是Variable</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> rotating: <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="comment">// .modifier(active:开始, identity:结束)</span></span><br><span class="line">        <span class="comment">// 当content出现的时候,</span></span><br><span class="line">        <span class="comment">// 是从RotateViewModifier(rotation: 1080) [即&lt;-content旋转1080度],</span></span><br><span class="line">        <span class="comment">// 变化到RotateViewModifier(rotation: 0)[即&lt;-content旋转0度]的。</span></span><br><span class="line">        <span class="comment">// 另外观察下来,</span></span><br><span class="line">        <span class="comment">// 当content离开的时候,</span></span><br><span class="line">        <span class="comment">// 是从RotateViewModifier(rotation: 0)</span></span><br><span class="line">        <span class="comment">// 变化到RotateViewModifier(rotation: 90),</span></span><br><span class="line">        <span class="comment">// 理解下来就是逆向的一个动画过程。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">AnyTransition</span>.modifier(</span><br><span class="line">            active: <span class="type">RotateViewModifier</span>(rotation: <span class="number">1080</span>),</span><br><span class="line">            identity: <span class="type">RotateViewModifier</span>(rotation: <span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虽然都是rotating,但调用的时候提示下面是M,代表是Method</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">rotating</span>(<span class="params">rotation</span>: <span class="type">Double</span>) -&gt; <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">AnyTransition</span>.modifier(</span><br><span class="line">            active: <span class="type">RotateViewModifier</span>(rotation: <span class="number">1080</span>),</span><br><span class="line">            identity: <span class="type">RotateViewModifier</span>(rotation: <span class="number">0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 你会发现,content是从右下角出现的,因为设置的offset,</span></span><br><span class="line">    <span class="comment">// (教程演示是这样,但实际却是直接出现,神奇，哪里的问题？)</span></span><br><span class="line">    <span class="comment">// 但离开并不按照offset设置的向右下角消失,</span></span><br><span class="line">    <span class="comment">// 而是向.leading方向消失的。</span></span><br><span class="line">    <span class="comment">// 注:asymmetric是不对称的意思。</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> rotateOn: <span class="type">AnyTransition</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">AnyTransition</span>.asymmetric(</span><br><span class="line">            insertion: .rotating,</span><br><span class="line">            removal: .move(edge: .leading))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test0005</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showRectangle: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> showRectangle &#123;</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">25</span>)</span><br><span class="line">                    .frame(width: <span class="number">250</span>, height:<span class="number">350</span>)</span><br><span class="line">                    <span class="comment">// 为什么.frame(maxWidth:maxHeight:)会把下面的按钮往下推？</span></span><br><span class="line">                    .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">                    <span class="comment">// .modifier(RotateViewModifier(rotation: 45))</span></span><br><span class="line">                    .transition(<span class="type">AnyTransition</span>.rotating.animation(.easeInOut(duration: <span class="number">5.0</span>)))</span><br><span class="line">                    <span class="comment">// 调用上面写的rotating方法,好处是还可以传参</span></span><br><span class="line">                    <span class="comment">// .transition(AnyTransition.rotating(rotation: 1080).animation(.easeInOut(duration: 5.0)))</span></span><br><span class="line">                    <span class="comment">// 调用上面写的rotateOn属性</span></span><br><span class="line">                    <span class="comment">// .transition(AnyTransition.rotateOn)</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">25</span>)</span><br><span class="line">                    .frame(width: <span class="number">250</span>, height:<span class="number">350</span>)</span><br><span class="line">                    .opacity(<span class="number">0.2</span>)</span><br><span class="line">                    .transition(<span class="type">AnyTransition</span>.rotating.animation(.easeInOut(duration: <span class="number">5.0</span>)))</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Click Me&quot;</span>)</span><br><span class="line">                .withDefaultButtonFormatting(backgroundColor: .gray)</span><br><span class="line">                .padding(.horizontal, <span class="number">40</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    withAnimation(.easeInOut(duration: <span class="number">5.0</span>)) &#123;</span><br><span class="line">                        showRectangle.toggle()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="gesture-–-modifier"><a href="#gesture-–-modifier" class="headerlink" title="gesture – modifier"></a>gesture – modifier</h1><p>SwiftUI提供了一系列的手势支持，比如 TapGesture, DragGesture, RotationGesture, MagnificationGesture, LongPressGesture等。</p><h3 id="onTapGesture-amp-amp-count"><a href="#onTapGesture-amp-amp-count" class="headerlink" title="onTapGesture() &amp;&amp; count"></a>onTapGesture() &amp;&amp; count</h3><p>设定点击次数才会执行的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    .onTapGesture(count: <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Double tapped!&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="allowsHitTesting-modifier"><a href="#allowsHitTesting-modifier" class="headerlink" title="allowsHitTesting() modifier."></a>allowsHitTesting() modifier.</h4><p>让View等捕获不到任何taps</p><p>适用场景:比如一个计时回答竞赛的软件,计时器归零后,用户再点击是不会给任何反应的,这时候就可以给这个使用这个allowsHitTesting(false)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="type">Rectangle</span>()</span><br><span class="line">        .fill(.blue)</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Rectangle tapped!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Circle</span>()</span><br><span class="line">        .fill(.red)</span><br><span class="line">        .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Circle tapped!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .allowsHitTesting(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有.allowsHitTesting(false)的时候,之前点在圆上面,就显示圆被点击了,而点击在圆以外正方形上面,就显示正方形被点击了。<br>若有.allowsHitTesting(false)的时候,点击在圆上面还是正方形上面,都显示正方形被点击了。</p><h3 id="DragGesture-–-拖动的手势"><a href="#DragGesture-–-拖动的手势" class="headerlink" title="DragGesture – 拖动的手势"></a>DragGesture – 拖动的手势</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效果: 可拖动,但拖动完,仍会回到原始位置。</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> dragAmount: <span class="type">CGSize</span> <span class="operator">=</span> <span class="type">CGSize</span>.zero</span><br><span class="line"></span><br><span class="line"><span class="type">LinearGradient</span>(gradient: <span class="type">Gradient</span>(colors: [.yellow, .red]), startPoint: .topLeading, endPoint: .bottomTrailing)</span><br><span class="line">    .frame(width:<span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">    .clipShape(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>))</span><br><span class="line">    .offset(dragAmount)</span><br><span class="line">    .gesture(</span><br><span class="line">        <span class="type">DragGesture</span>()</span><br><span class="line">            .onChanged(&#123;</span><br><span class="line">                dragAmount <span class="operator">=</span> <span class="variable">$0</span>.translation</span><br><span class="line">            &#125;)</span><br><span class="line">            .onEnded(&#123;<span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                dragAmount <span class="operator">=</span> .zero</span><br><span class="line">            &#125;)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="onLongPressGesture"><a href="#onLongPressGesture" class="headerlink" title=".onLongPressGesture"></a>.onLongPressGesture</h3><p>.onTapGesture 按下即执行,而.onLongPressGesture是对按下有时间和偏移量均有一定的要求:</p><p>.onLongPressGesture(minimumDuration: &lt;#T##Double#&gt;, maximumDistance: &lt;#T##CGFloat#&gt;, perform: &lt;#T##() -&gt; Void#&gt;, onPressingChanged: &lt;#T##((Bool) -&gt; Void)?##((Bool) -&gt; Void)?##(Bool) -&gt; Void#&gt;)</p><p>minimumDuration 指至少按住多少时间才生效<br>maximumDistance 指最多位移多少范围才有效,不然认为是撤销操作<br>onPressingChanged 指一旦按下即会进行的操作(给了个判断是否按下的Bool参数)<br>perform 指超过minimumDuration,且未超过maximumDistance，的情况下,会进行的操作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LongPressGestureBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isComplete: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> isSuccess: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(isSuccess <span class="operator">?</span> <span class="type">Color</span>.green : <span class="type">Color</span>.blue)</span><br><span class="line">                .frame(maxWidth: isComplete <span class="operator">?</span> .infinity : <span class="number">0</span>)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .frame(maxWidth: .infinity, alignment: .leading)</span><br><span class="line">                .background(<span class="type">Color</span>.gray)</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Click Here&quot;</span>)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background(<span class="type">Color</span>.black)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .onLongPressGesture(minimumDuration: <span class="number">1.0</span>, maximumDistance: <span class="number">50</span>) &#123;</span><br><span class="line">                        withAnimation(.easeInOut) &#123;</span><br><span class="line">                            isSuccess <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; onPressingChanged: &#123; isPressing <span class="keyword">in</span></span><br><span class="line">                        <span class="comment">// 注意onPressingChanged提供的参数,</span></span><br><span class="line">                        <span class="comment">// 这里取名为isPressing,</span></span><br><span class="line">                        <span class="comment">// 当按下时为true,</span></span><br><span class="line">                        <span class="comment">// 当松开时为false</span></span><br><span class="line">                        <span class="keyword">if</span> isPressing &#123;</span><br><span class="line">                            withAnimation(.easeInOut(duration: <span class="number">1.0</span>)) &#123;</span><br><span class="line">                                isComplete <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="number">0.5</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> <span class="operator">!</span>isSuccess &#123;</span><br><span class="line">                                    withAnimation(.easeInOut) &#123;</span><br><span class="line">                                        isComplete <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Reset&quot;</span>)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background(<span class="type">Color</span>.black)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .onTapGesture &#123;</span><br><span class="line">                        isSuccess <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                        isComplete <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果是:<br>按下即会有反应,有类似进度条的显示,若超过一秒,且偏移量未超过50,则生效,<br>否则,会回到初始状态。</p><h3 id="MagnificationGesture"><a href="#MagnificationGesture" class="headerlink" title="MagnificationGesture"></a>MagnificationGesture</h3><p>将目标放大的手势:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> currentAmount <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> finalAmount <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .scaleEffect(finalAmount <span class="operator">+</span> currentAmount)</span><br><span class="line">            .gesture(</span><br><span class="line">                <span class="type">MagnificationGesture</span>()</span><br><span class="line">                    .onChanged &#123; amount <span class="keyword">in</span></span><br><span class="line">                        currentAmount <span class="operator">=</span> amount <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    .onEnded &#123; amount <span class="keyword">in</span></span><br><span class="line">                        finalAmount <span class="operator">+=</span> currentAmount </span><br><span class="line">                        currentAmount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">                    &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RotationGesture"><a href="#RotationGesture" class="headerlink" title="RotationGesture"></a>RotationGesture</h3><p>将目标旋转的手势:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> currentAmount <span class="operator">=</span> <span class="type">Angle</span>.zero</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> finalAmount <span class="operator">=</span> <span class="type">Angle</span>.zero</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .rotationEffect(currentAmount <span class="operator">+</span> finalAmount)</span><br><span class="line">            .gesture(</span><br><span class="line">                <span class="type">RotationGesture</span>()</span><br><span class="line">                    .onChanged &#123; angle <span class="keyword">in</span></span><br><span class="line">                        currentAmount <span class="operator">=</span> angle</span><br><span class="line">                    &#125;</span><br><span class="line">                    .onEnded &#123; angle <span class="keyword">in</span></span><br><span class="line">                        finalAmount <span class="operator">+=</span> currentAmount</span><br><span class="line">                        currentAmount <span class="operator">=</span> .zero</span><br><span class="line">                    &#125;</span><br><span class="line">            )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="highPriorityGesture"><a href="#highPriorityGesture" class="headerlink" title="highPriorityGesture()"></a>highPriorityGesture()</h3><p>将某个手势设置为有更改优先权</p><p>以下代码只会打印”Text tapped”,而不打印”VStack tapped”,这是因为the child’s gesture priority。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Text tapped&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;VStack tapped&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何改变这种情况,只打印”VStack tapped”？就要使用到highPriorityGesture():</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Text tapped&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .highPriorityGesture(</span><br><span class="line">            <span class="type">TapGesture</span>()</span><br><span class="line">                .onEnded &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;VStack tapped&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="simultaneousGesture"><a href="#simultaneousGesture" class="headerlink" title="simultaneousGesture()"></a>simultaneousGesture()</h3><p>同时响应的手势:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Text tapped&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .simultaneousGesture(</span><br><span class="line">            <span class="type">TapGesture</span>()</span><br><span class="line">                .onEnded &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;VStack tapped&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时打印”VStack tapped”和”Text tapped”,但有先后次序。</p><h3 id="组合手势"><a href="#组合手势" class="headerlink" title="组合手势"></a>组合手势</h3><p>这下面的手势是先长按才能拖动的手势:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// how far the circle has been dragged</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> offset <span class="operator">=</span> <span class="type">CGSize</span>.zero</span><br><span class="line"></span><br><span class="line">    <span class="comment">// whether it is currently being dragged or not</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isDragging <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// a drag gesture that updates offset and isDragging as it moves around</span></span><br><span class="line">        <span class="keyword">let</span> dragGesture <span class="operator">=</span> <span class="type">DragGesture</span>()</span><br><span class="line">            .onChanged &#123; value <span class="keyword">in</span> offset <span class="operator">=</span> value.translation &#125;</span><br><span class="line">            .onEnded &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    offset <span class="operator">=</span> .zero</span><br><span class="line">                    isDragging <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a long press gesture that enables isDragging</span></span><br><span class="line">        <span class="keyword">let</span> pressGesture <span class="operator">=</span> <span class="type">LongPressGesture</span>()</span><br><span class="line">            .onEnded &#123; value <span class="keyword">in</span></span><br><span class="line">                withAnimation &#123;</span><br><span class="line">                    isDragging <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a combined gesture that forces the user to long press then drag</span></span><br><span class="line">        <span class="keyword">let</span> combined <span class="operator">=</span> pressGesture.sequenced(before: dragGesture)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// a 64x64 circle that scales up when it&#x27;s dragged, sets its offset to whatever we had back from the drag gesture, and uses our combined gesture</span></span><br><span class="line">        <span class="type">Circle</span>()</span><br><span class="line">            .fill(.red)</span><br><span class="line">            .frame(width: <span class="number">64</span>, height: <span class="number">64</span>)</span><br><span class="line">            .scaleEffect(isDragging <span class="operator">?</span> <span class="number">1.5</span> : <span class="number">1</span>)</span><br><span class="line">            .offset(offset)</span><br><span class="line">            .gesture(combined)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上,觉得比较奇怪的地方是:<br>View内竟然有些关于Gesture的代码,而不是写在View的外面.<br>这里比较重要的代码是:<br>let combined &#x3D; pressGesture.sequenced(before: dragGesture)<br>让pressGesture生成的次序在dragGesture之前,就是只能先长按,才能再拖动。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h3 id="matchedGeometryEffect"><a href="#matchedGeometryEffect" class="headerlink" title="matchedGeometryEffect"></a>matchedGeometryEffect</h3><p>If you have the same view appearing in two different parts of your view hierarchy and want to animate between them – for example, going from a list view to a zoomed detail view – then you should use SwiftUI’s matchedGeometryEffect() modifier, which is a bit like Magic Move in Keynote.<br>看例子就可以了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MatchedGeometryEffectExamples</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isClicked: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> namespace1</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selected2: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> namespace2</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selected3: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@Namespace</span> <span class="keyword">private</span> <span class="keyword">var</span> namespace3</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> categories: [<span class="type">String</span>] <span class="operator">=</span> [<span class="string">&quot;Home&quot;</span>,<span class="string">&quot;Popular&quot;</span>,<span class="string">&quot;Saved&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>isClicked &#123;</span><br><span class="line">                <span class="type">Circle</span>()</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">&quot;rectangle&quot;</span>, in: namespace1)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .foregroundColor(.green)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>().frame(height: <span class="number">100</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(categories, id: \.<span class="keyword">self</span>) &#123; category <span class="keyword">in</span></span><br><span class="line">                    <span class="type">ZStack</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> selected2 <span class="operator">==</span> category &#123;</span><br><span class="line">                            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>)</span><br><span class="line">                                .fill(<span class="type">Color</span>.red.opacity(<span class="number">0.3</span>))</span><br><span class="line">                                .matchedGeometryEffect(id: <span class="string">&quot;category_background2&quot;</span>, in: namespace2)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">Text</span>(category)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .frame(maxWidth: .infinity)</span><br><span class="line">                    .frame(height: <span class="number">55</span>)</span><br><span class="line">                    .onTapGesture &#123;</span><br><span class="line">                        withAnimation(.easeInOut) &#123;</span><br><span class="line">                            selected2 <span class="operator">=</span> category</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(categories, id: \.<span class="keyword">self</span>) &#123; category <span class="keyword">in</span></span><br><span class="line">                    <span class="type">ZStack</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> selected3 <span class="operator">==</span> category &#123;</span><br><span class="line">                            <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">10</span>)</span><br><span class="line">                                .fill(<span class="type">Color</span>.red.opacity(<span class="number">0.7</span>))</span><br><span class="line">                                .matchedGeometryEffect(id: <span class="string">&quot;category_background3&quot;</span>, in: namespace3)</span><br><span class="line">                                .frame(width: <span class="number">65</span>, height: <span class="number">2</span>)</span><br><span class="line">                                .offset(y: <span class="number">10.0</span>)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">Text</span>(category)</span><br><span class="line">                            .foregroundColor(selected3 <span class="operator">==</span> category <span class="operator">?</span> .red : .black)</span><br><span class="line">                    &#125;</span><br><span class="line">                    .frame(maxWidth: .infinity)</span><br><span class="line">                    .frame(height: <span class="number">55</span>)</span><br><span class="line">                    .onTapGesture &#123;</span><br><span class="line">                        withAnimation(.easeInOut) &#123;</span><br><span class="line">                            selected3 <span class="operator">=</span> category</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isClicked &#123;</span><br><span class="line">                <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">25.0</span>)</span><br><span class="line">                    .matchedGeometryEffect(id: <span class="string">&quot;rectangle&quot;</span>, in: namespace1)</span><br><span class="line">                    .frame(width: <span class="number">100</span>, height: <span class="number">100</span>)</span><br><span class="line">                    .foregroundColor(.blue)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Spacer</span>().frame(height: <span class="number">100</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">        .onTapGesture &#123;</span><br><span class="line">            withAnimation(.easeInOut) &#123;</span><br><span class="line">                isClicked.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/matchedGeometryEffect.gif" alt="matchedGeometryEffect"></p><h1 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h1><p>The outline of a 2D shape</p><h2 id="直接使用Path画一个三角形"><a href="#直接使用Path画一个三角形" class="headerlink" title="直接使用Path画一个三角形"></a>直接使用Path画一个三角形</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Drawing</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">            path.move(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">300</span>))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">300</span>, y: <span class="number">300</span>))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="给图形填充色-fill"><a href="#给图形填充色-fill" class="headerlink" title="给图形填充色 .fill"></a>给图形填充色 .fill</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Shape</span></span><br><span class="line">    .fill(.blue) <span class="comment">// -- 填充蓝色</span></span><br></pre></td></tr></table></figure><h2 id="描边框-stroke"><a href="#描边框-stroke" class="headerlink" title="描边框 .stroke"></a>描边框 .stroke</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Shape</span></span><br><span class="line">    .stroke(.blue, lineWidth: <span class="number">1</span>)  <span class="comment">// -- 蓝色边框,粗细为1</span></span><br></pre></td></tr></table></figure><h3 id="stroke-和-strokeBorder-的区别"><a href="#stroke-和-strokeBorder-的区别" class="headerlink" title=".stroke 和 .strokeBorder 的区别"></a>.stroke 和 .strokeBorder 的区别</h3><p>当设置.stroke(lineWidth: 50)的时候,最外侧的边会向外扩散25,并向内收拢25;<br>而当设置.strokeBorder(lineWidth: 50)的时候,它只向内收拢50。</p><h3 id="strokeBorder用来描线"><a href="#strokeBorder用来描线" class="headerlink" title="strokeBorder用来描线"></a>strokeBorder用来描线</h3><p>来看下这个箭头是怎么出来的？<br><img src="/./Images/arrow.png" alt="arrow"><br>看以下代码:(如何画这个箭头)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Arrow2</span>: <span class="title class_">InsettableShape</span> &#123;</span><br><span class="line">    <span class="comment">// 因为这是自建图形,想用用到strokeBorder,就需要遵循InsettableShape协议</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了实现InsettableShape协议而写的属性和方法</span></span><br><span class="line">    <span class="keyword">var</span> insetAmount <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">inset</span>(<span class="params">by</span> <span class="params">amount</span>: <span class="type">CGFloat</span>) -&gt; <span class="keyword">some</span> <span class="type">InsettableShape</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arrow <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        arrow.insetAmount <span class="operator">+=</span> amount</span><br><span class="line">        <span class="keyword">return</span> arrow</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是为了实现animation效果的</span></span><br><span class="line">    <span class="keyword">var</span> animatableData: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; insetAmount &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; insetAmount <span class="operator">=</span> newValue&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        path.move(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.height <span class="operator">-</span> insetAmount))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: rect.midX, y: insetAmount))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: insetAmount, y: rect.height <span class="operator">*</span> <span class="number">0.33</span>))</span><br><span class="line">        path.move(to: <span class="type">CGPoint</span>(x: rect.midX, y: insetAmount))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: rect.width <span class="operator">-</span> insetAmount, y: rect.height <span class="operator">*</span> <span class="number">0.33</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是却是这样的图形:<br><img src="/./Images/arrowPath.png" alt="arrow"><br>为什么是这样的一个图形？因为该图形只会在封闭区域加入颜色！<br>因为我们在自建图形里遵循了InsettableShape协议,<br>所以下面我们可以使用.strokeBorder:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lineWidth <span class="operator">=</span> <span class="number">1.0</span>  <span class="comment">// 后面应该有个Slider()来调整这个值</span></span><br><span class="line"></span><br><span class="line"><span class="type">Arrow2</span>()</span><br><span class="line">    .strokeBorder(.blue, style: <span class="type">StrokeStyle</span>(lineWidth: lineWidth, lineCap: .round, lineJoin: .round))</span><br></pre></td></tr></table></figure><p>这时候.strokeBorder的作用只是描边,而不会在封闭区域加入颜色！<br>就会有图一箭头的效果。</p><h3 id="strokeBorder-amp-StrokeStyle-实现动画效果"><a href="#strokeBorder-amp-StrokeStyle-实现动画效果" class="headerlink" title="strokeBorder &amp; StrokeStyle 实现动画效果"></a>strokeBorder &amp; StrokeStyle 实现动画效果</h3><p>示例:<br>create a marching ants border effect<br>创建一个蚂蚁们行军的效果。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> phase <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span>()</span><br><span class="line">            .strokeBorder(style: <span class="type">StrokeStyle</span>(lineWidth: <span class="number">4</span>, dash: [<span class="number">10</span>], dashPhase: phase))</span><br><span class="line">            .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">            .onAppear &#123;</span><br><span class="line">                withAnimation(.linear.repeatForever(autoreverses: <span class="literal">false</span>)) &#123;</span><br><span class="line">                    phase <span class="operator">-=</span> <span class="number">20</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/strokeBorder%20&%20StrokeStyle.gif" alt="strokeBorder &amp; StrokeStyle"><br>实际效果的话,是连贯的一直沿着顺时针走的虚线。<br>若phase -&#x3D; 20,则是逆时针。<br>为何会一直连贯着走？就是因为dash: [10], dashPhase: -20,所以就会看上去连贯,若改成其他数字,就会发现不是连贯,而是一直重复的感觉了。</p><h2 id="解决某些自建Shape不支持-strokeBorder的情况"><a href="#解决某些自建Shape不支持-strokeBorder的情况" class="headerlink" title="解决某些自建Shape不支持.strokeBorder的情况"></a>解决某些自建Shape不支持.strokeBorder的情况</h2><p>原因:<br>Circle和某些自建图形都遵循Shape协议,但Circle遵循第二个名为InsettableShape的协议,而自建图形并不遵循。<br>解决办法:<br>1.遵循InsettableShape协议;<br>2.增加一个inset(by:)方法,并返回一个新的insettable shape;</p><p>具体实现的解释在这里:(貌似里面的代码与这里写的有一点区别,应该是实现了一些其他的东西)</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/adding-strokeborder-support-with-insettableshape">https://www.hackingwithswift.com/books/ios-swiftui/adding-strokeborder-support-with-insettableshape</a></p></blockquote><p>所以,以下面建立的Arc结构体来改编,代码为:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Arc</span>: <span class="title class_">InsettableShape</span> &#123;</span><br><span class="line">    <span class="comment">// 以上遵循InsettableShape协议</span></span><br><span class="line">    <span class="comment">// InsettableShape是建立在Shape协议之上的,所以不用再遵循Shape协议</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startAngle: <span class="type">Angle</span></span><br><span class="line">    <span class="keyword">var</span> endAngle: <span class="type">Angle</span></span><br><span class="line">    <span class="keyword">var</span> clockwise: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加insetAmount变量</span></span><br><span class="line">    <span class="keyword">var</span> insetAmount <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加inset(by:)方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">inset</span>(<span class="params">by</span> <span class="params">amount</span>: <span class="type">CGFloat</span>) -&gt; <span class="keyword">some</span> <span class="type">InsettableShape</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arc <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        arc.insetAmount <span class="operator">+=</span> amount</span><br><span class="line">        <span class="keyword">return</span> arc</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        path.addArc(center: <span class="type">CGPoint</span>(x: rect.midX, y: rect.midY), radius: rect.size.width<span class="operator">/</span><span class="number">2</span>, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Arc</span>(startAngle: .degrees(<span class="number">0</span>), endAngle: .degrees(<span class="number">110</span>), clockwise: <span class="literal">true</span>)</span><br><span class="line">    .strokeBorder(lineWidth: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="path-closeSubpath-–-解决渲染-stroke后-图形存在缺口的情况"><a href="#path-closeSubpath-–-解决渲染-stroke后-图形存在缺口的情况" class="headerlink" title="path.closeSubpath() – 解决渲染.stroke后,图形存在缺口的情况"></a>path.closeSubpath() – 解决渲染.stroke后,图形存在缺口的情况</h2><p>以下三角形增加了stroke修饰符后,当linewidth设置后,该三角形的上角会有缺口,<br>这是因为从起点到终点不断重复,而没有从终点到起点的过程，导致的这个缺口:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">    path.move(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">300</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">&#125;</span><br><span class="line">.stroke(.blue, lineWidth: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>如何解决这个难看的缺口:<br>使用path.closeSubpath()</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">    path.move(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">300</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">    path.closeSubpath()</span><br><span class="line">&#125;</span><br><span class="line">.stroke(.blue, lineWidth: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="StrokeStyle-–-另一个解决-stroke后图形存在缺口的情况"><a href="#StrokeStyle-–-另一个解决-stroke后图形存在缺口的情况" class="headerlink" title="StrokeStyle – 另一个解决.stroke后图形存在缺口的情况"></a>StrokeStyle – 另一个解决.stroke后图形存在缺口的情况</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">    path.move(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">100</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">300</span>, y: <span class="number">300</span>))</span><br><span class="line">    path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">200</span>, y: <span class="number">100</span>))</span><br><span class="line">    <span class="comment">// path.closeSubpath()</span></span><br><span class="line">&#125;</span><br><span class="line">.stroke(.red, style:<span class="type">StrokeStyle</span>(lineWidth: <span class="number">10</span>, lineCap: .round, lineJoin: .round))</span><br></pre></td></tr></table></figure><ul><li>如果是style:StrokeStyle(lineWidth: 30, lineJoin: .round) 则只是在线与线连接过程中是round的,而没有设置结束点与开始点处的连接，仍旧是断的。</li><li>linejoin有三个可选属性,还有.miter是默认的样式,此外.bevel是斜角的连接，</li><li>linecap有三个可选属性,.square是长方形的连接,.butt是烟蒂的连接（默认选项),.round是圆形的连接。<br>所以上面的lineCap和lineJoin都是.round连接,这图形还是相当圆润的。</li></ul><h2 id="clockwise作图为何都是opposite-direction？顺时针画出来的却是逆时针？"><a href="#clockwise作图为何都是opposite-direction？顺时针画出来的却是逆时针？" class="headerlink" title="clockwise作图为何都是opposite direction？顺时针画出来的却是逆时针？"></a>clockwise作图为何都是opposite direction？顺时针画出来的却是逆时针？</h2><p>看了一篇文章，觉得很有道理：<br>The “default coordinate system” really means the standard Cartesian coordinate system, in which the y axis increases toward the top of the canvas. But both SwiftUI and UIKit always set up the coordinate system with the y axis “flipped” so that y values increase toward the bottom of the canvas.<br>clockwise is accurate only in the standard Cartesian coordinate system. What it really means is “the direction of rotation that goes from the positive y axis toward the positive x axis”. So when you’re working in a flipped coordinate system, clockwise means the opposite direction!</p><h1 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h1><h2 id="Triangle"><a href="#Triangle" class="headerlink" title="Triangle"></a>Triangle</h2><p>Shape中没有内建的Triangle的Shape结构,所以需要我们自定义该遵循Shape结构的Triangle,<br>自建的过程,也是我们熟悉其他自建图形的过程:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Triangle</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 任何自建图形均需有path方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">            path.move(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: rect.minX, y: rect.maxY))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: rect.maxX, y: rect.maxY))</span><br><span class="line">            path.addLine(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Triangle</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="comment">// 任何自建图形均需有path方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        path.move(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: rect.minX, y: rect.maxY))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: rect.maxX, y: rect.maxY))</span><br><span class="line">        path.addLine(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.minY))</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经实际操作,这两者是完全一样的。<br>可以看到,实际是使用到了rect: CGRect 的参数来画图形。<br>因此,我们写一个画扇形的struct:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Arc</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> startAngle: <span class="type">Angle</span></span><br><span class="line">    <span class="keyword">var</span> endAngle: <span class="type">Angle</span></span><br><span class="line">    <span class="keyword">var</span> clockwise: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        path.addArc(center: <span class="type">CGPoint</span>(x: rect.midX, y: rect.midY), radius: rect.size.width<span class="operator">/</span><span class="number">2</span>, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用该Arc,并实现画一个圆环,就可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Arc</span>(startAngle: .degrees(<span class="number">0</span>), endAngle: .degrees(<span class="number">110</span>), clockwise: <span class="literal">true</span>)</span><br><span class="line">    .stroke(.blue, lineWidth: <span class="number">10</span>)</span><br><span class="line">    .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br></pre></td></tr></table></figure><h2 id="使用animatableData自定义图形动画"><a href="#使用animatableData自定义图形动画" class="headerlink" title="使用animatableData自定义图形动画"></a>使用animatableData自定义图形动画</h2><h3 id="图形中存在一个变量的情形"><a href="#图形中存在一个变量的情形" class="headerlink" title="图形中存在一个变量的情形"></a>图形中存在一个变量的情形</h3><p>制作一个吃豆人嘴巴始终一张一闭的动画</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pacman</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> offsetAmount: <span class="type">Double</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为什么要定义animatableData变量？</span></span><br><span class="line">    <span class="comment">// 因为下面的path方法返回的只是一个Path,</span></span><br><span class="line">    <span class="comment">// 而该Path并没有属性包装器,</span></span><br><span class="line">    <span class="comment">// 所以该Path不知道视图改变了,</span></span><br><span class="line">    <span class="comment">// 因此需要使用到animatableData的get/set属性来定义</span></span><br><span class="line">    <span class="comment">// 注：必须是animatableData变量名称！</span></span><br><span class="line">    <span class="keyword">var</span> animatableData: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; offsetAmount &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; offsetAmount <span class="operator">=</span> newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">            path.move(to: <span class="type">CGPoint</span>(x: rect.midX, y: rect.midY))</span><br><span class="line">            path.addArc(center: <span class="type">CGPoint</span>(x: rect.midX, y: rect.midY),</span><br><span class="line">                        radius: rect.height <span class="operator">/</span> <span class="number">2</span>,</span><br><span class="line">                        startAngle: <span class="type">Angle</span>(degrees: offsetAmount),</span><br><span class="line">                        endAngle: <span class="type">Angle</span>(degrees: <span class="number">360</span> <span class="operator">-</span> offsetAmount),</span><br><span class="line">                        clockwise: <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test0006</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> animate: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ZStack</span> &#123;</span><br><span class="line">            <span class="type">Pacman</span>(offsetAmount: animate <span class="operator">?</span> <span class="number">20.0</span> : <span class="number">0.0</span>)</span><br><span class="line">                .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            <span class="comment">// 因为有了.repeatForever()才导致吃豆人的嘴巴一直一张一合</span></span><br><span class="line">            withAnimation(<span class="type">Animation</span>.linear(duration: <span class="number">1.0</span>).repeatForever()) &#123;</span><br><span class="line">                animate.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AnimatablePair-–-针对animatableData只能设置一个property的不足-类似一个补丁"><a href="#AnimatablePair-–-针对animatableData只能设置一个property的不足-类似一个补丁" class="headerlink" title="AnimatablePair – 针对animatableData只能设置一个property的不足,类似一个补丁"></a>AnimatablePair – 针对animatableData只能设置一个property的不足,类似一个补丁</h3><p>之前用到的animatableData只能捕捉一个变量的变化,因此引入到了AnimatablePair。<br>AnimatablePair读取多个变量使用.first和.second。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Checkerboard</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rows: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> columns: <span class="type">Int</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">var</span> animatableData: <span class="type">AnimatablePair</span>&lt;<span class="type">Double</span>, <span class="type">Double</span>&gt; &#123;</span><br><span class="line">        <span class="comment">// 如果是 AnimatablePair&lt;Int, Int&gt;</span></span><br><span class="line">        <span class="comment">// 则会跳出Type &#x27;Int&#x27; does not conform to protocol &#x27;VectorArithmetic&#x27;</span></span><br><span class="line">        <span class="comment">// 所以只能用Double类型</span></span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="type">AnimatablePair</span>(<span class="type">Double</span>(rows), <span class="type">Double</span>(columns))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            rows <span class="operator">=</span> <span class="type">Int</span>(newValue.first)</span><br><span class="line">            columns <span class="operator">=</span> <span class="type">Int</span>(newValue.second)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> rowSize <span class="operator">=</span> rect.height <span class="operator">/</span> <span class="type">Double</span>(rows)</span><br><span class="line">        <span class="keyword">let</span> columnSize <span class="operator">=</span> rect.width <span class="operator">/</span> <span class="type">Double</span>(columns)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>rows &#123;</span><br><span class="line">            <span class="keyword">for</span> column <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span>columns &#123;</span><br><span class="line">                <span class="keyword">if</span> (row <span class="operator">+</span> column).isMultiple(of: <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> startX <span class="operator">=</span> columnSize <span class="operator">*</span> <span class="type">Double</span>(column)</span><br><span class="line">                    <span class="keyword">let</span> startY <span class="operator">=</span> rowSize <span class="operator">*</span> <span class="type">Double</span>(row)</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">let</span> rect <span class="operator">=</span> <span class="type">CGRect</span>(x: startX, y: startY, width: columnSize, height: rowSize)</span><br><span class="line">                    path.addRect(rect)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Drawing</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> rows <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> columns <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Checkerboard</span>(rows: rows, columns: columns)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/AnimatablePair.png" alt="&quot;AnimatablePair&quot;"></p><h3 id="AnimatablePair-–-如何设置三个以上变量"><a href="#AnimatablePair-–-如何设置三个以上变量" class="headerlink" title="AnimatablePair – 如何设置三个以上变量"></a>AnimatablePair – 如何设置三个以上变量</h3><p>使用到:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AnimatablePair</span>&lt;<span class="type">CGFloat</span>, <span class="type">AnimatablePair</span>&lt;<span class="type">CGFloat</span>, <span class="type">AnimatablePair</span>&lt;<span class="type">CGFloat</span>, <span class="type">CGFloat</span>&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>所以,如何调用第四个变量:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newValue.second.second.second.second</span><br></pre></td></tr></table></figure><h2 id="使用花瓣的图形"><a href="#使用花瓣的图形" class="headerlink" title="使用花瓣的图形"></a>使用花瓣的图形</h2><p>图形如图:<br><img src="/./Images/ellipseFlower.png" alt="ellipseFlower"><br>代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Flower</span>: <span class="title class_">Shape</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 每片叶片偏移原点的量</span></span><br><span class="line">    <span class="keyword">var</span> petalOffset: <span class="type">Double</span> <span class="operator">=</span> <span class="operator">-</span><span class="number">20</span></span><br><span class="line">    <span class="comment">// 每片叶片的宽度</span></span><br><span class="line">    <span class="keyword">var</span> petalWidth: <span class="type">Double</span> <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">path</span>(<span class="params">in</span> <span class="params">rect</span>: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> path <span class="operator">=</span> <span class="type">Path</span>()</span><br><span class="line">        <span class="comment">// 一个pi为180度,故从0度开始旋转360度,为一整圈回原点</span></span><br><span class="line">        <span class="comment">// 每个步伐为22.5度,共18个步伐,所以有18片叶片</span></span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="type">Double</span>.pi <span class="operator">*</span> <span class="number">2</span>, by: <span class="type">Double</span>.pi <span class="operator">/</span> <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">// 定义每个叶片旋转的角度</span></span><br><span class="line">            <span class="comment">// CGAffineTransform(rotationAngle: CGFloat)</span></span><br><span class="line">            <span class="keyword">let</span> rotation <span class="operator">=</span> <span class="type">CGAffineTransform</span>(rotationAngle: number)</span><br><span class="line">            <span class="comment">// 定义每个叶片的起点</span></span><br><span class="line">            <span class="keyword">let</span> position <span class="operator">=</span> rotation.concatenating(<span class="type">CGAffineTransform</span>(translationX: rect.width <span class="operator">/</span> <span class="number">2</span>, y: rect.height <span class="operator">/</span> <span class="number">2</span>))</span><br><span class="line">            <span class="comment">// 定义椭圆相对起点的位置以及自身的大小</span></span><br><span class="line">            <span class="keyword">let</span> originalPetal <span class="operator">=</span> <span class="type">Path</span>(ellipseIn: <span class="type">CGRect</span>(x: petalOffset, y: <span class="number">0</span>, width: petalWidth, height: rect.width <span class="operator">/</span> <span class="number">2</span>))</span><br><span class="line">            <span class="comment">// 将定义的椭圆加入之前定义的旋转角度和起点位置</span></span><br><span class="line">            <span class="keyword">let</span> rotatedPetal <span class="operator">=</span> originalPetal.applying(position)</span><br><span class="line">            path.addPath(rotatedPetal)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Flower</span>()</span><br><span class="line">    .fill(.green.opacity(<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><h3 id="fill-的-style-FillStyle-eoFill-lt-T-Bool-gt-antialiased-lt-T-Bool-gt"><a href="#fill-的-style-FillStyle-eoFill-lt-T-Bool-gt-antialiased-lt-T-Bool-gt" class="headerlink" title=".fill 的 style: FillStyle(eoFill: &lt;#T##Bool#&gt;, antialiased: &lt;#T##Bool#&gt;)"></a>.fill 的 style: FillStyle(eoFill: &lt;#T##Bool#&gt;, antialiased: &lt;#T##Bool#&gt;)</h3><p>达到如下图的效果:<br><img src="/./Images/evenOddEllipseFlower.png" alt="evenOddEllipseFlower"><br>代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Flower</span>()</span><br><span class="line">    .fill(.green.opacity(<span class="number">0.5</span>), style: <span class="type">FillStyle</span>(eoFill: <span class="literal">true</span>))</span><br></pre></td></tr></table></figure><p>eoFill的eo是什么意思？即”even-odd”。</p><h2 id="inset"><a href="#inset" class="headerlink" title=".inset"></a>.inset</h2><p>.inset(by: CGFloat) 仅适用于形状。是指从形状的边缘向内插入的空间或距离。<br>看下面的例子:<br><img src="/./Images/insetCircle.png" alt="insetCircle"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">    .in<span class="keyword">set</span>(by: <span class="number">20</span>)</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .foregroundColor(.green)</span><br><span class="line">    .border(<span class="type">Color</span>.green)</span><br></pre></td></tr></table></figure><p>本来圆形是能撑住整个边框的,现在因为插入了20的距离,所以缩小了。<br>那么如果by的值是负数的情况呢？<br><img src="/./Images/insetCircle2.png" alt="insetCircle2"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">    .in<span class="keyword">set</span>(by: <span class="operator">-</span><span class="number">20</span>)</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .foregroundColor(.green)</span><br><span class="line">    .border(<span class="type">Color</span>.green)</span><br></pre></td></tr></table></figure><p>就会超出边框。</p><h2 id="drawingGroup"><a href="#drawingGroup" class="headerlink" title="drawingGroup()"></a>drawingGroup()</h2><p>当一个view要计算大量图形时,会让系统变慢，如何解决或者优化这样的问题呢？<br>使用drawingGroup()这个修饰器。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="comment">// 大量的图形计算及堆叠,例如</span></span><br><span class="line">    <span class="comment">// to render 100 gradients as part of 100 separate views.</span></span><br><span class="line">&#125;</span><br><span class="line">.drawingGroup()</span><br></pre></td></tr></table></figure><p>原理是:<br>This tells SwiftUI it should render the contents of the view into an off-screen image before putting it back onto the screen as a single rendered output, which is significantly faster. Behind the scenes this is powered by Metal, which is Apple’s framework for working directly with the GPU for extremely fast graphics.<br>但尽量少用drawingGroup(),虽然它能解决大量图形运算的性能问题,但后台的图像生成还是会减慢简单绘图的速度,所以只在解决现实问题的时候再使用。</p><h2 id="blending-mode-–-混合模式"><a href="#blending-mode-–-混合模式" class="headerlink" title="blending mode – 混合模式"></a>blending mode – 混合模式</h2><p>将不同图层的颜色进行混合</p><h3 id="someShape-blendMode-multiply"><a href="#someShape-blendMode-multiply" class="headerlink" title="someShape.blendMode(.multiply)"></a>someShape.blendMode(.multiply)</h3><p><img src="/./Images/blendModeMultiply.png" alt="blendModeMultiply"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">&quot;threemonths&quot;</span>)</span><br><span class="line">        .resizable()</span><br><span class="line">        .scaledToFit()</span><br><span class="line"></span><br><span class="line">    <span class="type">Rectangle</span>()</span><br><span class="line">        .fill(.red)</span><br><span class="line">        .blendMode(.multiply)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">400</span>, height: <span class="number">500</span>)</span><br><span class="line">.clipped()</span><br></pre></td></tr></table></figure><p>以上是混合图像和上层的红色矩形,让图片像底片一样的红色。<br>颜色混合模式中:<br>multiply的原理是:<br>每个像素都有一个RGBA,范围从0到1,其中越黑的像素越靠近0,而颜色越亮丽的像素越靠近1,<br>multiply会让该值乘以本身,所以结果就是黑的越黑,亮的越黯淡,不可能超过原始颜色。CGAffineTransform<br>同效果的还有如下的 someShape.colorMultiply(Color)</p><h3 id="someShape-colorMultiply-Color"><a href="#someShape-colorMultiply-Color" class="headerlink" title="someShape.colorMultiply(Color)"></a>someShape.colorMultiply(Color)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;threemonths&quot;</span>)</span><br><span class="line">    .resizable()</span><br><span class="line">    .scaledToFit()</span><br><span class="line">    .colorMultiply(.red)</span><br></pre></td></tr></table></figure><p>效果同 someShape.blendMode(.multiply) 是一样的，但这个更方便，直接在图像上使用，而不用使用ZStack()了。</p><h3 id="blendMode-screen"><a href="#blendMode-screen" class="headerlink" title=".blendMode(.screen)"></a>.blendMode(.screen)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="type">Circle</span>()</span><br><span class="line">        .fill(.red)</span><br><span class="line">        .frame(width: <span class="number">200</span>)</span><br><span class="line">        .offset(x: <span class="operator">-</span><span class="number">50</span>, y: <span class="operator">-</span><span class="number">80</span>)</span><br><span class="line">        .blendMode(.screen)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Circle</span>()</span><br><span class="line">        .fill(.green)</span><br><span class="line">        .frame(width: <span class="number">200</span>)</span><br><span class="line">        .offset(x: <span class="number">50</span>, y: <span class="operator">-</span><span class="number">80</span>)</span><br><span class="line">        .blendMode(.screen)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Circle</span>()</span><br><span class="line">        .fill(.blue)</span><br><span class="line">        .frame(width: <span class="number">200</span>)</span><br><span class="line">        .blendMode(.screen)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">300</span>, height: <span class="number">400</span>)</span><br><span class="line">.background(.white)</span><br></pre></td></tr></table></figure><p>此时屏幕上什么都没有,而把background中颜色换成.black，就会是这样:<br><img src="/Images/blendModeScreen.png" alt="blendModeScreen"><br>自己粗糙的理解,白色为1,黑色为0,白色的再混合还是白色,黑色混合什么颜色就是什么颜色。</p><h2 id="saturation-和-blur-测试"><a href="#saturation-和-blur-测试" class="headerlink" title="saturation 和 blur 测试"></a>saturation 和 blur 测试</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> amount: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Image</span>(<span class="string">&quot;threemonths&quot;</span>)</span><br><span class="line">        .resizable()</span><br><span class="line">        .scaledToFit()</span><br><span class="line">        .frame(width: <span class="number">300</span>)</span><br><span class="line">        .saturation(amount)</span><br><span class="line">        .blur(radius: (<span class="number">1</span><span class="operator">-</span>amount)<span class="operator">*</span><span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">Slider</span>(value: <span class="variable">$amount</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With that code, having the slider at 0 means the image is blurred and colorless, but as you move the slider to the right it gains color and becomes sharp – all rendered at lightning-fast speed.</p><h2 id="trim-from-to"><a href="#trim-from-to" class="headerlink" title="trim(from::to::)"></a>trim(from::to::)</h2><p><img src="/Images/trim.gif" alt="&quot;trim&quot;"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Rectangle</span>()</span><br><span class="line">    .trim(from: <span class="number">0</span>, to: completionAmount)</span><br><span class="line">    .stroke(.red, lineWidth: <span class="number">20</span>)</span><br><span class="line">    .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">    .rotationEffect(.degrees(<span class="operator">-</span><span class="number">90</span>))</span><br><span class="line">    .onReceive(timer) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        withAnimation &#123;</span><br><span class="line">            <span class="keyword">if</span> completionAmount <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">                completionAmount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                completionAmount <span class="operator">+=</span> <span class="number">0.2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>from和to的数值都是从0到1的范围。</p><h2 id="ContainerRelativeShape"><a href="#ContainerRelativeShape" class="headerlink" title="ContainerRelativeShape"></a>ContainerRelativeShape</h2><p>向容器内嵌入shape,看代码就能理解了。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ZStack</span> &#123;</span><br><span class="line">    <span class="type">ContainerRelativeShape</span>()</span><br><span class="line">        .in<span class="keyword">set</span>(by: <span class="number">4</span>)</span><br><span class="line">        .fill(.blue)</span><br><span class="line">    </span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">        .font(.title)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">300</span>, height: <span class="number">200</span>)</span><br><span class="line">.background(.red)</span><br><span class="line">.clipShape(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">30</span>))</span><br></pre></td></tr></table></figure><p><img src="/Images/ContainerRelativeShape.png" alt="&quot;ContainerRelativeShape&quot;"><br>可以看到<br>ContainerRelativeShape().inset(by: 4)<br>是从边界向内4个像素开始生成图形,而红色背景只能看到最外侧的4个像素。</p><h1 id="从网页取得数据"><a href="#从网页取得数据" class="headerlink" title="从网页取得数据"></a>从网页取得数据</h1><h3 id="向网页POST数据"><a href="#向网页POST数据" class="headerlink" title="向网页POST数据"></a>向网页POST数据</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Post</span>: <span class="title class_">Encodable</span>, <span class="title class_">Decodable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> userId: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向特定网页POST数据</span></span><br><span class="line"><span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>)<span class="operator">!</span></span><br><span class="line"><span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">request.addValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> post <span class="operator">=</span> <span class="type">Post</span>(body: <span class="string">&quot;给我滚出去&quot;</span>, title: <span class="string">&quot;你好啊，小明&quot;</span>, id: <span class="number">787</span>, userId: <span class="number">87</span>)</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> jsonBody <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONEncoder</span>().encode(post)</span><br><span class="line">    request.httpBody <span class="operator">=</span> jsonBody</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> session <span class="operator">=</span> <span class="type">URLSession</span>.shared</span><br><span class="line"></span><br><span class="line">session.dataTask(with: request) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> json <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Post</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">        <span class="built_in">print</span>(json)</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.resume()</span><br></pre></td></tr></table></figure><p>(使用到async&#x2F;await)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">placeOrder</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> encoded <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONEncoder</span>().encode(order) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to encode order&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://reqres.in/api/cupcakes&quot;</span>)<span class="operator">!</span></span><br><span class="line">    <span class="keyword">var</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line">    request.setValue(<span class="string">&quot;application/json&quot;</span>, forHTTPHeaderField: <span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line">    request.httpMethod <span class="operator">=</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.upload(for: request, from: encoded)</span><br><span class="line">        <span class="keyword">let</span> decodedOrder <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Order</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line">        confirmationMessage <span class="operator">=</span> <span class="string">&quot;Your order for <span class="subst">\(decodedOrder.quantity)</span>x <span class="subst">\(Order.types[decodedOrder.type].lowercased())</span> cupcakes is on its way!&quot;</span></span><br><span class="line">        showingConfirmation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="comment">// 报错的flag和信息,如无法连接网络等</span></span><br><span class="line">        networkingFailure <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">        networkFailureMessage <span class="operator">=</span> <span class="string">&quot;Lost internet connetction&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLSession-shared-dataTask的使用"><a href="#URLSession-shared-dataTask的使用" class="headerlink" title="URLSession.shared.dataTask的使用"></a>URLSession.shared.dataTask的使用</h3><p>例如网页返回的数据是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;resultCount&quot;</span><span class="punctuation">:</span><span class="number">50</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;results&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;artistId&quot;</span><span class="punctuation">:</span> <span class="number">159260351</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;artistId&quot;</span><span class="punctuation">:</span> <span class="number">159260352</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;artistId&quot;</span><span class="punctuation">:</span> <span class="number">159260353</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>那么,要取得resultCount的数据50,就要建立一个result1结构:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">result1</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> resultCount: <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也要取得results这个列表,就需要建立另一个result2结构:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">result2</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> artistId: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line">以及取得result2集合的result3结构:</span><br><span class="line">``` <span class="type">Swift</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">result3</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> results: [result2]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来contentView结构中就是这样的:<br>(一般用法,未使用到async&#x2F;await)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> results: [<span class="type">Result</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> count: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">loadData</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://itunes.apple.com/search?term=taylor+swift&amp;entity=song&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid URL&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果定义了下面被注释的request,后面的URLSession.shared.dataTask(with: request)返回的结果是一样的</span></span><br><span class="line">        <span class="comment">// 那么定义常量request又有什么用呢？</span></span><br><span class="line">        <span class="comment">// 看了URLSession.shared.dataTask的defination:</span></span><br><span class="line">        <span class="comment">// func dataTask(with request: URLRequest, completionHandler: @escaping (Data?, URLResponse?, Error?) -&gt; Void) -&gt; URLSessionDataTask</span></span><br><span class="line">        <span class="comment">// func dataTask(with url: URL, completionHandler: @escaping (Data?, URLResponse?, Error?) -&gt; Void) -&gt; URLSessionDataTask</span></span><br><span class="line">        <span class="comment">// 确实两者都可以用,但看一些文章称,URLRequest是我们添加不同的自定义项以控制URL加载的地方。</span></span><br><span class="line">        <span class="keyword">let</span> request <span class="operator">=</span> <span class="type">URLRequest</span>(url: url)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// URLSession是负责管理网络请求的iOS类。</span></span><br><span class="line">        <span class="comment">// shared是共享会话,除非需要某些特定的行为,不然使用shared就可以了。</span></span><br><span class="line">        <span class="comment">// URLSession.shared.dataTask方法从之前的URLRequest对象中创建一个网络任务,</span></span><br><span class="line">        <span class="comment">// 并在任务完成时运行一个闭包（下面是拖尾闭包语法）</span></span><br><span class="line">        <span class="comment">// 该闭包负责对数据或错误进行处理。</span></span><br><span class="line">        <span class="comment">// 闭包会在后台运行,所以网络请求在后台运行时,不会阻断用户与UI的交互。</span></span><br><span class="line">        <span class="comment">// 该闭包接收三个参数: data / response / error .</span></span><br><span class="line">        <span class="comment">// data是从请求返回的数据；</span></span><br><span class="line">        <span class="comment">// response是数据的描述,它可能包含数据的类型、数据量、状态码等;</span></span><br><span class="line">        <span class="comment">// error是出现的错误.</span></span><br><span class="line">        <span class="comment">// 注意:</span></span><br><span class="line">        <span class="comment">//      如果发生error,就不会设置data;</span></span><br><span class="line">        <span class="comment">//      如果返回data,就不会设置error.</span></span><br><span class="line">        <span class="comment">//      切记！</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: request) &#123; data, response, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> data &#123;</span><br><span class="line">                <span class="comment">// 不能同时decode上面写的Result1结构和Response结构,</span></span><br><span class="line">                <span class="comment">// 只能一个个来,所以写了两个if。</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Result1</span>.<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">                    <span class="comment">// DispatchQueue.main.async()用来将工作发送到主线程。</span></span><br><span class="line">                    <span class="comment">// 因为iOS会让用户界面都在主线程运行,所以在后台获取数据,在后台解码JSON,然后在主线程实际更新属性。</span></span><br><span class="line">                    <span class="comment">// async代表着这是异步提交到主线程。</span></span><br><span class="line">                    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                        <span class="keyword">self</span>.count <span class="operator">=</span> decodedResponse.resultCount</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode(<span class="type">Response</span>.<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">                    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                        <span class="keyword">self</span>.results <span class="operator">=</span> decodedResponse.results</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 因为data和error是互斥的,所以这里要return,或者下面用else也可以,不能让print执行到。</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里使用了可选链和空合运算符，如果存在错误则打印出错误，否则给出一个通用错误&quot;Unknown error&quot;。</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Fetch failed: <span class="subst">\(error<span class="operator">?</span>.localizedDescription <span class="operator">??</span> <span class="string">&quot;Unknown error&quot;</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;.resume() <span class="comment">// 若没有.resume()的话,则该URLSession.shared.dataTask不会执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Total:<span class="subst">\(count)</span>&quot;</span>)</span><br><span class="line">            <span class="type">List</span>(results, id:\.trackId) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                    <span class="type">Text</span>(item.trackName)</span><br><span class="line">                        .font(.headline)</span><br><span class="line">                    <span class="type">Text</span>(item.collectionName)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onAppear(perform: loadData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(使用到async&#x2F;await)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">getDatasFromJsonPage2</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> results:[<span class="type">Message</span>] <span class="operator">=</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里在loadData()后面加async,代表这个函数是异步的</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">loadData</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://www.hackingwithswift.com/samples/user-messages.json&quot;</span>) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid url&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 这里用到了await,所以没有用到上面所写的.consume()</span></span><br><span class="line">            <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> decodedResponse <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Message</span>].<span class="keyword">self</span>, from: data) &#123;</span><br><span class="line">                <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                    <span class="keyword">self</span>.results <span class="operator">=</span> decodedResponse</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Invalid data&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">List</span>(results, id:\.id) &#123; item <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;From:<span class="subst">\(item.from)</span>&quot;</span>)</span><br><span class="line">                    .font(.headline)</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;message:<span class="subst">\(item.message)</span>&quot;</span>)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// .task修饰符只能用在iOS15.0以上</span></span><br><span class="line">            <span class="comment">// SwiftUI provides a task modifier that you can use to execute an asynchronous function when a view appears</span></span><br><span class="line">            <span class="comment">// The system automatically cancels tasks when a view disappears.</span></span><br><span class="line">            .task &#123;</span><br><span class="line">                <span class="comment">// loadData()是异步方法,所以需要用await</span></span><br><span class="line">                <span class="keyword">await</span> loadData()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取得图片数据-并直接在View中显示"><a href="#取得图片数据-并直接在View中显示" class="headerlink" title="取得图片数据,并直接在View中显示"></a>取得图片数据,并直接在View中显示</h3><blockquote><p>Loading an image from a remote server<br><a href="https://www.hackingwithswift.com/books/ios-swiftui/loading-an-image-from-a-remote-server">https://www.hackingwithswift.com/books/ios-swiftui/loading-an-image-from-a-remote-server</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先,AsyncImage(url:)直接返回一个Image</span></span><br><span class="line"><span class="type">AsyncImage</span>(url: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/img/logo.png&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其次,这是AsyncImage(url:content:placeholder:)</span></span><br><span class="line"><span class="type">AsyncImage</span>(url: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/img/logo.png&quot;</span>)) &#123; image <span class="keyword">in</span></span><br><span class="line">    image</span><br><span class="line">        .resizable()</span><br><span class="line">        .scaledToFit()</span><br><span class="line">&#125; placeholder: &#123;</span><br><span class="line">    <span class="type">Color</span>.red</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最后,这是AsyncImage(url:content:)</span></span><br><span class="line"><span class="comment">// content中返回的是一个enum AsyncImagePhase,</span></span><br><span class="line"><span class="comment">// 它有case empty / case success(Image) / case failure(Error)三种情况:</span></span><br><span class="line"><span class="type">AsyncImage</span>(url: <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/img/logo.png&quot;</span>)) &#123; phase <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> phase.image &#123;</span><br><span class="line">        image</span><br><span class="line">            .resizable()</span><br><span class="line">            .scaledToFit()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> phase.error <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;There was an error loading the image.&quot;</span>)</span><br><span class="line">        <span class="comment">// 或者这里加载一个错误的图片如Image(systemName: &quot;questionmark&quot;)</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ProgressView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JSONDecoder-dateDecodingStrategy-x3D-iso8601"><a href="#JSONDecoder-dateDecodingStrategy-x3D-iso8601" class="headerlink" title="JSONDecoder().dateDecodingStrategy  &#x3D; .iso8601"></a>JSONDecoder().dateDecodingStrategy  &#x3D; .iso8601</h3><p>当你发现需要提取的字符串的日期格式是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;registered&quot;</span>: <span class="string">&quot;2015-11-10T01:47:18-00:00&quot;</span></span><br></pre></td></tr></table></figure><p>这是时间和日期的国际标准 ISO-8601。<br>需要如此提取为Date格式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="comment">// 多这一行代码</span></span><br><span class="line">decoder.dateDecodingStrategy <span class="operator">=</span> .iso8601</span><br><span class="line"><span class="comment">// 接下来继续decode</span></span><br></pre></td></tr></table></figure><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h3 id="unowned-self-与-weak-self"><a href="#unowned-self-与-weak-self" class="headerlink" title="[unowned self] 与 [weak self]"></a>[unowned self] 与 [weak self]</h3><blockquote><p><a href="https://blog.csdn.net/Three_Zhang/article/details/80137421">https://blog.csdn.net/Three_Zhang/article/details/80137421</a></p></blockquote><p>弱引用（weak）,无主引用（unowned）.<br>这二者的使用场景分别如下：<br>如果捕获（比如 self）可以被设置为 nil(即Optional的场景)，也就是说它可能在闭包前被销毁，那么就要将捕获定义为 weak。<br>如果它们一直是相互引用，即同时销毁的，那么就可以将捕获定义为 unowned。</p><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h3 id="singleton-即单例"><a href="#singleton-即单例" class="headerlink" title="singleton 即单例"></a>singleton 即单例</h3><p>单例就比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TheOneAndOnlyKraken</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedInstance <span class="operator">=</span> <span class="type">TheOneAndOnlyKraken</span>() <span class="comment">// singleton</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单例在使用中非常的普遍,单例有三个重要的准则:<br>1.单例必须是唯一的(只能存在这一个实例,而且是能全局访问的)<br>2.为保证单例的唯一性,单例类的初始化方法必须是私有的(即private init())<br>3.单例必须是线程安全的(要满足隐藏的dispatch_once规则)(通过dispatch_once可保证实例化代码只运行一次)</p><h3 id="UUID-uuidstring-创建随机字符串"><a href="#UUID-uuidstring-创建随机字符串" class="headerlink" title="UUID().uuidstring 创建随机字符串"></a>UUID().uuidstring 创建随机字符串</h3><p>UUID().uuidstring可以创建36位的随机字符串</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="type">UUID</span>().uuidString)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  D3ABA279-6808-49E9-A3F5-953FB1EC6DAD</span></span><br><span class="line"><span class="comment">//  8985DA1E-CCDA-4102-B21F-E7F8CCDF98EE</span></span><br><span class="line"><span class="comment">//  97F65EBD-1A52-4489-8AC1-3F6B3CB45596</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="as-x2F-as-x2F-as-三种操作符"><a href="#as-x2F-as-x2F-as-三种操作符" class="headerlink" title="as &#x2F; as! &#x2F; as? 三种操作符"></a>as &#x2F; as! &#x2F; as? 三种操作符</h1><h4 id="as"><a href="#as" class="headerlink" title="as"></a>as</h4><p>– 从派生类转换为基类,即向上转型(Upcasting)。</p><h4 id="as-1"><a href="#as-1" class="headerlink" title="as!"></a>as!</h4><p>– 向下转型(Downcasting)。由于是强制类型转换,如果转换失败会报runtime错误。</p><h4 id="as-2"><a href="#as-2" class="headerlink" title="as?"></a>as?</h4><p>– as?和as!操作符的转换规则完全一样,但as?如果转换不成功的时候就会返回一个nil对象。</p><blockquote><p><a href="https://www.cnblogs.com/dukework/p/6553714.html">https://www.cnblogs.com/dukework/p/6553714.html</a></p></blockquote><h1 id="Timer-amp-amp-Date"><a href="#Timer-amp-amp-Date" class="headerlink" title="Timer &amp;&amp; Date"></a>Timer &amp;&amp; Date</h1><h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><h4 id="Timer-scheduledTimer-withTimeInterval-lt-T-TimeInterval-gt-repeats-lt-T-Bool-gt-block-lt-T-Timer-gt-Void-gt"><a href="#Timer-scheduledTimer-withTimeInterval-lt-T-TimeInterval-gt-repeats-lt-T-Bool-gt-block-lt-T-Timer-gt-Void-gt" class="headerlink" title="Timer.scheduledTimer(withTimeInterval: &lt;#T##TimeInterval#&gt;, repeats: &lt;#T##Bool#&gt;, block: &lt;#T##(Timer) -&gt; Void#&gt;)"></a>Timer.scheduledTimer(withTimeInterval: &lt;#T##TimeInterval#&gt;, repeats: &lt;#T##Bool#&gt;, block: &lt;#T##(Timer) -&gt; Void#&gt;)</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="comment">//  每秒更新给count变量的值加1</span></span><br><span class="line"><span class="comment">// 如果repeat为false,则只执行一次</span></span><br><span class="line"><span class="type">Timer</span>.scheduledTimer(withTimeInterval: <span class="number">0.2</span>, repeats: <span class="literal">true</span>) &#123; timer <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> counter <span class="operator">==</span> <span class="number">50</span> &#123;</span><br><span class="line">        <span class="comment">// 停止timer</span></span><br><span class="line">        timer.invalidate()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">20</span> &#123;</span><br><span class="line">    delay <span class="operator">+=</span> <span class="number">0.2</span></span><br><span class="line">    <span class="type">Timer</span>.scheduledTimer(withTimeInterval: delay, repeats: <span class="literal">false</span>) &#123; timer <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">self</span>.count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">不能错误理解成,第一个执行完,第二个过0.2秒执行完,轮到第三个开始过0.4秒执行,完毕后第四个开始计时，这是错误的。</span></span><br><span class="line"><span class="comment">其实是,第一个执行完,第二个执行但等待0.2秒,第三个也是执行,但等待0.4秒,依次下去,所以每个的看上去相差均是0.2!</span></span><br><span class="line"><span class="comment">所以这里的跟上面单独的timer相同的效果。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="Timer-publish"><a href="#Timer-publish" class="headerlink" title="Timer.publish"></a>Timer.publish</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every指间隔时间,on指在哪个线程运行,in是指RunLoop.Mode,一般设置为.common</span></span><br><span class="line"><span class="comment">// .autoconnect()是自动连接或断开该publish的意思</span></span><br><span class="line"><span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1.0</span>, on: .main, in: .common).autoconnect()</span><br><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> currentDate: <span class="type">Date</span> <span class="operator">=</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dateFormatter: <span class="type">DateFormatter</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> formatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">    formatter.timeStyle <span class="operator">=</span> .medium</span><br><span class="line">    <span class="keyword">return</span> formatter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(dateFormatter.string(from: currentDate))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .onReceive(Publisher, perform: &#123; _ in Code &#125;)</span></span><br><span class="line">    <span class="comment">// .onReceive接收一个Publisher,所以</span></span><br><span class="line">    .onReceive(timer, perform: &#123; value <span class="keyword">in</span></span><br><span class="line">        currentDate <span class="operator">=</span> value</span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是每秒走一秒的一个时钟</p><p>也可以用这个做一个计时器,比如10-9-8-…-1-时间到！<br>下面是一个23:59:29倒计时的计时器的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1.0</span>, on: .main, in: .common).autoconnect()</span><br><span class="line"></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> timeRemaining: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> futureDate: <span class="type">Date</span> <span class="operator">=</span> <span class="type">Calendar</span>.current.date(byAdding: .day, value: <span class="number">1</span>, to: <span class="type">Date</span>()) <span class="operator">??</span> <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">updateTimeRemaing</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> remaining <span class="operator">=</span> <span class="type">Calendar</span>.current.dateComponents([.hour, .minute, .second], from: <span class="type">Date</span>(), to: futureDate)</span><br><span class="line">    <span class="keyword">let</span> hour <span class="operator">=</span> remaining.hour <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> minute <span class="operator">=</span> remaining.minute <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> second <span class="operator">=</span> remaining.second <span class="operator">??</span> <span class="number">0</span></span><br><span class="line">    timeRemaining <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(hour)</span>:<span class="subst">\(minute)</span>:<span class="subst">\(second)</span>&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(timeRemaining)</span><br><span class="line">    &#125;</span><br><span class="line">    .onReceive(timer, perform: &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">        updateTimeRemaining()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Timer-publish的关闭"><a href="#Timer-publish的关闭" class="headerlink" title="Timer.publish的关闭"></a>Timer.publish的关闭</h5><p>紧接上例,要关闭timer,需要用到以下代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer.upstream.connect().cancel()</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1</span>, on: .main, in: .common).autoconnect()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> counter <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .onReceive(timer) &#123; time <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> counter <span class="operator">==</span> <span class="number">5</span> &#123;</span><br><span class="line">                    timer.upstream.connect().cancel()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;The time is now <span class="subst">\(time)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                counter <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Timer-publish的tolerance参数的设置"><a href="#Timer-publish的tolerance参数的设置" class="headerlink" title="Timer.publish的tolerance参数的设置"></a>Timer.publish的tolerance参数的设置</h4><p>tolerance参数的设置的用处:<br>Before we’re done, there’s one more important timer concept I want to show you: if you’re OK with your timer having a little float, you can specify some tolerance. This allows iOS to perform important energy optimization, because it can fire the timer at any point between its scheduled fire time and its scheduled fire time plus the tolerance you specify. In practice this means the system can perform timer coalescing: it can push back your timer just a little so that it fires at the same time as one or more other timers, which means it can keep the CPU idling more and save battery power.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer <span class="operator">=</span> <span class="type">Timer</span>.publish(every: <span class="number">1</span>, tolerance: <span class="number">0.5</span>, on: .main, in: .common).autoconnect()</span><br></pre></td></tr></table></figure><p>不知道理解的有没有错,若设置tolerance非默认的0值比如0.5之类,则能更加节能,但若不设置,能够更精确。<br>经几个小时的测试,两者时间差并没有什么区别。不知道有什么更大的区别,还是需要更长时间的测试。</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h4 id="取得今日和明日的时间"><a href="#取得今日和明日的时间" class="headerlink" title="取得今日和明日的时间"></a>取得今日和明日的时间</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得今日的时间</span></span><br><span class="line"><span class="keyword">let</span> now <span class="operator">=</span> <span class="type">Date</span>.now</span><br><span class="line"><span class="comment">// 取得明日的时间</span></span><br><span class="line"><span class="keyword">let</span> tomorrow <span class="operator">=</span> <span class="type">Date</span>.now.addingTimeInterval(<span class="number">86400</span>)</span><br><span class="line"><span class="comment">// 取得今日和明日的时间区间</span></span><br><span class="line"><span class="keyword">let</span> range <span class="operator">=</span> now<span class="operator">...</span>tomorrow</span><br></pre></td></tr></table></figure><h4 id="DateComponents"><a href="#DateComponents" class="headerlink" title="DateComponents"></a>DateComponents</h4><p>DateComponents let us read or write specific parts of a date rather than the whole thing.</p><p>So, if we wanted a date that represented 8am today, we could write code like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> components <span class="operator">=</span> <span class="type">DateComponents</span>()</span><br><span class="line">components.hour <span class="operator">=</span> <span class="number">8</span></span><br><span class="line">components.minute <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> date <span class="operator">=</span> <span class="type">Calendar</span>.current.date(from: components)</span><br><span class="line"><span class="comment">// &quot;Jan 1, 1 at 8:00 AM&quot;</span></span><br></pre></td></tr></table></figure><p>取得某日期的hour和minute:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someDate <span class="operator">=</span> <span class="type">Date</span>.now</span><br><span class="line"><span class="keyword">let</span> components <span class="operator">=</span> <span class="type">Calendar</span>.current.dateComponents([.hour, .minute], from: someDate)</span><br><span class="line"><span class="keyword">let</span> hour <span class="operator">=</span> components.hour <span class="operator">??</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> minute <span class="operator">=</span> components.minute <span class="operator">??</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="Date的format"><a href="#Date的format" class="headerlink" title="Date的format"></a>Date的format</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7:02 PM</span></span><br><span class="line"><span class="type">Text</span>(<span class="type">Date</span>.now, format: .dateTime.hour().minute())</span><br><span class="line"><span class="comment">// May 16,2022</span></span><br><span class="line"><span class="type">Text</span>(<span class="type">Date</span>.now, format: .dateTime.day().month().year())</span><br></pre></td></tr></table></figure><h4 id="Date的formatted"><a href="#Date的formatted" class="headerlink" title="Date的formatted"></a>Date的formatted</h4><p>We can convert any date to a string by calling its toString() method.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// May 16,2022 7:06 PM</span></span><br><span class="line"><span class="type">Text</span>(<span class="type">Date</span>.now.formatted(date: .long, time: .shortened))</span><br><span class="line"><span class="comment">// 7:07 PM</span></span><br><span class="line"><span class="type">Text</span>(<span class="type">Date</span>.now.formatted(date: .omitted, time: .shortened))</span><br></pre></td></tr></table></figure><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h3 id="DispatchQueue"><a href="#DispatchQueue" class="headerlink" title="DispatchQueue"></a>DispatchQueue</h3><h4 id="DispatchQueue-main-主线程"><a href="#DispatchQueue-main-主线程" class="headerlink" title="DispatchQueue.main 主线程"></a>DispatchQueue.main 主线程</h4><p>IOS要求的所有界面要素(UI)需要在主线程上执行。</p><h4 id="DispatchQueue-global-非主线程"><a href="#DispatchQueue-global-非主线程" class="headerlink" title="DispatchQueue.global() 非主线程"></a>DispatchQueue.global() 非主线程</h4><p>联网请求、数据处理等,可以在该线程上进行。</p><p>DispatchQueue.global(qos: .background)是强大的后台线程,可快速完成任务,可堪比主线程的性能。<br>qos:low, normarl, high 等等,性能稍差些,但可承担额外的后台线程任务。</p><p>主线程和后台线程的联合使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DispatchQueue</span>.global(qos: .background).async &#123;</span><br><span class="line">    <span class="comment">// 下载数据所以放在后台线程上执行</span></span><br><span class="line">    <span class="keyword">let</span> newData <span class="operator">=</span> downloadData()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Check 1: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;check 1: <span class="subst">\(Thread.current)</span>&quot;</span>)      <span class="comment">// &lt;NSThread: 0xxxxxx&gt;&#123;number = 4, name = (null)&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">        <span class="comment">// 因为dataArray中的某个@Published变量是会让主界面的UI实时更新的,所以一定要放在主线程上执行</span></span><br><span class="line">        <span class="comment">// 不然会报警告:</span></span><br><span class="line">        <span class="comment">// Publishing changes from background threads is not allowed;</span></span><br><span class="line">        <span class="comment">// make sure to publish values from the main thread on model updates.</span></span><br><span class="line">        dataArray <span class="operator">=</span> newData</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Check 2: <span class="subst">\(Thread.isMainThread)</span>&quot;</span>) <span class="comment">// true</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;check 2: <span class="subst">\(Thread.current)</span>&quot;</span>)      <span class="comment">// &lt;NSThread: 0xxxxxx&gt;&#123;number = 1, name = main&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DispatchQueue-main-asyncAfter-deadline-lt-T-DispatchTime-gt-execute-lt-T-gt-Void-gt"><a href="#DispatchQueue-main-asyncAfter-deadline-lt-T-DispatchTime-gt-execute-lt-T-gt-Void-gt" class="headerlink" title="DispatchQueue.main.asyncAfter(deadline: &lt;#T##DispatchTime#&gt;, execute: &lt;#T##() -&gt; Void#&gt;)"></a>DispatchQueue.main.asyncAfter(deadline: &lt;#T##DispatchTime#&gt;, execute: &lt;#T##() -&gt; Void#&gt;)</h4><p>DispatchQueue.main.async 和 Dispatch.main.asyncAfter(.now(),{})都是异步的,而且两者没有区别。</p><h1 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/340281483">https://zhuanlan.zhihu.com/p/340281483</a></p></blockquote><p>Combine解决的核心问题，是如何处理时间序列数据，也就是如何处理随着时间变化而变化的数据。<br>Combine有三大核心概念: Publisher &#x2F; Operator &#x2F; Subscriber .</p><ul><li>Publisher  – 数据的提供者。</li><li>Subscriber – 数据的接收者。</li><li>Operator   – 中间处理器,起着上下联通Publisher和Subscriber的作用。</li></ul><p>这里有一个使用Combine取数据的相对比较好的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PostModel</span>: <span class="title class_">Identifiable</span>, <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userId, id: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> title, body: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownloadWithCombineViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> posts: [<span class="type">PostModel</span>] <span class="operator">=</span> []</span><br><span class="line">    <span class="keyword">var</span> cancellables <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        getPosts()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">getPosts</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. Create the publisher</span></span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTaskPublisher(for: url)</span><br><span class="line">            <span class="comment">// 2. Subscribe publisher on background thread</span></span><br><span class="line">            <span class="comment">//    省略也可以,因为数据处理都是放在background的</span></span><br><span class="line">            .subscribe(on: <span class="type">DispatchQueue</span>.global(qos: .background))</span><br><span class="line">            <span class="comment">// 3. Receive on main thread</span></span><br><span class="line">            <span class="comment">//    不能省略,因为更新UI上的数据必须要在main thread</span></span><br><span class="line">            .receive(on: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">            <span class="comment">// 4. tryMap (check that the data is good)</span></span><br><span class="line">            .tryMap(handleOutput)</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            .tryMap &#123; (data, response) -&gt; Data in</span></span><br><span class="line"><span class="comment">                guard</span></span><br><span class="line"><span class="comment">                    let response = response as? HTTPURLResponse,</span></span><br><span class="line"><span class="comment">                    response.statusCode &gt;= 200 &amp;&amp; response.statusCode &lt; 300</span></span><br><span class="line"><span class="comment">                else &#123;</span></span><br><span class="line"><span class="comment">                    throw URLError(.badServerResponse)</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                return data</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">// 5. Decode (Decode data into PostModel)</span></span><br><span class="line">            .decode(type: [<span class="type">PostModel</span>].<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">            <span class="comment">// 6. Sink (Put the item into our app)</span></span><br><span class="line">            .sink &#123; (completion) <span class="keyword">in</span></span><br><span class="line">                <span class="comment">// 可省略</span></span><br><span class="line">                <span class="comment">// print(&quot;Completion: \(completion)&quot;)</span></span><br><span class="line">                <span class="comment">// 更细致的话:</span></span><br><span class="line">                <span class="keyword">switch</span> completion &#123;</span><br><span class="line">                <span class="keyword">case</span> .finished:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Error downloading data. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; receiveValue: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (returnedPosts) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.posts <span class="operator">=</span> returnedPosts</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 7. Store (Cancel subscription if needed)</span></span><br><span class="line">            .store(in: <span class="operator">&amp;</span>cancellables)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">handleOutput</span>(<span class="params">outPut</span>: <span class="type">URLSession</span>.<span class="type">DataTaskPublisher</span>.<span class="type">Output</span>) <span class="keyword">throws</span> -&gt; <span class="type">Data</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> response <span class="operator">=</span> outPut.response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>,</span><br><span class="line">            response.statusCode <span class="operator">&gt;=</span> <span class="number">200</span> <span class="operator">&amp;&amp;</span> response.statusCode <span class="operator">&lt;</span> <span class="number">300</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">URLError</span>(.badServerResponse)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outPut.data</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DownloadWithCombine</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">DownloadWithCombineViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">ForEach</span>(vm.posts) &#123; post <span class="keyword">in</span></span><br><span class="line">                <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">                    <span class="type">Text</span>(post.title)</span><br><span class="line">                        .font(.headline)</span><br><span class="line">                    <span class="type">Text</span>(post.body)</span><br><span class="line">                        .foregroundColor(.gray)</span><br><span class="line">                &#125;</span><br><span class="line">                .frame(maxWidth: .infinity, alignment: .leading)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PassThroughSubject的使用"><a href="#PassThroughSubject的使用" class="headerlink" title="PassThroughSubject的使用"></a>PassThroughSubject的使用</h3><p>PassThroughSubject实质上是把一个数据变为Publisher。<br>看下面的代码例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JustViewObservableObject</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cancellable: <span class="type">AnyCancellable</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Student</span>: <span class="title class_">Decodable</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> json <span class="operator">=</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [&#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;小明&quot;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;小红&quot;,</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &quot;name&quot;: &quot;李雷&quot;</span></span><br><span class="line"><span class="string">    &#125;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PassThroughSubject接受两个参数，一个输出数据和一个Error</span></span><br><span class="line">        <span class="comment">// 这里输出数据暂且设为String,Error设为Never</span></span><br><span class="line">        <span class="keyword">let</span> publisher <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line">        cancellable <span class="operator">=</span> publisher</span><br><span class="line">            <span class="comment">// flatMap闭包要求的返回值必须是一个publisher,所以闭包内使用Just比较合适</span></span><br><span class="line">            <span class="comment">// 后续处理中把json字符串映射成模型数组</span></span><br><span class="line">            .flatMap &#123;</span><br><span class="line">                value <span class="keyword">in</span></span><br><span class="line">                <span class="type">Just</span>(value.data(using: .utf8)<span class="operator">!</span>)</span><br><span class="line">                    .decode(type: [<span class="type">Student</span>].<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">                    <span class="comment">// 如果上述json字符串中不是一个[Student]列表的字符串,</span></span><br><span class="line">                    <span class="comment">// 比如字符串中一部分是... &quot;name&quot; &quot;Vito&quot;  &lt;-- 少了一个冒号(:)</span></span><br><span class="line">                    <span class="comment">// 就会被catch到,并生成器一个[Student(name:&quot;NoName&quot;)]的列表</span></span><br><span class="line">                    .catch &#123;</span><br><span class="line">                        <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Just</span>([<span class="type">Student</span>(name:<span class="string">&quot;NoName&quot;</span>)])</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .sink(receiveCompletion: &#123;</span><br><span class="line">                <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;It is over.&quot;</span>)</span><br><span class="line">            &#125;, receiveValue: &#123;</span><br><span class="line">                someValue <span class="keyword">in</span></span><br><span class="line">                <span class="built_in">print</span>(someValue)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PassThroughSubject的send常用函数</span></span><br><span class="line">        <span class="comment">// send（input:String）函数向该subject发送新值</span></span><br><span class="line">        <span class="comment">// send(completion:.finished)发送完成</span></span><br><span class="line">        <span class="comment">// send(completion: someError)发送error</span></span><br><span class="line">        publisher.send(json)</span><br><span class="line">        publisher.send(completion: .finished)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="type">JustViewObservableObject</span>()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[__lldb_expr_31.JustViewObservableObject.Student(name: &quot;小明&quot;), </span></span><br><span class="line"><span class="comment"> __lldb_expr_31.JustViewObservableObject.Student(name: &quot;小红&quot;), </span></span><br><span class="line"><span class="comment"> __lldb_expr_31.JustViewObservableObject.Student(name: &quot;李雷&quot;)]</span></span><br><span class="line"><span class="comment"> It is over.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>为了管理外部数据，SwiftUI具有一个ObservableObject协议。<br>这要求我们声明一个名为objectWillChange的变量，该变量需要一个Publisher；<br>通常，我们可以使用PassThroughSubject。<br>这就是遵守ObservableObject协议所需的全部。<br>然后，当值更改时，我们需要在发布服务器上使用send方法发送消息。</p><h3 id="使用Combine链式调用多个数据的方式"><a href="#使用Combine链式调用多个数据的方式" class="headerlink" title="使用Combine链式调用多个数据的方式"></a>使用Combine链式调用多个数据的方式</h3><blockquote><p><a href="https://www.bilibili.com/video/BV1hY411W7TZ?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1hY411W7TZ?spm_id_from=333.337.search-card.all.click</a></p></blockquote><p>目标:<br>从<a href="https://jsonplaceholder.typicode.com/posts%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%88%B0https://jsonplaceholder.typicode.com/posts/1%E7%9A%84%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE">https://jsonplaceholder.typicode.com/posts中获取到https://jsonplaceholder.typicode.com/posts/1的用户数据</a>,<br>并根据该用户id,获取到<a href="https://jsonplaceholder.typicode.com/users/">https://jsonplaceholder.typicode.com/users/</a> + 这个id的用户具体数据</p><p>建立一个CombineChaining.swift来创建一个model:(CombineChaining.swift)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户Model</span></span><br><span class="line"><span class="comment">// 这里暂且只有id这一个元素</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UserModel</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PostModel</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立网络服务的类,来处理网络服务的请求:(NetworkService.swift)<br>因为我们要使用链式网络请求,而Combine是处于一个管道中,正好合适。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"><span class="keyword">import</span> Metal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一下网络服务中的错误,为了在View中进行显示:</span></span><br><span class="line"><span class="comment">// 符合Error协议</span></span><br><span class="line"><span class="comment">// 符合CustomStringConvertible协议,可以用字符串进行描述</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">NetworkError</span>: <span class="title class_">Error</span>, <span class="title class_">CustomStringConvertible</span> &#123;</span><br><span class="line">    <span class="comment">// URL错误</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">URLError</span></span><br><span class="line">    <span class="comment">// 解码错误</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">DecodeError</span></span><br><span class="line">    <span class="comment">// 响应错误,而且要将详细的错误类型返回回来</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ResponseError</span>(error: <span class="type">Error</span>)</span><br><span class="line">    <span class="comment">// 一个未知的错误</span></span><br><span class="line">    <span class="keyword">case</span> unknownError</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 符合CustomStringConvertible必须要实现一个description计算变量</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">URLError</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;URL Error!&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="type">DecodeError</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Decode Error!&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="type">ResponseError</span>(<span class="keyword">let</span> error):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Network Error: <span class="subst">\(error.localizedDescription)</span>&quot;</span></span><br><span class="line">        <span class="keyword">case</span> .unknownError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown Error!&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkService</span> &#123;</span><br><span class="line">    <span class="comment">// 生成一个singleton单例模式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">NetworkService</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户信息的网络请求</span></span><br><span class="line">    <span class="comment">// 希望返回一个Publisher且是一个UserModel的数据</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchUser</span>(<span class="params">index</span>: <span class="type">String</span>) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UserModel</span>, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://jsonplaceholder.typicode.com/users/&quot;</span> <span class="operator">+</span> index)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> url <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 光下面的代码会报错,因为希望返回的是AnyPublisher&lt;UserModel, Error&gt;</span></span><br><span class="line">            <span class="comment">// return Fail(error: NetworkError.URLError)</span></span><br><span class="line">            <span class="comment">// 所以要使用.eraseToAnyPublisher()把无用的参数去掉</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Fail</span>(error: <span class="type">NetworkError</span>.<span class="type">URLError</span>).eraseToAnyPublisher()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: url)</span><br><span class="line">            <span class="comment">// .tryMap会测试数据是否合法,若非法,会主动抛出错误</span></span><br><span class="line">            <span class="comment">// .tryMap &#123; (data: Data, response: URLResponse) in  Code &#125;</span></span><br><span class="line">            .tryMap &#123; element -&gt; <span class="type">Data</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span></span><br><span class="line">                    <span class="keyword">let</span> httpResponse <span class="operator">=</span> element.response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>,</span><br><span class="line">                    httpResponse.statusCode <span class="operator">&gt;=</span> <span class="number">200</span> <span class="operator">&amp;&amp;</span> httpResponse.statusCode <span class="operator">&lt;</span> <span class="number">300</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="type">URLError</span>(.badServerResponse)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> element.data</span><br><span class="line">            &#125;</span><br><span class="line">            .decode(type: <span class="type">UserModel</span>.<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">            <span class="comment">// .mapError会把标准错误转换成我们自己定义的错误</span></span><br><span class="line">            .mapError &#123; error -&gt; <span class="type">NetworkError</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> error &#123;</span><br><span class="line">                <span class="comment">// 用类型检查操作符（is）来检查一个实例是否属于特定子类型</span></span><br><span class="line">                <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">URLError</span>:</span><br><span class="line">                    <span class="keyword">return</span> .<span class="type">ResponseError</span>(error: error)</span><br><span class="line">                <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">DecodingError</span>:</span><br><span class="line">                    <span class="keyword">return</span> .<span class="type">DecodeError</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">// 如果不符合NetworkError设置的其他error类型,</span></span><br><span class="line">                    <span class="comment">// 就套用NetworkError的.unknownError</span></span><br><span class="line">                    <span class="keyword">return</span> error <span class="keyword">as?</span> <span class="type">NetworkError</span> <span class="operator">??</span> .unknownError</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户详情的网络请求</span></span><br><span class="line">    <span class="comment">// fetchPost与fetchUser类似,可以精简</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchPost</span>(<span class="params">index</span>: <span class="type">String</span>) -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">PostModel</span>, <span class="type">Error</span>&gt; &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span> <span class="operator">+</span> index)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> url <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Fail</span>(error: <span class="type">NetworkError</span>.<span class="type">URLError</span>).eraseToAnyPublisher()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">URLSession</span>.shared.dataTaskPublisher(for: url)</span><br><span class="line">            .tryMap &#123; element -&gt; <span class="type">Data</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span></span><br><span class="line">                    <span class="keyword">let</span> httpResponse <span class="operator">=</span> element.response <span class="keyword">as?</span> <span class="type">HTTPURLResponse</span>,</span><br><span class="line">                    httpResponse.statusCode <span class="operator">&gt;=</span> <span class="number">200</span> <span class="operator">&amp;&amp;</span> httpResponse.statusCode <span class="operator">&lt;</span> <span class="number">300</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="type">URLError</span>(.badServerResponse)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> element.data</span><br><span class="line">            &#125;</span><br><span class="line">            .decode(type: <span class="type">PostModel</span>.<span class="keyword">self</span>, decoder: <span class="type">JSONDecoder</span>())</span><br><span class="line">            .mapError &#123; error -&gt; <span class="type">NetworkError</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">switch</span> error &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">URLError</span>:</span><br><span class="line">                    <span class="keyword">return</span> .<span class="type">ResponseError</span>(error: error)</span><br><span class="line">                <span class="keyword">case</span> <span class="keyword">is</span> <span class="type">DecodingError</span>:</span><br><span class="line">                    <span class="keyword">return</span> .<span class="type">DecodeError</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> error <span class="keyword">as?</span> <span class="type">NetworkError</span> <span class="operator">??</span> .unknownError</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            .eraseToAnyPublisher()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一个View:(CombineChainingView.swift)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CombineChainingView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> index: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">ViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处显示错误信息</span></span><br><span class="line">            <span class="type">Text</span>(vm.errorMessage).bold()</span><br><span class="line">            </span><br><span class="line">            <span class="type">HStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Input index here&quot;</span>, text: <span class="variable">$index</span>)</span><br><span class="line">                    .frame(width: <span class="number">130</span>)</span><br><span class="line">                    .padding()</span><br><span class="line">                    .background(<span class="type">Color</span>.gray.opacity(<span class="number">0.2</span>))</span><br><span class="line">                </span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    <span class="comment">// 因为getUserSubject是一个Combine的PassThroughSubject方法,</span></span><br><span class="line">                    <span class="comment">// 所以可以直接通过send()方法直接传值过去</span></span><br><span class="line">                    vm.getUserSubject.send(index)</span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Get User and Post&quot;</span>)</span><br><span class="line">                        .padding()</span><br><span class="line">                &#125;</span><br><span class="line">                .background(<span class="type">Color</span>.blue)</span><br><span class="line">                .foregroundColor(.white)</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                .padding()</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 此处显示用户的body信息</span></span><br><span class="line">            <span class="type">Text</span>(vm.message).bold()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">CombineChainingView</span> &#123;</span><br><span class="line">    <span class="comment">// 因为本案例相对比较简单,所以直接用extension了,</span></span><br><span class="line">    <span class="comment">// 一般都会再建议个ModelView的文件</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">        <span class="meta">@Published</span> <span class="keyword">var</span> message: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="meta">@Published</span> <span class="keyword">var</span> errorMessage: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义一个,作为使用Combine的内存管理</span></span><br><span class="line">        <span class="keyword">var</span> cancellables <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 需要启动Combine的Publisher,</span></span><br><span class="line">        <span class="comment">// 所以使用到了PassthroughSubject</span></span><br><span class="line">        <span class="comment">// 传递一个index的String类型,而且因为定义过所有error,所以是永远不会出错的</span></span><br><span class="line">        <span class="keyword">var</span> getUserSubject <span class="operator">=</span> <span class="type">PassthroughSubject</span>&lt;<span class="type">String</span>, <span class="type">Never</span>&gt;()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>() &#123;</span><br><span class="line">            <span class="comment">// 启动Combine流程</span></span><br><span class="line">            getUserSubject</span><br><span class="line">                <span class="comment">// 因为getUserSubject是PassthroughSubject&lt;String, Never&gt;的Publisher类型,</span></span><br><span class="line">                <span class="comment">// 而我们定义的NetworkService的fetchUser定义的返回值是</span></span><br><span class="line">                <span class="comment">// AnyPublisher&lt;UserModel, Error&gt;,</span></span><br><span class="line">                <span class="comment">// 所以需要使用到.flatMap操作符去转换</span></span><br><span class="line">                <span class="comment">// 但下面的.flatMap&#123;&#125;无法阻止用户多次点击多次发送的情况</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                .flatMap&#123; index -&gt; AnyPublisher&lt;UserModel, Error&gt; in</span></span><br><span class="line"><span class="comment">                    print(&quot;Begin to fetch user.&quot;)</span></span><br><span class="line"><span class="comment">                    return NetworkService.shared.fetchUser(index: index)</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">// 所以需要使用到Combine的.map和.switchToLatest</span></span><br><span class="line">                <span class="comment">// 你多次点击后,虽然会一直打印&quot;Begin to fetch user.&quot;,</span></span><br><span class="line">                <span class="comment">// 但其实只取最后一次.</span></span><br><span class="line">                .map &#123; index -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UserModel</span>, <span class="type">Error</span>&gt; <span class="keyword">in</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Begin to fetch user.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">NetworkService</span>.shared.fetchUser(index: index)</span><br><span class="line">                &#125;</span><br><span class="line">                .switchToLatest()</span><br><span class="line">                <span class="comment">// 判断上述流程中是否会有错误</span></span><br><span class="line">                <span class="comment">// 返回的也应该是getUserSubject定义中需要返回的类型</span></span><br><span class="line">                <span class="comment">// 一旦捕获到错误就不会进入再下面的流程</span></span><br><span class="line">                .catch &#123; error -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">UserModel</span>, <span class="type">Error</span>&gt; <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Fail</span>(error: error).eraseToAnyPublisher()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 下面再往下走,进行第二次请求</span></span><br><span class="line">                <span class="comment">// 此时传递到的是NetworkService.shared.fetchUser定义的</span></span><br><span class="line">                <span class="comment">// AnyPublisher&lt;UserModel, Error&gt;</span></span><br><span class="line">                <span class="comment">// 而且处理后得是fetchPost定义的返回值</span></span><br><span class="line">                <span class="comment">// AnyPublisher&lt;PostModel, Error&gt;</span></span><br><span class="line">                .flatMap &#123; userModel -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">PostModel</span>, <span class="type">Error</span>&gt; <span class="keyword">in</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Begin to fetch post.&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="type">NetworkService</span>.shared.fetchPost(index: <span class="type">String</span>(userModel.id))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 再进行一次错误处理</span></span><br><span class="line">                .catch &#123; error -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">PostModel</span>, <span class="type">Error</span>&gt; <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Fail</span>(error: error).eraseToAnyPublisher()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 因为要进入到显示环节,所以要转到main thread上来</span></span><br><span class="line">                .receive(on: <span class="type">RunLoop</span>.main)</span><br><span class="line">                <span class="comment">// 一旦进入到.sink流程,Combine的链路就结束了</span></span><br><span class="line">                .sink &#123; completion <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">switch</span> completion &#123;</span><br><span class="line">                    <span class="comment">// 先处理可能会出现的错误</span></span><br><span class="line">                    <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                        <span class="comment">// 下面是很不合理的,只是因为例子相对简单</span></span><br><span class="line">                        <span class="keyword">self</span>.errorMessage <span class="operator">=</span> (error <span class="keyword">as!</span> <span class="type">NetworkError</span>).description</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="comment">// 不出错的情况下,打印下completion</span></span><br><span class="line">                        <span class="built_in">print</span>(completion)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; receiveValue: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] postModel <span class="keyword">in</span></span><br><span class="line">                    <span class="keyword">self</span><span class="operator">?</span>.message <span class="operator">=</span> postModel.body</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 最后要用.store来管理下内存</span></span><br><span class="line">                .store(in: <span class="operator">&amp;</span>cancellables)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Combine的future-x2F-promise等特性同时取得两个来源的数据"><a href="#使用Combine的future-x2F-promise等特性同时取得两个来源的数据" class="headerlink" title="使用Combine的future&#x2F;promise等特性同时取得两个来源的数据"></a>使用Combine的future&#x2F;promise等特性同时取得两个来源的数据</h3><p>具体看视频:(SwiftUI+Combine实现Dota Demo之三：用Zip合并两个Publisher)</p><blockquote><p><a href="https://www.bilibili.com/video/BV1Mb4y117vF?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Mb4y117vF?spm_id_from=333.999.0.0</a></p></blockquote><p>这里代码先不写了,以后有需要的时候再写下来。</p><h3 id="使用Combine链式传值的一般使用"><a href="#使用Combine链式传值的一般使用" class="headerlink" title="使用Combine链式传值的一般使用"></a>使用Combine链式传值的一般使用</h3><p>视频出处:</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=27&spm_id_from=pageDriver">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=27&amp;spm_id_from=pageDriver</a></p></blockquote><p>利用Combine的Publisher和Subscriber来进行页面传值等,感觉是趋势,写多了感觉挺方便。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubscriberViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> count: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> cancellables <span class="operator">=</span> <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt;()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> textFieldText: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// textIsValid的值由textFieldText.count来决定,</span></span><br><span class="line">    <span class="comment">// 后续addTextFieldSubscriber()中会具体实现</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> textIsValid: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> showButton: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        setUpTimer()</span><br><span class="line">        addTextFieldSubscriber()</span><br><span class="line">        addButtonSubscriber()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addTextFieldSubscriber</span>() &#123;</span><br><span class="line">        <span class="comment">// 从属性包装器投影值（$变量名）</span></span><br><span class="line">        <span class="comment">// 该变量也能作为一个publisher向下链式传递</span></span><br><span class="line">        <span class="variable">$textFieldText</span></span><br><span class="line">            <span class="comment">// .debounce的作用是至少在一定时间后才继续执行下去</span></span><br><span class="line">            .debounce(for: <span class="number">0.5</span>, scheduler: <span class="type">DispatchQueue</span>.main)</span><br><span class="line">            .map &#123; (text) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> text.count <span class="operator">&gt;</span> <span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// .assign 是赋值</span></span><br><span class="line">            <span class="comment">// 但不推荐,因为主要原因是on: .self是强引用,故不推荐</span></span><br><span class="line">            <span class="comment">// .assign(to: \.textIsValid, on: self)</span></span><br><span class="line">            <span class="comment">// 所以可以使用.sink</span></span><br><span class="line">            .sink(receiveValue: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (isValid) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.textIsValid <span class="operator">=</span> isValid</span><br><span class="line">            &#125;)</span><br><span class="line">            .store(in: <span class="operator">&amp;</span>cancellables)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">setUpTimer</span>() &#123;</span><br><span class="line">        <span class="type">Timer</span></span><br><span class="line">            .publish(every: <span class="number">1</span>, on: .main, in: .common)</span><br><span class="line">            .autoconnect()</span><br><span class="line">            <span class="comment">// .sink没有设置Completion是因为不会出错,所以不用判断成功与否</span></span><br><span class="line">            .sink &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                <span class="keyword">self</span>.count <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            .store(in: <span class="operator">&amp;</span>cancellables)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addButtonSubscriber</span>() &#123;</span><br><span class="line">        <span class="variable">$textIsValid</span></span><br><span class="line">            <span class="comment">// .combineLatest 可以再绑定一个变量并向下传</span></span><br><span class="line">            .combineLatest(<span class="variable">$count</span>)</span><br><span class="line">            .sink &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (isValid, count) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                <span class="keyword">if</span> isValid <span class="operator">&amp;&amp;</span> count <span class="operator">&gt;</span> <span class="number">3</span> &#123;</span><br><span class="line">                    <span class="keyword">self</span>.showButton <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">self</span>.showButton <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .store(in: <span class="operator">&amp;</span>cancellables)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SubscriberBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">SubscriberViewModel</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(vm.count)</span>&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">            </span><br><span class="line">            <span class="type">TextField</span>(<span class="string">&quot;Please input here ...&quot;</span>, text: <span class="variable">$vm</span>.textFieldText)</span><br><span class="line">                .frame(height: <span class="number">55</span>)</span><br><span class="line">                .font(.headline)</span><br><span class="line">                .padding(.leading)</span><br><span class="line">                .background(<span class="type">Color</span>.gray.opacity(<span class="number">0.2</span>))</span><br><span class="line">                .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                .overlay(alignment: .trailing) &#123;</span><br><span class="line">                   <span class="type">ZStack</span> &#123;</span><br><span class="line">                       <span class="type">Image</span>(systemName: <span class="string">&quot;xmark&quot;</span>)</span><br><span class="line">                           .foregroundColor(.red)</span><br><span class="line">                           .opacity(vm.textIsValid <span class="operator">?</span> <span class="number">0.0</span> : <span class="number">1.0</span>)</span><br><span class="line">                       <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark&quot;</span>)</span><br><span class="line">                           .foregroundColor(.green)</span><br><span class="line">                           .opacity(vm.textIsValid <span class="operator">?</span> <span class="number">1.0</span> : <span class="number">0.0</span>)</span><br><span class="line">                   &#125;</span><br><span class="line">                   .padding(.trailing)</span><br><span class="line">                &#125;</span><br><span class="line">                                    </span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Submit&quot;</span>.uppercased())</span><br><span class="line">                    .font(.headline)</span><br><span class="line">                    .foregroundColor(.white)</span><br><span class="line">                    .frame(height: <span class="number">55</span>)</span><br><span class="line">                    .frame(maxWidth: .infinity)</span><br><span class="line">                    .background(<span class="type">Color</span>.blue)</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .opacity(vm.showButton <span class="operator">?</span> <span class="number">1.0</span> : <span class="number">0.5</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .disabled(<span class="operator">!</span>vm.showButton)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="键路径表达式（Key-Path-expression）"><a href="#键路径表达式（Key-Path-expression）" class="headerlink" title="键路径表达式（Key-Path expression）"></a>键路径表达式（Key-Path expression）</h2><p>即我们惯常会用到的 \.</p><p>Key-Path表达式用来引用一个类型的属性或者下标。<br>基本的形式: \typeName.path<br>如果根据上下文通过类型推断可以确定隐式的类型,表达式的typeName可以省略。</p><p>The type name –<br>is the name of a concrete type, including any generic parameters, such as String, [Int], or Set<Int>.</p><p>The path –<br>consists of property names, subscripts, optional-chaining expressions, and forced unwrapping expressions. Each of these key-path components can be repeated as many times as needed, in any order.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SomeStructure</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> someValue: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s <span class="operator">=</span> <span class="type">SomeStructure</span>(someValue: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> pathToProperty <span class="operator">=</span> \<span class="type">SomeStructure</span>.someValue</span><br><span class="line"><span class="keyword">let</span> value <span class="operator">=</span> s[keyPath: pathToProperty] <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含下标(Subscripts)的Key-Path</span></span><br><span class="line"><span class="keyword">let</span> greetings <span class="operator">=</span> [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hi&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> myGreeting <span class="operator">=</span> \[<span class="type">String</span>].[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(greetings[keyPath: myGreeting]) <span class="comment">// hi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含可选链和强制解包的Key-Path</span></span><br><span class="line"><span class="keyword">let</span> greetings2 <span class="operator">=</span> [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hola&quot;</span>, <span class="string">&quot;bonjour&quot;</span>, <span class="string">&quot;안녕&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(greetings2.first<span class="operator">?</span>.count <span class="keyword">as</span> <span class="keyword">Any</span>) <span class="comment">// Optional(5)</span></span><br><span class="line"><span class="keyword">let</span> count <span class="operator">=</span> greetings2[keyPath: \[<span class="type">String</span>].first<span class="operator">?</span>.count]</span><br><span class="line"><span class="built_in">print</span>(count <span class="keyword">as</span> <span class="keyword">Any</span>) <span class="comment">// Optional(5)</span></span><br><span class="line"><span class="comment">// greetings2[keyPath: \[String].first?] 结果就是&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用self指向实例</span></span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> (a:<span class="number">1</span>, b:<span class="number">2</span>)</span><br><span class="line">a[keyPath: \.<span class="keyword">self</span>] <span class="operator">=</span> (a:<span class="number">10</span>, b:<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">// (a:10, b:20)</span></span><br></pre></td></tr></table></figure><h2 id="传递引用-inout-amp"><a href="#传递引用-inout-amp" class="headerlink" title="传递引用 inout &amp;"></a>传递引用 inout &amp;</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variable: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">changeNumber</span>(<span class="params">num</span>:<span class="keyword">inout</span> <span class="type">Int</span>) &#123;</span><br><span class="line">    num <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num:<span class="subst">\(num)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeNumber(num: <span class="operator">&amp;</span>variable)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;variable:<span class="subst">\(variable)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">num:4</span></span><br><span class="line"><span class="comment">variable:4</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&amp;的使用确实将实参的内存地址传入函数（实参进行引用传递），<br>但changeNumber内部并未操作指针，<br>而是采取了Copy In Copy Out的做法：</p><ol><li>调用该函数时，先复制实参的值，产生副本【get】</li><li>将副本的内存地址传入函数（副本进行引用传递），在函数内部可以修改副本的值</li><li>函数返回后，再将副本的值覆盖实参的值【set】</li></ol><h3 id="State-Binding"><a href="#State-Binding" class="headerlink" title="@State $ @Binding"></a>@State $ @Binding</h3><p>@State是一个属性包装器(property wrapper),被设计用来针对值类型进行状态管理,用于在Struct中mutable值类型.<br>@Binding的作用是在保存状态的属性和更改数据的视图之间创建双向连接，将当前属性连接到存储在别处的单一数据源（single source of truth），而不是直接存储数据。将存储在别处的值语意的属性转换为引用语义，在使用时需要在变量名加$符号。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Model</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Product</span>:<span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> isFavorited:<span class="type">Bool</span></span><br><span class="line">    <span class="keyword">var</span> title:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SubView</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilterView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span>  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Toggle</span>(isOn: <span class="variable">$showFavorited</span>) &#123;  <span class="comment">//4</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Change filter&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ParentView</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ProductsView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> products: [<span class="type">Product</span>] <span class="operator">=</span> [</span><br><span class="line">    <span class="type">Product</span>(isFavorited: <span class="literal">true</span>, title: <span class="string">&quot;ggggg&quot;</span>,id: <span class="string">&quot;1&quot;</span>),</span><br><span class="line">    <span class="type">Product</span>(isFavorited: <span class="literal">false</span>, title: <span class="string">&quot;3333&quot;</span>,id: <span class="string">&quot;2&quot;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showFavorited: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>   <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">FilterView</span>(showFavorited: <span class="variable">$showFavorited</span>)  <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(products) &#123; product <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="operator">!</span><span class="keyword">self</span>.showFavorited <span class="operator">||</span> product.isFavorited &#123;</span><br><span class="line">                    <span class="type">Text</span>(product.title)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对于 @State 修饰的属性的访问，只能发生在 body 或者 body 所调用的方法中。你不能在外部改变 @State 的值，只能@State初始化时，设置初始化值，它的所有相关操作和状态改变都应该是和当前 View 生命周期保持一致。(至于对@State值使用init()初始化的问题,见 “如何使用init()初始化@State” )</li><li>在引用包装为@State的属性时，如果是读写都有，引用属性需要$开头，如果只读直接使用变量名即可</li><li>State针对具体View的内部变量进行管理，不应该从外部被允许访问，所以应该标记为private</li></ul><h4 id="如何使用init-初始化-State"><a href="#如何使用init-初始化-State" class="headerlink" title="如何使用init()初始化@State"></a>如何使用init()初始化@State</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> string: <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">init</span>(<span class="params">string</span>: <span class="type">String</span>) &#123;</span><br><span class="line">   <span class="keyword">self</span>.string <span class="operator">=</span> string <span class="comment">// 会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_string <span class="operator">=</span> <span class="type">State</span>(initialValue: string)</span><br></pre></td></tr></table></figure><h4 id="onChange-监视-State属性值的变化-而非通过设置-State属性的didSet方法！"><a href="#onChange-监视-State属性值的变化-而非通过设置-State属性的didSet方法！" class="headerlink" title=".onChange()监视@State属性值的变化,而非通过设置@State属性的didSet方法！"></a>.onChange()监视@State属性值的变化,而非通过设置@State属性的didSet方法！</h4><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> blurAmount <span class="operator">=</span> <span class="number">0.0</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New value is <span class="subst">\(blurAmount)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .blur(radius: blurAmount)</span><br><span class="line"></span><br><span class="line">            <span class="type">Slider</span>(value: <span class="variable">$blurAmount</span>, in: <span class="number">0</span><span class="operator">...</span><span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Random Blur&quot;</span>) &#123;</span><br><span class="line">                blurAmount <span class="operator">=</span> <span class="type">Double</span>.random(in: <span class="number">0</span><span class="operator">...</span><span class="number">20</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码,按下Button时,会打印blurAmount的值;而拉动Slider条的情况下,是不会打印blurAmount的值的。</p><p>如何解决: – 使用.onChange()</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> blurAmount <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .blur(radius: blurAmount)</span><br><span class="line"></span><br><span class="line">            <span class="type">Slider</span>(value: <span class="variable">$blurAmount</span>, in: <span class="number">0</span><span class="operator">...</span><span class="number">20</span>)</span><br><span class="line">                .onChange(of: blurAmount) &#123; newValue <span class="keyword">in</span></span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;New value is <span class="subst">\(newValue)</span>&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以,不添加@State属性的didSet功能,而是使用.onChange来监视blurAmount的值的变化。</p><p>具体原因:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/responding-to-state-changes-using-onchange">https://www.hackingwithswift.com/books/ios-swiftui/responding-to-state-changes-using-onchange</a></p></blockquote><h3 id="改变icon的默认颜色"><a href="#改变icon的默认颜色" class="headerlink" title="改变icon的默认颜色"></a>改变icon的默认颜色</h3><p>如果是一个google的图标,默人颜色是黑色的,用Image引用后,想让它的颜色变成是绿色,可以这样做：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;google&quot;</span>)</span><br><span class="line">    .renderingMode(.template)</span><br><span class="line">    .resizable()</span><br><span class="line">    <span class="comment">//.aspectRatio(contentMode:.fit)</span></span><br><span class="line">    .scaleToFit()</span><br><span class="line">    .frame(width:<span class="number">200</span>,height:<span class="number">200</span>)</span><br><span class="line">    <span class="comment">//.clipped()</span></span><br><span class="line">    .foregroundColor(.green)</span><br></pre></td></tr></table></figure><p>切记: 需要使用.renderingMode(.template),这样才能改变前景色.</p><p>若不想每次都使用.renderingMode(.template),怎么办？<br>可以在Assets.xcassets中找到图片,打开右上角的Inspectors,Image Set中,Render As选项默认是Default,选择为Template Image即可。</p><h3 id="GridItem-x2F-LazyVGrid-x2F-LazyHGrid-x2F-Section-实现excel的行和列"><a href="#GridItem-x2F-LazyVGrid-x2F-LazyHGrid-x2F-Section-实现excel的行和列" class="headerlink" title="GridItem &#x2F; LazyVGrid &#x2F; LazyHGrid &#x2F; Section 实现excel的行和列"></a>GridItem &#x2F; LazyVGrid &#x2F; LazyHGrid &#x2F; Section 实现excel的行和列</h3><p>适用于批量显示照片等,<br>或者说,<br>就是说可以像 excel 一样显示columns&#x2F;rows一样类似表格的东西：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">GridBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量columns中的 所有元素 表示每一行(row)中的所有列(column)的属性！</span></span><br><span class="line">    <span class="comment">// 下面说明有五列,各个列的size有大有小</span></span><br><span class="line">    <span class="keyword">let</span> columns: [<span class="type">GridItem</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="type">GridItem</span>(.fixed(<span class="number">50</span>), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.fixed(<span class="number">50</span>), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.fixed(<span class="number">100</span>), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.fixed(<span class="number">75</span>), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.fixed(<span class="number">50</span>), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// 上面的.fixed()可以换成.flexible() / .adaptive()来灵活使用列的宽度</span></span><br><span class="line">    <span class="comment">// 但是使用.adaptive()的情况下,不一定表示一行只有两列,比如下面的:</span></span><br><span class="line">    <span class="comment">// let columns: [GridItem] = [</span></span><br><span class="line">    <span class="comment">//     GridItem(.adaptive(minimum: 50, maximum: 300), spacing: nil, alignment: nil),</span></span><br><span class="line">    <span class="comment">//     GridItem(.adaptive(minimum: 150, maximum: 300), spacing: nil, alignment: nil)</span></span><br><span class="line">    <span class="comment">// ]</span></span><br><span class="line">    <span class="comment">// 就会变成一行有四列,它是智能选择排列的.</span></span><br><span class="line">    <span class="comment">// 我感觉就是,只要有这两个GridItem能尽量多的满足到,在实在无法满足其一的情况下,给我尽量满足其二吧.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="comment">// 这里是</span></span><br><span class="line">        <span class="comment">// LazyVGrid(columns:content:)</span></span><br><span class="line">        <span class="comment">// 的使用:</span></span><br><span class="line">        <span class="type">LazyVGrid</span>(columns: columns) &#123;</span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">50</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                <span class="type">Rectangle</span>()</span><br><span class="line">                    .frame(height:<span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/grid_01.png" alt="&quot;grid_01&quot;"></p><p>另一种使用方式,更复杂一些,但用处挺大:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">GridBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> columns: [<span class="type">GridItem</span>] <span class="operator">=</span> [</span><br><span class="line">        <span class="type">GridItem</span>(.flexible(), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.flexible(), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>),</span><br><span class="line">        <span class="type">GridItem</span>(.flexible(), spacing: <span class="literal">nil</span>, alignment: <span class="literal">nil</span>)</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里可以作为标题内容啥的</span></span><br><span class="line">            <span class="type">Rectangle</span>()</span><br><span class="line">                .fill(<span class="type">Color</span>.orange)</span><br><span class="line">                .frame(height: <span class="number">200</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 这里是</span></span><br><span class="line">            <span class="comment">// LazyVGrid(columns:alignment:spacing:pinnedViews:content:)</span></span><br><span class="line">            <span class="comment">// 的使用:</span></span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="comment">// 这里的spacing是每行之间的间距,不是每列的间距</span></span><br><span class="line">            <span class="comment">// pinnedViews是个列表,里面可以放.sectionHeaders/.sectionFs,当上拉到顶时会固定置顶</span></span><br><span class="line">            <span class="type">LazyVGrid</span>(columns: columns,</span><br><span class="line">                      alignment: .center,</span><br><span class="line">                      spacing: <span class="literal">nil</span>,</span><br><span class="line">                      pinnedViews: [.sectionHeaders]) &#123;</span><br><span class="line">                <span class="type">Section</span>(header:</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;Section 1&quot;</span>)</span><br><span class="line">                            .frame(maxWidth: .infinity, alignment: .leading)</span><br><span class="line">                            .font(.title)</span><br><span class="line">                            .background(<span class="type">Color</span>.blue)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .padding()</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">50</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Rectangle</span>()</span><br><span class="line">                            .fill(<span class="type">Color</span>.gray)</span><br><span class="line">                            .frame(height:<span class="number">150</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Section</span>(header:</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;Section 2&quot;</span>)</span><br><span class="line">                            .frame(maxWidth: .infinity, alignment: .leading)</span><br><span class="line">                            .font(.title)</span><br><span class="line">                            .background(<span class="type">Color</span>.red)</span><br><span class="line">                            .foregroundColor(.white)</span><br><span class="line">                            .padding()</span><br><span class="line">                ) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">50</span>) &#123; index <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Rectangle</span>()</span><br><span class="line">                            .fill(<span class="type">Color</span>.green)</span><br><span class="line">                            .frame(height:<span class="number">150</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/grid_02.png" alt="&quot;grid_02&quot;"></p><h1 id="ignoresSafeArea-x2F-edgesIgnoringSafeArea"><a href="#ignoresSafeArea-x2F-edgesIgnoringSafeArea" class="headerlink" title=".ignoresSafeArea() &#x2F; .edgesIgnoringSafeArea()"></a>.ignoresSafeArea() &#x2F; .edgesIgnoringSafeArea()</h1><h3 id="edgesIgnoringSafeArea-–-Deprecated-on-iOS-13-0–15-2"><a href="#edgesIgnoringSafeArea-–-Deprecated-on-iOS-13-0–15-2" class="headerlink" title=".edgesIgnoringSafeArea() – Deprecated on iOS 13.0–15.2"></a>.edgesIgnoringSafeArea() – Deprecated on iOS 13.0–15.2</h3><blockquote><p>SafeArea 是指不包含上下边界的范围.</p></blockquote><p>.edgesIgnoringSafeArea(.top)     – 会包含到上边界,但不包含下边界<br>.edgesIgnoringSafeArea(.bottom)  – 会包含到下边界,但不包含上边界<br>.edgesIgnoringSafeArea(.all)    – 既包含上边界也包含下边界<br>建议的做法:<br>1.用ZStack,最底层设置.edgesIgnoringSafeArea(.all),最外层也就是包含content的不需要设置。<br>2.在View外层使用背景色来.edgesIgnoringSafeArea(.all).代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span> &#123;</span><br><span class="line">    <span class="comment">// There is something ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .background(Color.red) 你还可以在这里再加一层背景,但这层背景并不包含上下边界</span></span><br><span class="line">.background(</span><br><span class="line">    <span class="type">Color</span>.orange</span><br><span class="line">        .edgesIgnoringSafeArea(.all)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="/Images/edgesIgnoringSafeArea.png" alt="&quot;edgesIgnoringSafeArea&quot;"></p><h3 id="ignoresSafeArea"><a href="#ignoresSafeArea" class="headerlink" title=".ignoresSafeArea()"></a>.ignoresSafeArea()</h3><p>现在建议用.ignoresSafeArea(),而不是.edgesIgnoringSafeArea(）</p><p>.ignoresSafeArea(edges: .top)<br>.ignoresSafeArea(edges: .bottom)<br>.ignoresSafeArea(edges: .all)</p><h1 id="statusBar-–-safeArea区域的状态栏是否显示的功能"><a href="#statusBar-–-safeArea区域的状态栏是否显示的功能" class="headerlink" title="statusBar – safeArea区域的状态栏是否显示的功能"></a>statusBar – safeArea区域的状态栏是否显示的功能</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> hideStatusBar <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Button</span>(<span class="string">&quot;Toggle Status Bar&quot;</span>) &#123;</span><br><span class="line">            withAnimation &#123;</span><br><span class="line">                hideStatusBar.toggle()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .statusBar(hidden: hideStatusBar)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/statusBar.gif" alt="statusBar"></p><h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><h3 id="NavigationView的Title设置"><a href="#NavigationView的Title设置" class="headerlink" title="NavigationView的Title设置"></a>NavigationView的Title设置</h3><p>NavigationView中设置.navigationTitle：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">ScrollView</span> &#123;</span><br><span class="line">        <span class="type">SomeView</span>()</span><br><span class="line">            .navigationTitle(<span class="string">&quot;NavigationTitle&quot;</span>)</span><br><span class="line">            .navigationBaeTitleDisplayMode(.automatic)</span><br><span class="line">            <span class="comment">// .inline</span></span><br><span class="line">            <span class="comment">// .large</span></span><br><span class="line">            <span class="comment">// .automatic 相对比较好。一开始是.large大小,ScrollView上滑后,字体会变小成为.inline并留存在上方。</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// .navigationBarHidden(true) 会隐藏该title,甚至包括返回键</span></span><br><span class="line">            <span class="comment">// 那么隐藏了返回键,怎么返回上一个页面,可以使用</span></span><br><span class="line">            <span class="comment">// @Environment(\.presentationMode) var presentationMode</span></span><br><span class="line">            <span class="comment">// presentationMode.wrappedValue.dismiss()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dark-Mode"><a href="#Dark-Mode" class="headerlink" title="Dark Mode"></a>Dark Mode</h1><p>在Assets.xcassets中添加New Color Set,可以取名AdaptiveColor,这时在两个颜色中分别设置,比如Any Appearance设置成绿色,Dark Apeearance设置成黄色.<br>使用的时候可以:<br>.foregroundColor(Color(“AdaptiveColor”))<br>或者:<br>取得环境变量 @Environment(.colorScheme) var colorScheme<br>.foregroundColor(colorScheme &#x3D;&#x3D; .light ? .green : .yellow)</p><h1 id="储存数据"><a href="#储存数据" class="headerlink" title="储存数据"></a>储存数据</h1><p>两种方法: UserDefaults 以及 @AppStorage。<br>先有前者,后面这种方法更方便,所以推荐用@AppStorage</p><p>此外,资料中建议:<br>UserDefaults中存储的数据总量不要超过512K,不然会让app的启动变慢,因为app的启动会加载UserDefaults中的所有数据。</p><p>这是UserDefaults实际使用中的方法及可以储存的各种对象,包括到了Object对象,未验证,但下面笔记中已经讲到了struct对象的储存:</p><blockquote><p><a href="http://t.zoukankan.com/hero11223-p-7655308.html">http://t.zoukankan.com/hero11223-p-7655308.html</a></p></blockquote><h3 id="UserDefaults-standard-set"><a href="#UserDefaults-standard-set" class="headerlink" title="UserDefaults.standard.set"></a>UserDefaults.standard.set</h3><p>UserDefaults.standard.set() 设置值:<br>[ UserDefaults.standard is the built-in instance of UserDefaults. So if you want to share defaults across several app extensions you might create your own UserDefaults instance. ]</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Test0011</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> currentName: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(currentName <span class="operator">??</span> <span class="string">&quot;Add name here&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Save&quot;</span>.uppercased()) &#123;</span><br><span class="line">                <span class="keyword">let</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Nick&quot;</span></span><br><span class="line">                currentName <span class="operator">=</span> name</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// name这个位置可以放任何类型的变量,比如String/Bool/Array,表示你要存储的变量是什么</span></span><br><span class="line">                <span class="comment">// forKey是放置该存储变量的key,以后调用就需要使用该key</span></span><br><span class="line">                <span class="type">UserDefaults</span>.standard.set(name, forKey: <span class="string">&quot;name&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            <span class="comment">// 这里是如何调用该存储的变量值</span></span><br><span class="line">            <span class="comment">// 如果要读取的数据是int,则要写成UserDefaults.standard.integer(forKey:)</span></span><br><span class="line">            currentName <span class="operator">=</span> <span class="type">UserDefaults</span>.standard.string(forKey: <span class="string">&quot;name&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserDefaults储存Struct对象"><a href="#UserDefaults储存Struct对象" class="headerlink" title="UserDefaults储存Struct对象"></a>UserDefaults储存Struct对象</h3><p>存储Struct对象的前提是,该Struct必须遵循Codable协议,例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>: <span class="title class_">Codable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> lastName: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> user <span class="operator">=</span> <span class="type">User</span>(firstName: <span class="string">&quot;Taylor&quot;</span>, lastName: <span class="string">&quot;Swift&quot;</span>)</span><br></pre></td></tr></table></figure><p>To convert our user data into JSON data, we need to call the encode() method on a JSONEncoder. This might throw errors, so it should be called with try or try? to handle errors neatly. For example, if we had a property to store a User instance, like user above.Then we could create a button that archives the user and save it to UserDefaults like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(<span class="string">&quot;Save User&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> encoder <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> encoder.encode(user) &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.set(data, forKey: <span class="string">&quot;UserData&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s designed to store any kind of data you can think of, such as strings, images, zip files, and more. Here, though, all we care about is that it’s one of the types of data we can write straight into UserDefaults.<br>取值:<br>When we’re coming back the other way – when we have JSON data and we want to convert it to Swift Codable types – we should use JSONDecoder rather than JSONEncoder(), but the process is much the same.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">iExpense</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> user <span class="operator">=</span> <span class="type">User</span>(firstName: <span class="string">&quot;Tom&quot;</span>, lastName: <span class="string">&quot;Hanks&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">Form</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;The name is : <span class="subst">\(user.firstName)</span> <span class="subst">\(user.lastName)</span>&quot;</span>)</span><br><span class="line">                    <span class="type">Section</span> &#123;</span><br><span class="line">                        <span class="type">HStack</span> &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;FirstName:&quot;</span>)</span><br><span class="line">                            <span class="type">TextField</span>(<span class="string">&quot;Input FirstName&quot;</span>, text: <span class="variable">$user</span>.firstName)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">HStack</span> &#123;</span><br><span class="line">                            <span class="type">Text</span>(<span class="string">&quot;LastName:&quot;</span>)</span><br><span class="line">                            <span class="type">TextField</span>(<span class="string">&quot;Input LastName&quot;</span>, text: <span class="variable">$user</span>.lastName)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Save user&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">let</span> encoder <span class="operator">=</span> <span class="type">JSONEncoder</span>()</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> encoder.encode(user) &#123;</span><br><span class="line">                        <span class="type">UserDefaults</span>.standard.set(data, forKey: <span class="string">&quot;user&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                .buttonStyle(.automatic)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        .onAppear &#123;</span><br><span class="line">            <span class="keyword">let</span> decoder <span class="operator">=</span> <span class="type">JSONDecoder</span>()</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">UserDefaults</span>.standard.data(forKey: <span class="string">&quot;user&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> user <span class="operator">=</span> <span class="keyword">try?</span> decoder.decode(<span class="type">User</span>.<span class="keyword">self</span>, from: data) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">self</span>.user <span class="operator">=</span> user</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上虽然是针对struct对象的,但针对class对象,我觉得其实原理是一样的。</p><h3 id="UserDefaults取出数据"><a href="#UserDefaults取出数据" class="headerlink" title="UserDefaults取出数据"></a>UserDefaults取出数据</h3><p>When you’re reading values from UserDefaults you need to check the return type carefully to ensure you know what you’re getting. Here’s what you need to know:</p><ul><li><strong>integer(forKey:)</strong> returns an integer if the key existed, or 0 if not.</li><li><strong>bool(forKey:)</strong> returns a boolean if the key existed, or false if not.</li><li><strong>float(forKey:)</strong> returns a float if the key existed, or 0.0 if not.</li><li><strong>double(forKey:)</strong> returns a double if the key existed, or 0.0 if not.</li><li><strong>object(forKey:)</strong> returns Any? so you need to conditionally typecast it to your data type.</li></ul><p>使用 <strong>object(forKey:)</strong> 取出数据时,你得typecast,就是需要使用到 as? as! 来optionally typecast &#x2F; force typecast 你的结果,但as!不推荐,因为一旦数据不对就会造成崩溃,所以一般推荐的方式是使用nil coalescing operaton:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array <span class="operator">=</span> defaults.object(forKey:<span class="string">&quot;SavedArray&quot;</span>) <span class="keyword">as?</span> [<span class="type">String</span>] <span class="operator">??</span> [<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">let</span> dict <span class="operator">=</span> defaults.object(forKey: <span class="string">&quot;SavedDict&quot;</span>) <span class="keyword">as?</span> [<span class="type">String</span>: <span class="type">String</span>] <span class="operator">??</span> [<span class="type">String</span>: <span class="type">String</span>]()</span><br></pre></td></tr></table></figure><h3 id="AppStorage"><a href="#AppStorage" class="headerlink" title="@AppStorage"></a>@AppStorage</h3><p>@AppStorage is for reading and writing data in UserDefaults.</p><p>相较于UserDefaults.standard.set, @AppStorage非常的简单易用,只需要一行的代码量,而不是两行。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Test0011</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只要这一条命令,后续 赋值/取值/存储 都只使用这个currentName变量即可,非常方便</span></span><br><span class="line">    <span class="comment">// 但试了下,存储&quot;对象&quot;会出问题,还是得使用UserDefaults</span></span><br><span class="line">    <span class="meta">@AppStorage</span>(<span class="string">&quot;name&quot;</span>) <span class="keyword">var</span> currentName: <span class="type">String</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(currentName <span class="operator">??</span> <span class="string">&quot;Add name here&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Save&quot;</span>.uppercased()) &#123;</span><br><span class="line">                <span class="keyword">let</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;Emily&quot;</span></span><br><span class="line">                currentName <span class="operator">=</span> name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上如果代码是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AppStorage</span>(<span class="string">&quot;name&quot;</span>) <span class="keyword">var</span> currentName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;NoName&quot;</span></span><br></pre></td></tr></table></figure><p>代表的意思是：</p><ol><li>若key为”name”的@AppStorage有值,则取该值;</li><li>若之前没有设定值,则取值为”NoName”。</li></ol><h3 id="SceneStorage-–-属性绑定器"><a href="#SceneStorage-–-属性绑定器" class="headerlink" title="@SceneStorage – 属性绑定器"></a>@SceneStorage – 属性绑定器</h3><p>@SceneStorage存在于每一个scene中,它只在Views中能被获取到。<br>但要注意,它不像@AppStorage和UserDefaults是存储在手机里的,<br>@SceneStorage存储的数据一个是只限于当前页面,<br>此外若关闭程序,数据就会被摧毁。<br>(试着关了一会再打开,但数据仍旧存在,但在xcode上就是关闭后数据就没有了)</p><p>很多资料上说,通常用于iPad上的应用程序,但在手机上操作一样可以。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">iExpense</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"><span class="comment">//    @State private var name: String = &quot;&quot;</span></span><br><span class="line">    <span class="meta">@SceneStorage</span>(<span class="string">&quot;name&quot;</span>) <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;The name is <span class="subst">\(name)</span>&quot;</span>) &#123;</span><br><span class="line">                name <span class="operator">=</span> <span class="string">&quot;Stan&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="-6"><a href="#-6" class="headerlink" title=""></a></h1><h3 id="Background-Materials"><a href="#Background-Materials" class="headerlink" title="Background Materials"></a>Background Materials</h3><p>.background修饰符内可以使用material,<br>类似于.opacity像垫了一个毛玻璃的效果,但使用起来又比透明度更好、更专业一点。<br>共有五种Material:<br>thinMaterial &#x2F; thickMaterial &#x2F; regularMaterial &#x2F; ultraThinMaterial &#x2F; ultraThickMaterial 。<br>下面用到的是ultraThinMaterial,也是视频中更多推荐的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Spacer</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .frame(height: <span class="number">350</span>)</span><br><span class="line">    .frame(maxWidth: .infinity)</span><br><span class="line">    .background(.thinMaterial)</span><br><span class="line">    .cornerRadius(<span class="number">30</span>)</span><br><span class="line">&#125;</span><br><span class="line">.ignoresSafeArea()</span><br></pre></td></tr></table></figure><p><img src="/Images/backgroundMaterials.png" alt="&quot;backgroundMaterials&quot;"></p><h3 id="textSelection-enabled-修饰符-–-可让用户选择文本-并-copy-x2F-share"><a href="#textSelection-enabled-修饰符-–-可让用户选择文本-并-copy-x2F-share" class="headerlink" title=".textSelection(.enabled) 修饰符 – 可让用户选择文本 并 copy&#x2F; share"></a>.textSelection(.enabled) 修饰符 – 可让用户选择文本 并 copy&#x2F; share</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;This text can be copied or shared.&quot;</span>)</span><br><span class="line">    .textSelection(.enabled)</span><br></pre></td></tr></table></figure><p>.enabled是可复制可分享的状况,.disabled是禁止复制和分享。</p><p>对文本长按后会出现Copy和DShare的选择性操作:<br><img src="/Images/textSelection.png" alt="&quot;textSelection.png&quot;"></p><h1 id="CoreData"><a href="#CoreData" class="headerlink" title="CoreData"></a>CoreData</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/how-to-combine-core-data-and-swiftui">https://www.hackingwithswift.com/books/ios-swiftui/how-to-combine-core-data-and-swiftui</a></p></blockquote><p>Core Data is capable of sorting and filtering of our data, and can work with much larger data – there’s effectively no limit to how much data it can store. Even better, Core Data implements all sorts of more advanced functionality for when you really need to lean on it: data validation, lazy loading of data, undo and redo, and much more.</p><p>所有的Data Model都存在于扩展名为.xcdatamodeld的文件中。<br>所以创建.xcdatamodeld该文件，流程: 创建文件-&gt;选择 Data Model-&gt;命名 即可。<br>这里命名为Bookworm。<br>随后添加Entity为Student,再添加属性id:UUID和name:String。</p><h3 id="防止Entity中的某个属性重名带来的麻烦-对该属性进行constraints限制"><a href="#防止Entity中的某个属性重名带来的麻烦-对该属性进行constraints限制" class="headerlink" title="防止Entity中的某个属性重名带来的麻烦,对该属性进行constraints限制"></a>防止Entity中的某个属性重名带来的麻烦,对该属性进行constraints限制</h3><p>比如一个名为Country的Entity,有fullName和shortName,要求是shortName不能重名,这时候就要对shortName进行constraints限制。<br>操作如下:<br>select the Country entity, go to the View menu and choose Inspectors &gt; Data Model, click the + button under Constraints, and rename the example to “shortName”.</p><h3 id="为Entity类的Country在Relationship中添加的candy-增加-One-To-Many-的属性"><a href="#为Entity类的Country在Relationship中添加的candy-增加-One-To-Many-的属性" class="headerlink" title="为Entity类的Country在Relationship中添加的candy 增加 One To Many 的属性"></a>为Entity类的Country在Relationship中添加的candy 增加 One To Many 的属性</h3><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/one-to-many-relationships-with-core-data-swiftui-and-fetchrequest">https://www.hackingwithswift.com/books/ios-swiftui/one-to-many-relationships-with-core-data-swiftui-and-fetchrequest</a></p></blockquote><p>选择Country,选择Relationship中的candy,在右侧出现的the data model inspector窗口中,为”Type”选择”To Many”.</p><p>p.s. Relationships comes in four forms:</p><ul><li>A one to one relationship means that one object in an entity links to exactly one object in another entity. In our example, this would mean that each type of candy has one country of origin, and each country could make only one types of candy. </li><li>A one to many relationship means that one object in an entity links to many objects in another entity. In our example, this would mean that one type of candy could have been introduced simultaneously in many countries, but that each country still could only make one type of candy.</li><li>A many to one relationship means that many objects in an entity link to one object in another entity. In our example. this would mean that each type of candy has one country of origin, and that each country can make many types of candy.</li><li>A many to many relationship means that many objects in an entity link to many objects in another entity. In our example, this would mean that one type of candy had been introduced simultaneously in many countries, and each country can make many types of candy.</li></ul><h3 id="转换NSSet"><a href="#转换NSSet" class="headerlink" title="转换NSSet"></a>转换NSSet</h3><p>当对两个Entity分别为Candy和Country进行relationship操作时,具体是对Country进行To Many,对Candy增加relationship对上Country,且reverse指向自己,则后续在创建SubClass的时候,Country+CoreDataProperties.swift中就会有一个属性:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Country+CoreDataProperties.swift</span></span><br><span class="line"><span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> candy: <span class="type">NSSet</span>?</span><br></pre></td></tr></table></figure><p>NSSet是什么？<br>This is the older, Objective-C data type that is equivalent to Swift’s Set, but we can’t use it with SwiftUI’s ForEach.<br>所以需要对NSSet进行转换。<br>转换的过程就是为其添加一个计算属性：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> candyArray: [<span class="type">Candy</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> <span class="operator">=</span> candy <span class="keyword">as?</span> <span class="type">Set</span>&lt;<span class="type">Candy</span>&gt; <span class="operator">??</span> []</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">set</span>.sorted &#123;</span><br><span class="line">        <span class="variable">$0</span>.wrappedName <span class="operator">&lt;</span> <span class="variable">$1</span>.wrappedName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上顺便也给排了个序。</p><h3 id="创建一个读取CoreData的class类工具"><a href="#创建一个读取CoreData的class类工具" class="headerlink" title="创建一个读取CoreData的class类工具"></a>创建一个读取CoreData的class类工具</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataController</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="comment">// This tell Core Data we want to use the Bookworm data model.</span></span><br><span class="line">    <span class="comment">// It does prepare Core Data to load it.</span></span><br><span class="line">    <span class="comment">// Data models don&#x27;t contain our actual data,</span></span><br><span class="line">    <span class="comment">// just the definitions of properties.</span></span><br><span class="line">    <span class="keyword">let</span> container <span class="operator">=</span> <span class="type">NSPersistentContainer</span>(name: <span class="string">&quot;Bookworm&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="comment">// loadPersistentStores is to actually load the data</span></span><br><span class="line">        <span class="comment">// according to the data model.</span></span><br><span class="line">        <span class="comment">// this doesn&#x27;t load all the data into memory at the same time.</span></span><br><span class="line">        container.loadPersistentStores &#123; description, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Core Data failed to load: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 还有防止相同值重复写入的代码,见下面一个知识点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最外层的拥有@main的文件中<br>在struct中加入该class类工具,作为一个data controller:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> dataController <span class="operator">=</span> <span class="type">DataController</span>()</span><br></pre></td></tr></table></figure><p>把他放入SwiftUI的environment环境中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WindowGroup</span> &#123;</span><br><span class="line">    <span class="type">ContentView</span>()</span><br><span class="line">        .environment(\.managedObjectContext, dataController.container.viewContext)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:放入环境中的是由managedObjectContext管理的dataController.container.viewContext！！！<br>文章中是这么说的：<br>All our managed objects live inside a managed object context, one of which we created earlier. Placing it into the SwiftUI environment meant that it was automatically used for the @FetchRequest property wrapper – it uses whatever managed object context is available in the environment.<br>这时候一是可以使用@FetchRequest取得数据,二是可以使用@Environment(.managedObjectContext) var moc来对该managed object context进行操作。</p><p>NSPersistentStoreContainer, which handles loading the actual data we have saved to the user’s device.</p><p>managed object contexts:<br>these are effectively the “live” version of your data – when you load objects and change them, those changes only exist in memory until you specifically save them back to the persistent store. So, the job of the view context is to let us work with all our data in memory, which is much faster than constantly reading and writing data to disk.</p><h3 id="对CoreData的class类工具的改进-–-防止相同值重复写入"><a href="#对CoreData的class类工具的改进-–-防止相同值重复写入" class="headerlink" title="对CoreData的class类工具的改进 – 防止相同值重复写入"></a>对CoreData的class类工具的改进 – 防止相同值重复写入</h3><p>你可以设置某个Entity的属性栏中的Constraints,填入某个自有的特定的Attribute的时候,则无法在save的时候出现重复数据,不然就会报错。<br>但我们又希望即使有重复值,当加入多个同样值的对象,并将这些值写入CoreData的时候,会把重复值剔除,只保留一个:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataController</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> container <span class="operator">=</span> <span class="type">NSPersistentContainer</span>(name: <span class="string">&quot;CoreDataProject&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        container.loadPersistentStores &#123; description, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Core Data failed to load: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// to specify how data should be merged in this situation</span></span><br><span class="line">            <span class="keyword">self</span>.container.viewContext.mergePolicy <span class="operator">=</span> <span class="type">NSMergePolicy</span>.mergeByPropertyObjectTrump</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是即使你创建了多个Entity中的重复class对象,当执行moc.save()时,就会遵循上述merge的策略,剔除重复值。<br>具体见:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/ensuring-core-data-objects-are-unique-using-constraints">https://www.hackingwithswift.com/books/ios-swiftui/ensuring-core-data-objects-are-unique-using-constraints</a></p></blockquote><p>但如果你只设置了一个attribute为A的属性不能重复,其他attribute为B的可以重复,这样多个数据,虽然有重复的A,但有不一样的B,系统是如何剔除数据的呢?<br>试了一下,它只保存了一个数据,感觉还是随机只保存了一个数据。</p><h3 id="对CoreData的struct工具结构的示例-可以作为常规使用"><a href="#对CoreData的struct工具结构的示例-可以作为常规使用" class="headerlink" title="对CoreData的struct工具结构的示例,可以作为常规使用"></a>对CoreData的struct工具结构的示例,可以作为常规使用</h3><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui">https://www.hackingwithswift.com/quick-start/swiftui/how-to-configure-core-data-to-work-with-swiftui</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">PersistenceController</span> &#123;</span><br><span class="line">    <span class="comment">// A singleton for our entire app to use</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared <span class="operator">=</span> <span class="type">PersistenceController</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Storage for Core Data</span></span><br><span class="line">    <span class="keyword">let</span> container: <span class="type">NSPersistentContainer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// A test configuration for SwiftUI previews</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> preview: <span class="type">PersistenceController</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> controller <span class="operator">=</span> <span class="type">PersistenceController</span>(inMemory: <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create 10 example programming languages.</span></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">0</span><span class="operator">..&lt;</span><span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> language <span class="operator">=</span> <span class="type">ProgrammingLanguage</span>(context: controller.container.viewContext)</span><br><span class="line">            language.name <span class="operator">=</span> <span class="string">&quot;Example Language 1&quot;</span></span><br><span class="line">            language.creator <span class="operator">=</span> <span class="string">&quot;A. Programmer&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> controller</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// An initializer to load Core Data, optionally able</span></span><br><span class="line">    <span class="comment">// to use an in-memory store.</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">inMemory</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// If you didn&#x27;t name your model Main you&#x27;ll need</span></span><br><span class="line">        <span class="comment">// to change this name below.</span></span><br><span class="line">        container <span class="operator">=</span> <span class="type">NSPersistentContainer</span>(name: <span class="string">&quot;Main&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> inMemory &#123;</span><br><span class="line">            container.persistentStoreDescriptions.first<span class="operator">?</span>.url <span class="operator">=</span> <span class="type">URL</span>(fileURLWithPath: <span class="string">&quot;/dev/null&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        container.loadPersistentStores &#123; description, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">&quot;Error: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">save</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> context <span class="operator">=</span> container.viewContext</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> context.hasChanges &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> context.save()</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="comment">// Show some error here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the YourProjectNameApp.swift file. First, give your app struct a property to store the persistence controller:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> persistenceController <span class="operator">=</span> <span class="type">PersistenceController</span>.shared</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他代码省略</span></span><br><span class="line"></span><br><span class="line"><span class="type">ContentView</span>()</span><br><span class="line">    .environment(\.managedObjectContext, persistenceController.container.viewContext)</span><br></pre></td></tr></table></figure><p>In SwiftUI this is done by adding a property to our app struct to monitor the scene phase:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">var</span> scenePhase</span><br></pre></td></tr></table></figure><p>Then you can watch for that changing and call save() every time:<br>p.s.用处之一就是,用户上划退出程序时,马上进行保存操作,放置数据的丢失。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WindowGroup</span> &#123;</span><br><span class="line">    <span class="type">ContentView</span>()</span><br><span class="line">        .environment(\.managedObjectContext, persistenceController.container.viewContext)</span><br><span class="line">&#125;</span><br><span class="line">.onChange(of: scenePhase) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">    persistenceController.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FetchRequest"><a href="#FetchRequest" class="headerlink" title="@FetchRequest"></a>@FetchRequest</h3><p>Retrieving information from Core Data – using a fetch request<br>@FetchRequest is another property wrapper. It takes at least one parameter describing how we want the results to be sorted.</p><p>为何@FetchRequest能获取到数据?(上面重复的一段话,这里也可以使用)<br>All our managed objects live inside a managed object context, one of which we created earlier. Placing it into the SwiftUI environment meant that it was automatically used for the @FetchRequest property wrapper – it uses whatever managed object context is available in the environment.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: []) <span class="keyword">var</span> students: <span class="type">FetchedResults</span>&lt;<span class="type">Student</span>&gt;</span><br></pre></td></tr></table></figure><p>这里的sort索引为空,取得的数据放在students属性中,该属性的类型是FetchedResults<Student>.<br>感觉这样已经是取得了Core Data中的数据了。之后就可以使用这个students属性了。<br>你可以List遍历该students中的属性:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">List</span>(students) &#123; student <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(student.name <span class="operator">??</span> <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要明确一点,student.name是一个optional。<br>文章中是这样解释取属性是optional的原因:<br>because all Core Data cares about is that the properties have values when they are saved – they can be nil at other times.</p><p>此外,还要明确一点,load了Core Data后, CoreData就会创建一个继承自它自己所本身就有类中的一个,比如现在系统中就有一个类是Student。<br>该继承的类都指向一个基类–NSManagedObject。<br>NSManagedObject: A base class that implements the behavior for a Core Data model object.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NSManagedObject</span> : <span class="title class_">NSObject</span></span><br></pre></td></tr></table></figure><p>所以在我们的代码中看不到这个Student类,因为这是自动产生的,就像Core ML的model一样。</p><p>接下来对managed object context进行操作:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br></pre></td></tr></table></figure><p>可以进行添加和存储对象的操作。</p><p>使用moc来对CoreData中的Student类进行创建对象的操作：<br>这里使用到了 Student(context: moc)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student <span class="operator">=</span> <span class="type">Student</span>(context: moc)</span><br><span class="line">student.id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">student.name <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(chosenFirstName)</span> <span class="subst">\(chosenLastName)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>最后,对创建的Studet进行储存至CoreData中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里没有考虑到失败的情况,实际编码时要调整</span></span><br><span class="line"><span class="keyword">try?</span> moc.save()</span><br></pre></td></tr></table></figure><p>所以,最后创建一个按钮,可以实时创建并保存Student对象,这是上面的完整代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Button</span>(<span class="string">&quot;Add&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> firstNames <span class="operator">=</span> [<span class="string">&quot;Ginny&quot;</span>, <span class="string">&quot;Harry&quot;</span>, <span class="string">&quot;Hermione&quot;</span>, <span class="string">&quot;Luna&quot;</span>, <span class="string">&quot;Ron&quot;</span>]</span><br><span class="line">    <span class="keyword">let</span> lastNames <span class="operator">=</span> [<span class="string">&quot;Granger&quot;</span>, <span class="string">&quot;Lovegood&quot;</span>, <span class="string">&quot;Potter&quot;</span>, <span class="string">&quot;Weasley&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chosenFirstName <span class="operator">=</span> firstNames.randomElement()<span class="operator">!</span></span><br><span class="line">    <span class="keyword">let</span> chosenLastName <span class="operator">=</span> lastNames.randomElement()<span class="operator">!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> student <span class="operator">=</span> <span class="type">Student</span>(context: moc)</span><br><span class="line">    student.id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    student.name <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(chosenFirstName)</span> <span class="subst">\(chosenLastName)</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try?</span> moc.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小总结：</p><ol><li>@FetchRequest(sortDescriptors: []) var students: FetchedResults<Student>可以加载数据;</li><li>ContentView().environment(.managedObjectContext, dataController.container.viewContext)可供后续@Environment调用;</li><li>加载后Student类就可以使用;(貌似什么都不加载的情况下,Student类也可以使用)</li><li>@Environment(.managedObjectContext) var moc 可以对增加等操作进行保存操作。</li></ol><h3 id="FetchRequest-的具体使用"><a href="#FetchRequest-的具体使用" class="headerlink" title="@FetchRequest 的具体使用"></a>@FetchRequest 的具体使用</h3><p>第一种是加在全局变量中的：<br>具体见CoreDataBootcamp项目。<br>视频在:</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=15">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=15</a></p></blockquote><p>CoreData &amp;&amp; MVVM 的形式</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=16">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=16</a></p></blockquote><p>Relationships, Predicate 的使用:(more than one hour and it can be understood and how to use properly?)</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=17">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=17</a></p></blockquote><p>以下是另一种形式的:<br>视频在:</p><blockquote><p><a href="https://www.bilibili.com/video/BV1pb4y1X7ZH?p=16">https://www.bilibili.com/video/BV1pb4y1X7ZH?p=16</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoreDataViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> container: <span class="type">NSPersistentContainer</span></span><br><span class="line">    <span class="comment">// FruitEntity是下面NSFetchRequest&lt;FruitEntity&gt;(entityName: &quot;FruitEntity&quot;)</span></span><br><span class="line">    <span class="comment">// 中&lt;FruitEntity&gt;定义的</span></span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> savedEntities: [<span class="type">FruitEntity</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先要新建CoreData文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         // 加载CoreData文件,但在加载前,记得要建立这个文件,</span></span><br><span class="line"><span class="comment">         // 通过NewFile-CoreData-DataModel来新建这个CoreData文件</span></span><br><span class="line"><span class="comment">         // 文件取名为FruitsContainer.xcdatamodeld,后缀不加的话默认会补上</span></span><br><span class="line"><span class="comment">         // 新建后可以看到 AddEntity 按钮,新建Entity后改名为FruitEntity</span></span><br><span class="line"><span class="comment">         // 随后可以操作这个Entity,感觉这就是个数据库</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载CoreData文件,只要扩展名.xcdatamodeld前面的主文件名</span></span><br><span class="line">        container <span class="operator">=</span> <span class="type">NSPersistentContainer</span>(name: <span class="string">&quot;FruitsContainer&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载CoreData的数据</span></span><br><span class="line">        container.loadPersistentStores &#123; (description, error) <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// 这里只设置了error的情况,因为成功的情况没必要做其他事情了</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Error Loading Core Data. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">            &#125; <span class="comment">// else &#123;</span></span><br><span class="line">            <span class="comment">//    print(&quot;Successfully loaded core data!&quot;)</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fetchFruits()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchFruits</span>() &#123;</span><br><span class="line">        <span class="comment">// 使用NSFetchRequest加载entityName,就是CoreData文件中建立的entity名称,</span></span><br><span class="line">        <span class="comment">// 此外还需要Generic parameter &#x27;ResultType&#x27;,</span></span><br><span class="line">        <span class="comment">// 且得遵循一个Entity,就是我们上面在CoreData文件中建立的Entity,即FruitEntity,</span></span><br><span class="line">        <span class="comment">// 而entityName可以随便取名,这里一般遵循名字 相同的原则</span></span><br><span class="line">        <span class="comment">// ⚠️ 前面故意将entityName: &quot;FruitEntity&quot;写成entityName: &quot;FruitEntities&quot;</span></span><br><span class="line">        <span class="comment">// 导致崩溃,且查不到原因</span></span><br><span class="line">        <span class="keyword">let</span> request <span class="operator">=</span> <span class="type">NSFetchRequest</span>&lt;<span class="type">FruitEntity</span>&gt;(entityName: <span class="string">&quot;FruitEntity&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            savedEntities <span class="operator">=</span> <span class="keyword">try</span> container.viewContext.fetch(request)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error fetching. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">addFruit</span>(<span class="params">text</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> newFruit <span class="operator">=</span> <span class="type">FruitEntity</span>(context: container.viewContext)</span><br><span class="line">        newFruit.name <span class="operator">=</span> text</span><br><span class="line">        saveData()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">deleteFruit</span>(<span class="params">indexSet</span>: <span class="type">IndexSet</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> index <span class="operator">=</span> indexSet.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> entity <span class="operator">=</span> savedEntities[index]</span><br><span class="line">        container.viewContext.delete(entity)</span><br><span class="line">        saveData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateFruit</span>(<span class="params">entity</span>: <span class="type">FruitEntity</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> currentName <span class="operator">=</span> entity.name <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> newName <span class="operator">=</span> currentName <span class="operator">+</span> <span class="string">&quot;!&quot;</span></span><br><span class="line">        entity.name <span class="operator">=</span> newName</span><br><span class="line">        saveData()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">saveData</span>() &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> container.viewContext.save()</span><br><span class="line">            fetchFruits()</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error Saving. <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreDataBootcamp</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> vm <span class="operator">=</span> <span class="type">CoreDataViewModel</span>()</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> textFieldText: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Add fruit here...&quot;</span>, text: <span class="variable">$textFieldText</span>)</span><br><span class="line">                    .font(.headline)</span><br><span class="line">                    .padding(.leading)</span><br><span class="line">                    .frame(height: <span class="number">55</span>)</span><br><span class="line">                    .background(<span class="type">Color</span>.gray.opacity(<span class="number">0.3</span>))</span><br><span class="line">                    .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                    .padding(.horizontal)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Button</span> &#123;</span><br><span class="line">                    <span class="keyword">guard</span> <span class="operator">!</span>textFieldText.isEmpty <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                    vm.addFruit(text: textFieldText)</span><br><span class="line">                    textFieldText <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                &#125; label: &#123;</span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Button&quot;</span>)</span><br><span class="line">                        .font(.headline)</span><br><span class="line">                        .foregroundColor(.white)</span><br><span class="line">                        .frame(height: <span class="number">55</span>)</span><br><span class="line">                        .frame(maxWidth: .infinity)</span><br><span class="line">                        .background(<span class="type">Color</span>.pink)</span><br><span class="line">                        .cornerRadius(<span class="number">10</span>)</span><br><span class="line">                        .padding(.horizontal)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">List</span> &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(vm.savedEntities) &#123; entity <span class="keyword">in</span></span><br><span class="line">                        <span class="type">Text</span>(entity.name <span class="operator">??</span> <span class="string">&quot;No Name&quot;</span>)</span><br><span class="line">                            .onTapGesture &#123;</span><br><span class="line">                                vm.updateFruit(entity: entity)</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .onDelete(perform: vm.deleteFruit)</span><br><span class="line">                &#125;</span><br><span class="line">                .listStyle(<span class="type">PlainListStyle</span>())</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Fruits&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreDataBootcamp_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">CoreDataBootcamp</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Relationships的实际运用,以及配合使用到的Predicate，如何在项目中很好地利用到：<br>先看一下这篇文章:<br>聊一下在SwiftUI中使用CoreData</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/269441493">https://zhuanlan.zhihu.com/p/269441493</a></p></blockquote><h3 id="FetchRequest的sortDescriptors的使用"><a href="#FetchRequest的sortDescriptors的使用" class="headerlink" title="@FetchRequest的sortDescriptors的使用:"></a>@FetchRequest的sortDescriptors的使用:</h3><h4 id="以title字段排序"><a href="#以title字段排序" class="headerlink" title="以title字段排序:"></a>以title字段排序:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: [</span><br><span class="line">    <span class="type">SortDescriptor</span>(\.title)</span><br><span class="line">]) <span class="keyword">var</span> books: <span class="type">FetchedResults</span>&lt;<span class="type">Book</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="以title字段逆向排序"><a href="#以title字段逆向排序" class="headerlink" title="以title字段逆向排序:"></a>以title字段逆向排序:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SortDescriptor</span>(\.title, order: .reverse)</span><br></pre></td></tr></table></figure><h4 id="以title和author两个字段依序排序"><a href="#以title和author两个字段依序排序" class="headerlink" title="以title和author两个字段依序排序:"></a>以title和author两个字段依序排序:</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: [</span><br><span class="line">    <span class="type">SortDescriptor</span>(\.title),</span><br><span class="line">    <span class="type">SortDescriptor</span>(\.author)</span><br><span class="line">]) <span class="keyword">var</span> books: <span class="type">FetchedResults</span>&lt;<span class="type">Book</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="FetchRequest的NSPredicate的使用"><a href="#FetchRequest的NSPredicate的使用" class="headerlink" title="@FetchRequest的NSPredicate的使用"></a>@FetchRequest的NSPredicate的使用</h3><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/filtering-fetchrequest-using-nspredicate">https://www.hackingwithswift.com/books/ios-swiftui/filtering-fetchrequest-using-nspredicate</a></p></blockquote><h4 id="NSPredicate的一般用法"><a href="#NSPredicate的一般用法" class="headerlink" title="NSPredicate的一般用法"></a>NSPredicate的一般用法</h4><p>之前使用到的 @FetchRequest(sortDescriptors: []) var books: FetchedResults<Book><br>其实还能在@FetchRequest中加一个predicate参数,作用是对按要求取的自己想要的数据。<br>一般用法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: [], predicate: <span class="literal">nil</span>) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br></pre></td></tr></table></figure><p>这是默认的没有要求的取数据的做法。</p><p>假设我们以universe属性来取值,要求其的值等于’Star Wars’,我们就可以这样写:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: [], predicate: <span class="type">NSPredicate</span>(format: <span class="string">&quot;universe == &#x27;Star Wars&#x27;&quot;</span>)) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br></pre></td></tr></table></figure><p>但是既有单引号又有双引号,看起来不是那么舒服,所以可以这样,也推荐这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span>(sortDescriptors: [], predicate: <span class="type">NSPredicate</span>(format: <span class="string">&quot;universe == %@&quot;</span>, <span class="string">&quot;Star Wars&quot;</span>))) <span class="keyword">var</span> ships: <span class="type">FetchedResults</span>&lt;<span class="type">Ship</span>&gt;</span><br></pre></td></tr></table></figure><p>除了”&#x3D;&#x3D;”,我们也可以使用 “&lt;” 和 “&gt;”,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;name &lt; %@&quot;</span>, <span class="string">&quot;F&quot;</span>))</span><br></pre></td></tr></table></figure><p>还可以使用 “IN” :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;universe IN %@&quot;</span>, [<span class="string">&quot;Aliens&quot;</span>, <span class="string">&quot;Firefly&quot;</span>, <span class="string">&quot;Star Trek&quot;</span>])</span><br></pre></td></tr></table></figure><p>以及 “BEGINSWITH” 和 “CONTAINS”:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;name BEGINSWITH %@&quot;</span>, <span class="string">&quot;E&quot;</span>))</span><br><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;name CONTAINS %@&quot;</span>, <span class="string">&quot;E&quot;</span>))</span><br></pre></td></tr></table></figure><p>以上都是区分大小写的,因此还有不区分大小写的:<br>[C] – 大写C makes an NSPredicate case-insensitive,小写c makes an NSPredicate case-sensitive。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;name BEGINSWITH[c] %@&quot;</span>, <span class="string">&quot;e&quot;</span>))</span><br><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;name CONTAINS[c] %@&quot;</span>, <span class="string">&quot;e&quot;</span>))</span><br></pre></td></tr></table></figure><p>以及使用 “NOT” 进行条件取反的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;NOT name BEGINSWITH[c] %@&quot;</span>, <span class="string">&quot;e&quot;</span>))</span><br></pre></td></tr></table></figure><p>还有条件里使用 “AND” 来进行联合操作。</p><p>使用 “&#x3D;” 来判断条件的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSPredicate</span>(format: <span class="string">&quot;age = %i&quot;</span>, <span class="number">33</span>) <span class="comment">// 我这里应该是写错了,应该是==</span></span><br></pre></td></tr></table></figure><p>为什么这里用%i而不是用%K或者%@?:<br>%K是an argument substitution for indicating a keypath.<br>%@是不是因为它会有双引号包着,而这里不能放String类型,而是数字类型,所以才出现了%i。</p><p>还有使用 “AND” 或者 “NSCompoundPredicate” 进行复合条件操作的。<br>这个也非常重要,后续还要再添加相应的笔记。</p><h4 id="使用-FetchRequest的NSPredicate制作一个Dynamically-filtering动态过滤的view页面"><a href="#使用-FetchRequest的NSPredicate制作一个Dynamically-filtering动态过滤的view页面" class="headerlink" title="使用@FetchRequest的NSPredicate制作一个Dynamically filtering动态过滤的view页面"></a>使用@FetchRequest的NSPredicate制作一个Dynamically filtering动态过滤的view页面</h4><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/dynamically-filtering-fetchrequest-with-swiftui">https://www.hackingwithswift.com/books/ios-swiftui/dynamically-filtering-fetchrequest-with-swiftui</a></p></blockquote><p>为什么会有这个问题？我们为什么不能建立一个类似 @FetchRequest(sortDescriptors: [], predicate: NSPredicate(format: “universe &#x3D;&#x3D; %@”, “Star Wars”))) var ships: FetchedResults<Ship> ,随后”Star Wars”使用变量来进行动态地改变,那不就能够动态取值了吗？<br>答案是,@FetchRequest是被创建的一个属性,如果你将引用到的其他值进行改变,@FetchRequest是会拒绝这个改变的,它就当什么都没发生。</p><p>因此,就得按照下面的流程操作：<br>（感觉原理其实就是,在ContentView中插入一个View,这里View里有@FetchRequest,每当ContentView更新的时候,里面那个View也更新,@FetchRequest就会接收到新的变量传来的数据,其就会去请求CoreData数据库。）</p><p>先得按照 “Creating NSManagedObject subclasses” 这一节创建一个subclass,这个entity名为Singer.<br>随后将新创建的Singer+CoreDataProperties.swift进行修改(就是增加二个变量):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singer+CoreDataProperties.swift</span></span><br><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Singer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@nonobjc</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">func</span> <span class="title class_">fetchRequest</span>() -&gt; <span class="title class_">NSFetchRequest</span>&lt;<span class="title class_">Singer</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSFetchRequest</span>&lt;<span class="type">Singer</span>&gt;(entityName: <span class="string">&quot;Singer&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> firstName: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">@NSManaged</span> <span class="keyword">public</span> <span class="keyword">var</span> lastName: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增的第一个变量</span></span><br><span class="line">    <span class="keyword">var</span> wrappedFirstName: <span class="type">String</span> &#123;</span><br><span class="line">        firstName <span class="operator">??</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增的第二个变量</span></span><br><span class="line">    <span class="keyword">var</span> wrappedLastName: <span class="type">String</span> &#123;</span><br><span class="line">        lastName <span class="operator">??</span> <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Singer</span> : <span class="title class_">Identifiable</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但我感觉这新增的两个变量不加也行,就是你得后续一直使用 nil coalescing,所以这一步建议还是要有的吧。</p><p>新建一个FilteredList.swift文件:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FilteredList.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FilteredList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@FetchRequest</span> <span class="keyword">var</span> fetchRequest: <span class="type">FetchedResults</span>&lt;<span class="type">Singer</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">filter</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="comment">// 像设置@State变量的值一样</span></span><br><span class="line">        _fetchRequest <span class="operator">=</span> <span class="type">FetchRequest</span>&lt;<span class="type">Singer</span>&gt;(sortDescriptors: [], predicate: <span class="type">NSPredicate</span>(format: <span class="string">&quot;lastName BEGINSWITH %@&quot;</span>, filter))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(fetchRequest, id:\.<span class="keyword">self</span>) &#123; singer <span class="keyword">in</span></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(singer.wrappedFirstName)</span> <span class="subst">\(singer.wrappedLastName)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面不要preview了,因为没必要</span></span><br></pre></td></tr></table></figure><p>最后ContentView.swift:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContentView.swift</span></span><br><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">FilteredList</span>(filter: lastNameFilter)</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Add Examples&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> taylor <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                taylor.firstName <span class="operator">=</span> <span class="string">&quot;Taylor&quot;</span></span><br><span class="line">                taylor.lastName <span class="operator">=</span> <span class="string">&quot;Swift&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> ed <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                ed.firstName <span class="operator">=</span> <span class="string">&quot;Ed&quot;</span></span><br><span class="line">                ed.lastName <span class="operator">=</span> <span class="string">&quot;Sheeran&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> adele <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                adele.firstName <span class="operator">=</span> <span class="string">&quot;Adele&quot;</span></span><br><span class="line">                adele.lastName <span class="operator">=</span> <span class="string">&quot;Adkins&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> moc.hasChanges &#123;</span><br><span class="line">                    <span class="keyword">try?</span> moc.save()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show A&quot;</span>) &#123;</span><br><span class="line">                lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show S&quot;</span>) &#123;</span><br><span class="line">                lastNameFilter <span class="operator">=</span> <span class="string">&quot;S&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的作用是:<br>“Add Examples”按钮新增CoreData数据,<br>“Show A”按钮只显示以字幕A开头的数据,<br>“Show S”按钮只显示以字幕S开头的数据。</p><p>关于页面更新时向CoreData取值的效率说明:<br>页面每次更新,也会重新创建fetch request,那是不是也是每次都会向CoreData再次查询取值呢？<br>要是这样的话,就会很恐怖,一直在跑数据库,效率肯定会低下。<br>幸运的是，并不是这样。以上代码只在filter string更改的时候,才会重新向CoreData发出查询的请求。</p><p>此外,上述代码只能适用于Singer,但不适用于任意的NSManagedObject(这就是Entity类的class类型,比如之前的Singer),因此,需要再行更改:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FilteredList</span>&lt;<span class="title class_">T</span>: <span class="title class_">NSManagedObject</span>, <span class="title class_">Content</span>: <span class="title class_">View</span>&gt;: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@FetchRequest</span> <span class="keyword">var</span> fetchRequest: <span class="type">FetchedResults</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> content: (<span class="type">T</span>) -&gt; <span class="type">Content</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">filterKey</span>: <span class="type">String</span>, <span class="params">filterValue</span>: <span class="type">String</span>, <span class="meta">@ViewBuilder</span> <span class="params">content</span>: <span class="keyword">@escaping</span> (<span class="type">T</span>) -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="comment">// %@不能用在attribute names中,因为会加引号,</span></span><br><span class="line">        <span class="comment">// 所以使用到%K,就不会加引号了</span></span><br><span class="line">        _fetchRequest <span class="operator">=</span> <span class="type">FetchRequest</span>&lt;<span class="type">T</span>&gt;(sortDescriptors: [], predicate: <span class="type">NSPredicate</span>(format: <span class="string">&quot;%K BEGINSWITH %@&quot;</span>, filterKey, filterValue))</span><br><span class="line">        <span class="keyword">self</span>.content <span class="operator">=</span> content</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(fetchRequest, id:\.<span class="keyword">self</span>) &#123; singer <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>.content(singer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">FilteredList</span>(filterKey: <span class="string">&quot;lastName&quot;</span>, filterValue: lastNameFilter) &#123; (singer: <span class="type">Singer</span>) <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(singer.wrappedFirstName)</span> <span class="subst">\(singer.wrappedLastName)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Add Examples&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> taylor <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                taylor.firstName <span class="operator">=</span> <span class="string">&quot;Taylor&quot;</span></span><br><span class="line">                taylor.lastName <span class="operator">=</span> <span class="string">&quot;Swift&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> ed <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                ed.firstName <span class="operator">=</span> <span class="string">&quot;Ed&quot;</span></span><br><span class="line">                ed.lastName <span class="operator">=</span> <span class="string">&quot;Sheeran&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">let</span> adele <span class="operator">=</span> <span class="type">Singer</span>(context: moc)</span><br><span class="line">                adele.firstName <span class="operator">=</span> <span class="string">&quot;Adele&quot;</span></span><br><span class="line">                adele.lastName <span class="operator">=</span> <span class="string">&quot;Adkins&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> moc.hasChanges &#123;</span><br><span class="line">                    <span class="keyword">try?</span> moc.save()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show A&quot;</span>) &#123;</span><br><span class="line">                lastNameFilter <span class="operator">=</span> <span class="string">&quot;A&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Show S&quot;</span>) &#123;</span><br><span class="line">                lastNameFilter <span class="operator">=</span> <span class="string">&quot;S&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在preview页面中如何加载CoreData中entity引入的class类？"><a href="#在preview页面中如何加载CoreData中entity引入的class类？" class="headerlink" title="在preview页面中如何加载CoreData中entity引入的class类？"></a>在preview页面中如何加载CoreData中entity引入的class类？</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DetailView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> moc <span class="operator">=</span> <span class="type">NSManagedObjectContext</span>(concurrencyType: .mainQueueConcurrencyType)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> book <span class="operator">=</span> <span class="type">Book</span>(context: moc)</span><br><span class="line">        book.title <span class="operator">=</span> <span class="string">&quot;Test book&quot;</span></span><br><span class="line">        book.author <span class="operator">=</span> <span class="string">&quot;Test author&quot;</span></span><br><span class="line">        book.genre <span class="operator">=</span> <span class="string">&quot;Fantasy&quot;</span></span><br><span class="line">        book.rating <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">        book.review <span class="operator">=</span> <span class="string">&quot;This was a great book; I really enjoyed it.&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">DetailView</span>(book: book)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从CoreData中删除一个对象"><a href="#从CoreData中删除一个对象" class="headerlink" title="从CoreData中删除一个对象"></a>从CoreData中删除一个对象</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.managedObjectContext) <span class="keyword">var</span> moc</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="comment">//假设CoreData中有实体Book,而book是其的一个实例</span></span><br><span class="line">moc.delete(book)</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="comment">// 接下来可以做dismiss页面等一系列的操作</span></span><br></pre></td></tr></table></figure><h3 id="对-FetchRequest进行row-limiting的操作-即只取限定的记录数-而非全部"><a href="#对-FetchRequest进行row-limiting的操作-即只取限定的记录数-而非全部" class="headerlink" title="对@FetchRequest进行row limiting的操作,即只取限定的记录数,而非全部"></a>对@FetchRequest进行row limiting的操作,即只取限定的记录数,而非全部</h3><p>很多时候,我们只要取前几个记录就可以,那么如何操作实现这个row limiting?<br>原理就是:<br>首先,不要急于去生成这个@FetchRequest的全部,而是不带初始化的生成。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FetchRequest</span> <span class="keyword">var</span> languages: <span class="type">FetchedResults</span>&lt;<span class="type">ProgrammingLanguage</span>&gt;</span><br></pre></td></tr></table></figure><p>随后,在init初始化中去设置这个@FetchRequest。<br>比如说:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> request: <span class="type">NSFetchRequest</span>&lt;<span class="type">ProgrammingLanguage</span>&gt; <span class="operator">=</span> <span class="type">ProgrammingLanguage</span>.fetchRequest()</span><br><span class="line">    request.fetchLimit <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    _languages <span class="operator">=</span> <span class="type">FetchRequest</span>(fetchRequest: request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是,我们要sorting,甚至是filtering,最后再row limiting,应该这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> request: <span class="type">NSFetchRequest</span>&lt;<span class="type">ProgrammingLanguage</span>&gt; <span class="operator">=</span> <span class="type">ProgrammingLanguage</span>.fetchRequest()</span><br><span class="line">    request.predicate <span class="operator">=</span> <span class="type">NSPredicate</span>(format: <span class="string">&quot;active = true&quot;</span>)</span><br><span class="line"></span><br><span class="line">    request.sortDescriptors <span class="operator">=</span> [</span><br><span class="line">        <span class="type">NSSortDescriptor</span>(keyPath: \<span class="type">ProgrammingLanguage</span>.name, ascending: <span class="literal">true</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    request.fetchLimit <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    _languages <span class="operator">=</span> <span class="type">FetchRequest</span>(fetchRequest: request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对从CoreData中的增删改进行保存操作"><a href="#对从CoreData中的增删改进行保存操作" class="headerlink" title="对从CoreData中的增删改进行保存操作"></a>对从CoreData中的增删改进行保存操作</h3><p>接着上面的“从CoreData中删除一个对象”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try?</span> moc.save()</span><br></pre></td></tr></table></figure><h3 id="对有更改的数据才进行保存操作"><a href="#对有更改的数据才进行保存操作" class="headerlink" title="对有更改的数据才进行保存操作"></a>对有更改的数据才进行保存操作</h3><p>即Conditional saving of NSManagedObjectContext<br>这样用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> moc.hasChanges &#123;</span><br><span class="line">    <span class="keyword">try?</span> moc.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Creating-NSManagedObject-subclasses"><a href="#Creating-NSManagedObject-subclasses" class="headerlink" title="Creating NSManagedObject subclasses"></a>Creating NSManagedObject subclasses</h3><p>CoreData中load到的存储对象等数据,其的属性有很多都是带有optional的,因此要写很多nil coalescing,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">book.name <span class="operator">??</span> <span class="string">&quot;Unknown name&quot;</span></span><br></pre></td></tr></table></figure><p>为了解决要写那么多nil coalescing的烦恼,可以这样做：</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/creating-nsmanagedobject-subclasses">https://www.hackingwithswift.com/books/ios-swiftui/creating-nsmanagedobject-subclasses</a><br>表述相对会比较复杂,所以还是看上述网址的文章吧。(详细讲明了具体原因,也写出了解决的办法)</p></blockquote><h3 id="Entity中特殊属性的建立"><a href="#Entity中特殊属性的建立" class="headerlink" title="Entity中特殊属性的建立"></a>Entity中特殊属性的建立</h3><h4 id="若属性是-含有字符串列表-的情况"><a href="#若属性是-含有字符串列表-的情况" class="headerlink" title="若属性是 含有字符串列表 的情况"></a>若属性是 含有字符串列表 的情况</h4><p>例如，我们要建议一个属性为tag:[String],那么如何在CoreData里建立的Entity中创建这个属性？<br>其实我们是不能在CreoData中建立这样的属性的。<br>我们可以这样,假设我们是从网络上获取到json数据中有这个属性:<br>例如Entity名为CachedUser中,则添加Attribute名为tags,设置types为String,因为没有[String]之类的可以给你选择。<br>再假设我们有Struct为User的结构,里面的tags:[String]是这样的。<br>我们先:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到json数据</span></span><br><span class="line"><span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line"><span class="comment">// decode成User结构</span></span><br><span class="line"><span class="keyword">let</span> users <span class="operator">=</span> <span class="keyword">try</span> decoder.decode([<span class="type">User</span>].<span class="keyword">self</span>, from: data)</span><br></pre></td></tr></table></figure><p>其次,通过<br>await MainActor.run 来调用方法在main thread中更新数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">    updateCache(with: users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们定义的updateCache(with downloadedUsers: [User])方法是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">updateCache</span>(<span class="params">with</span> <span class="params">downloadedUsers</span>: [<span class="type">User</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> downloadedUsers &#123;</span><br><span class="line">        <span class="keyword">let</span> cachedUser <span class="operator">=</span> <span class="type">CachedUser</span>(context: moc)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他属性全部省略了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用user.tags.joined(separator: &quot;,&quot;)方法把这个列表全部串起来,串成一个字符串</span></span><br><span class="line">        cachedUser.tags <span class="operator">=</span> user.tags.joined(separator: <span class="string">&quot;,&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try?</span> moc.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用到了user.tags.joined(separator: “,”)方法把列表中的字符串连接起来,<br>接下来也可以使用components(separatedBy:)把连接起来的字符串再分割成列表。</p><h4 id="若属性是-含有Struct结构的列表-的情况"><a href="#若属性是-含有Struct结构的列表-的情况" class="headerlink" title="若属性是 含有Struct结构的列表 的情况"></a>若属性是 含有Struct结构的列表 的情况</h4><p>假设我们有二个结构分别为User,Friend.<br>而User中有一个属性是friends:[Friend]。<br>而我们在CoreData中的二个Entity分别是CachedUser和CachedFriend,<br>如何在CachedUser中设置这个friends属性？<br>首先,你在attribute类目中是完全不能添加这个friends属性的,所以我们首先要将CachedUser和CachedFriend的Codegen都设置为Manual&#x2F;None.<br>其次,回到CachedUser这个Entity,在Relationship中建立:<br>Relationship:friends Destination:CachedFriend Inverse: 这个还不能建立,等设置完CachedFriend,就会自动选择的。<br>再次,该relationShip的Type一定要选择成”To Many”,如图：<br><img src="/./Images/cachedUserRelationship.png" alt="CachedUserRelationship"><br><img src="/./Images/cachedUserType.png" alt="CachedUserType"><br>那么,也要在CachedFriend这个Entity,在Relationship中建立:<br>Relationship:user Destination:CachedUser<br>这里Inverse:选择friends，则上面的CachedUser的Inverse就会自动指向user,那就会让两个entity的各一个relationship互相指向对方。<br>此外,别忘了该relationship的Type一定要选择成”To One”,如图:<br><img src="/./Images/cachedFriendRelationship.png" alt="CachedFriendRelationship"><br><img src="/./Images/cachedFriendType.png" alt="CachedFriendType"><br>此时,菜单中Editor-&gt;Create NSManagedObject Subclass,会分别为该二个Entity建立两个文件,是CachedUser+CoreDataClass &#x2F; CachedUser+CoreDataProperties &#x2F; CachedFriend+CoreDataClass &#x2F; CachedFriend+CoreDataProperties。<br>在CachedUser+CoreDataProperties中,我们可以看到:@NSManaged public var friends: NSSet?<br>我们需要为其建立一个array属性,便于我们调用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> friendsArray: [<span class="type">CachedFriend</span>] &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> <span class="operator">=</span> friends <span class="keyword">as?</span> <span class="type">Set</span>&lt;<span class="type">CachedFriend</span>&gt; <span class="operator">??</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">set</span>.sorted &#123;</span><br><span class="line">        <span class="variable">$0</span>.wrappedName <span class="operator">&lt;</span> <span class="variable">$1</span>.wrappedName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么,最后就是将json数据转成struct再转成CoreData的entity的属性了:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到json数据</span></span><br><span class="line"><span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line"><span class="comment">// decode成User结构</span></span><br><span class="line"><span class="keyword">let</span> users <span class="operator">=</span> <span class="keyword">try</span> decoder.decode([<span class="type">User</span>].<span class="keyword">self</span>, from: data)</span><br></pre></td></tr></table></figure><p>其次,通过<br>await MainActor.run 来调用方法在main thread中更新数据:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">    updateCache(with: users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义的updateCache(with downloadedUsers: [User])方法是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">updateCache</span>(<span class="params">with</span> <span class="params">downloadedUsers</span>: [<span class="type">User</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> downloadedUsers &#123;</span><br><span class="line">        <span class="keyword">let</span> cachedUser <span class="operator">=</span> <span class="type">CachedUser</span>(context: moc)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 其他属性全部省略了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> cachedUser <span class="operator">=</span> <span class="type">CachedUser</span>(context: moc)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他属性就省略了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> friend <span class="keyword">in</span> user.friends &#123;</span><br><span class="line">            <span class="keyword">let</span> cachedFriend <span class="operator">=</span> <span class="type">CachedFriend</span>(context: moc)</span><br><span class="line">            cachedFriend.id <span class="operator">=</span> friend.id</span><br><span class="line">            cachedFriend.name <span class="operator">=</span> friend.name</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// addToFriends是在CachedUser+CoreDataProperties中已自动建立好的,</span></span><br><span class="line">            <span class="comment">// 之所以会自动建立好,就是因为之前设置的一系列relationship中的&quot;To Many&quot;/&quot;To One&quot;的结果</span></span><br><span class="line">            cachedUser.addToFriends(cachedFriend)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try?</span> moc.save()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上,具体见 FriendFace 项目。</p><h1 id="-7"><a href="#-7" class="headerlink" title=""></a></h1><h3 id="ScenePhase"><a href="#ScenePhase" class="headerlink" title="ScenePhase"></a>ScenePhase</h3><blockquote><p><a href="https://developer.apple.com/documentation/swiftui/scenephase">https://developer.apple.com/documentation/swiftui/scenephase</a></p></blockquote><p>It’s a enumeration.<br>An indication of a scene’s operational state.</p><p>取得scenePhase:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">private</span> <span class="keyword">var</span> scenePhase</span><br></pre></td></tr></table></figure><p>具体的状态有：<br>.active<br>.inactive<br>.background<br>三种。</p><p>测试下来,进入scene时是.active状态,按住home键后进入.inactive状态,上划或者点击桌面的话进入.background状态.</p><p>.background的使用场景:(onChange监测整个app都被放入后台的时候)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">private</span> <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">MyRootView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: scenePhase) &#123; phase <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> phase <span class="operator">==</span> .background &#123;</span><br><span class="line">                <span class="comment">// Perform cleanup when all scenes within</span></span><br><span class="line">                <span class="comment">// MyApp go to the background.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又可以监测scene被放入后台的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyScene</span>: <span class="title class_">Scene</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">private</span> <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">MyRootView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        .onChange(of: scenePhase) &#123; phase <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> phase <span class="operator">==</span> .background &#123;</span><br><span class="line">                <span class="comment">// Perform cleanup when all scenes within</span></span><br><span class="line">                <span class="comment">// MyScene go to the background.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监测view是active还是inactive的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">MyView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> model: <span class="type">DataModel</span></span><br><span class="line">    <span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">private</span> <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TimerView</span>()</span><br><span class="line">            .onChange(of: scenePhase) &#123; phase <span class="keyword">in</span></span><br><span class="line">                model.isTimerRunning <span class="operator">=</span> (phase <span class="operator">==</span> .active)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="available"><a href="#available" class="headerlink" title="#available"></a>#available</h3><p>因为用户ios系统版本的差异,所以引入:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">#available</span>(<span class="keyword">iOS</span> <span class="number">15</span>, <span class="operator">*</span>) &#123;</span><br><span class="line">    content</span><br><span class="line">    .listRowSeparator(.hidden)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="available-1"><a href="#available-1" class="headerlink" title="@available"></a>@available</h3><p>You can mark a function or an entire type as available for a specific operating system using the @available attribute. The function defined below is accessible only in iOS 15.1 and later:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@available</span>(<span class="keyword">iOS</span> <span class="number">15.1</span>, <span class="operator">*</span>)</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">setupGroupSession</span>() &#123;<span class="operator">...</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Task-x2F-task"><a href="#Task-x2F-task" class="headerlink" title="Task &#x2F; .task"></a>Task &#x2F; .task</h3><p>注意一点:<br>如果a是一个异步方法，调用的时候，必须在一个异步的上下文中，具体英语是:<br>you can call an async function only from an asynchronous context.<br>所以这时候就需要在代码中使用到Task{} 或者 .task{}</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>使用Task来调取异步函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">   <span class="meta">@StateObject</span> <span class="keyword">var</span> model <span class="operator">=</span> <span class="type">ViewModel</span>()</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">      <span class="type">NavigationView</span> &#123;</span><br><span class="line">         <span class="type">List</span> &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">               <span class="type">Task</span> &#123;</span><br><span class="line">                  <span class="keyword">await</span> model.refresh()</span><br><span class="line">               &#125;</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">               <span class="type">Text</span>(<span class="string">&quot;Load Participants&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ForEach</span>(model.participants) &#123; participant <span class="keyword">in</span></span><br><span class="line">               <span class="operator">...</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="task"><a href="#task" class="headerlink" title=".task"></a>.task</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">List</span>(results, id:\.id) &#123; item <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;From:<span class="subst">\(item.from)</span>&quot;</span>)</span><br><span class="line">            .font(.headline)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;message:<span class="subst">\(item.message)</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .task修饰符只能用在iOS15.0以上</span></span><br><span class="line">    <span class="comment">// SwiftUI provides a task modifier that you can use to execute an asynchronous function when a view appears</span></span><br><span class="line">    <span class="comment">// The system automatically cancels tasks when a view disappears.</span></span><br><span class="line">    .task &#123;</span><br><span class="line">        <span class="comment">// loadData()是异步方法,所以需要用await</span></span><br><span class="line">        <span class="keyword">await</span> loadData()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a>@discardableResult</h3><p>某些方法等返回的值,有时候不需要用到,但不用的话会收到warnings,这时候可以使用@discardableResult来取消warnings.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@discardableResult</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">save</span>(<span class="params">scrums</span>: [<span class="type">DailyScrum</span>]) <span class="keyword">async</span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-DEBUG-x2F-endif"><a href="#if-DEBUG-x2F-endif" class="headerlink" title="#if DEBUG &#x2F; #endif"></a>#if DEBUG &#x2F; #endif</h3><p>The #if DEBUG flag is a compilation directive that prevents the enclosed code from compiling when you build the app for release.</p><h1 id="opaque-return-types"><a href="#opaque-return-types" class="headerlink" title="opaque return types"></a>opaque return types</h1><p>例如Equatable协议(Both Int and Bool conform to a common Swift protocol called Equatable, which means “can be compared for equality.”),因为其是“protocol ‘Equatable’ can only be used as a generic constraint because it has Self or associated type requirements”.(就是基类的意思)<br>所以一个property或者function不能直接返回Equatable，而是要做一个处理，这个处理就是some。 -&gt; some Equatable 。<br>这种情况也出现在View中,我们最多看到的 var body: some View {} 也是一样的道理。(So, when you see some View in your SwiftUI code, it’s effectively us telling Swift “this is going to send back some kind of view to lay out, but I don’t want to write out the exact thing – you figure it out for yourself.”)</p><h3 id="function中接受多个function参数的情况下-这些trailing-closures的格式是什么样子的？"><a href="#function中接受多个function参数的情况下-这些trailing-closures的格式是什么样子的？" class="headerlink" title="function中接受多个function参数的情况下,这些trailing closures的格式是什么样子的？"></a>function中接受多个function参数的情况下,这些trailing closures的格式是什么样子的？</h3><p>格式的样例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要调用的doImportantWork方法:</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">doImportantWork</span>(<span class="params">first</span>: ()-&gt; <span class="type">Void</span>, <span class="params">second</span>: ()-&gt; <span class="type">Void</span>, <span class="params">third</span>: ()-&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;About to start first work.&quot;</span>)</span><br><span class="line">    first()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;About to start second work.&quot;</span>)</span><br><span class="line">    second()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;About to start third work.&quot;</span>)</span><br><span class="line">    third()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果调用该doImportantWord方法,并将三个参数做trailing closures的格式</span></span><br><span class="line">doImportantWork &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is the first work.&quot;</span>)</span><br><span class="line">&#125; second: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is the second work.&quot;</span>)</span><br><span class="line">&#125; third: &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is the third work.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上除了第一个func不需要写名字,后面的second和third都要写名字</span></span><br></pre></td></tr></table></figure><p>you can make your function accept multiple function parameters if you want, in which case you can specify multiple trailing closures.<br>When it comes to calling that, the first trailing closure is identical to what we’ve used already, but the second and third are formatted differently: you end the brace from the previous closure, then write the external parameter name and a colon, then start another brace</p><h3 id="the-nil-coalescing-operator-即"><a href="#the-nil-coalescing-operator-即" class="headerlink" title="the nil coalescing operator 即 ??"></a>the nil coalescing operator 即 ??</h3><p>例一</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> captains <span class="operator">=</span> [</span><br><span class="line">    <span class="string">&quot;Enterprise&quot;</span>: <span class="string">&quot;Picard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Voyager&quot;</span>: <span class="string">&quot;Janeway&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Defiant&quot;</span>: <span class="string">&quot;Sisko&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> new <span class="operator">=</span> captains[<span class="string">&quot;Serenity&quot;</span>] <span class="operator">??</span> <span class="string">&quot;N/A&quot;</span></span><br><span class="line"><span class="comment">// 也可以写成下面这样:</span></span><br><span class="line"><span class="comment">// let new = captains[&quot;Serenity&quot;, default: &quot;N/A&quot;]</span></span><br></pre></td></tr></table></figure><p>例二</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tvShows <span class="operator">=</span> [<span class="string">&quot;Archer&quot;</span>, <span class="string">&quot;Babylon 5&quot;</span>, <span class="string">&quot;Ted Lasso&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> favorite <span class="operator">=</span> tvShows.randomElement() <span class="operator">??</span> <span class="string">&quot;None&quot;</span></span><br></pre></td></tr></table></figure><p>例三</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> author: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> book <span class="operator">=</span> <span class="type">Book</span>(title: <span class="string">&quot;Beowulf&quot;</span>, author: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">let</span> author <span class="operator">=</span> book.author <span class="operator">??</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line"><span class="built_in">print</span>(author)</span><br><span class="line">这样author就是一个<span class="type">String</span>,而不是一个<span class="keyword">optional</span></span><br></pre></td></tr></table></figure><p>例四</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> savedData <span class="operator">=</span> first() <span class="operator">??</span> second() <span class="operator">??</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Handle-function-failure-with-optionals"><a href="#Handle-function-failure-with-optionals" class="headerlink" title="Handle function failure with optionals"></a>Handle function failure with optionals</h3><p>We can run throwing functions using do, try, and catch in Swift,<br>but an alternative is to use try? to convert a throwing function call into an optional.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runRiskyFunction()中一定是定义到了throws,</span></span><br><span class="line"><span class="comment">// 才能使用到 try / try? / try!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// try 一定要配合 do&#123;&#125;catch&#123;&#125; 使用</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> runRiskyFunction()</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">// it failed!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try?</span> runRiskyFunction() &#123;</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// try? 的情况下,若出错,即返回nil,这种区别于try,它并不注重于出现的error;若不出错,返回的是Optional,切记！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若使用 try! 的情况下,出错即会让程序崩溃</span></span><br></pre></td></tr></table></figure><h3 id="FocusState"><a href="#FocusState" class="headerlink" title="@FocusState"></a>@FocusState</h3><p>it’s specifically designed to handle input focus in our UI</p><p>example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">FocusStateExample</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> checkAmount: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">// 不需要对amountIsFocused设置值,系统自动认定,focus时为true,失去focus时为false</span></span><br><span class="line">    <span class="meta">@FocusState</span> <span class="keyword">private</span> <span class="keyword">var</span> amountIsFocused: <span class="type">Bool</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">Form</span> &#123;</span><br><span class="line">                <span class="type">Section</span> &#123;</span><br><span class="line">                    <span class="comment">// 试了下Locale.current.currencyCode就是美元,可以直接使用&quot;CHY&quot;/(&quot;JPY&quot;)等等</span></span><br><span class="line">                    <span class="type">TextField</span>(<span class="string">&quot;Amount&quot;</span>, value: <span class="variable">$checkAmount</span>, format: .currency(code: <span class="type">Locale</span>.current.currencyCode <span class="operator">??</span> <span class="string">&quot;USD&quot;</span>))</span><br><span class="line">                        <span class="comment">// 键盘类型为数字键盘</span></span><br><span class="line">                        .keyboardType(.numberPad)</span><br><span class="line">                        <span class="comment">// 绑定的$amountIsFocused决定了是否显示键盘</span></span><br><span class="line">                        .focused(<span class="variable">$amountIsFocused</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Section</span> &#123;</span><br><span class="line">                    <span class="type">Text</span>(checkAmount, format: .currency(code: <span class="type">Locale</span>.current.currencyCode <span class="operator">??</span> <span class="string">&quot;USD&quot;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Title&quot;</span>)</span><br><span class="line">            .toolbar &#123;</span><br><span class="line">                <span class="comment">// .keyboard 即在显示的键盘上添加按钮</span></span><br><span class="line">                <span class="type">ToolbarItemGroup</span>(placement: .keyboard) &#123;</span><br><span class="line">                    <span class="comment">// 因为数字键盘无法从屏幕上取消,</span></span><br><span class="line">                    <span class="comment">// 所以添加Button来控制amountIsFocused</span></span><br><span class="line">                    <span class="type">Spacer</span>()</span><br><span class="line"></span><br><span class="line">                    <span class="type">Button</span>(<span class="string">&quot;Done&quot;</span>) &#123;</span><br><span class="line">                        amountIsFocused <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shuffled"><a href="#shuffled" class="headerlink" title="shuffled()"></a>shuffled()</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countries <span class="operator">=</span> [<span class="string">&quot;Estonia&quot;</span>, <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Germany&quot;</span>, <span class="string">&quot;Ireland&quot;</span>, <span class="string">&quot;Italy&quot;</span>, <span class="string">&quot;Nigeria&quot;</span>, <span class="string">&quot;Poland&quot;</span>, <span class="string">&quot;Russia&quot;</span>, <span class="string">&quot;Spain&quot;</span>, <span class="string">&quot;UK&quot;</span>, <span class="string">&quot;US&quot;</span>].shuffled()</span><br></pre></td></tr></table></figure><p>As you can see, the shuffled() method automatically takes care of randomizing the array order for us.</p><h3 id="environment-modifier-vs-regular-modifier"><a href="#environment-modifier-vs-regular-modifier" class="headerlink" title="environment modifier vs regular modifier"></a>environment modifier vs regular modifier</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Gryffindor&quot;</span>)</span><br><span class="line">        .font(.largeTitle)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hufflepuff&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Ravenclaw&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Slytherin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.font(.title)</span><br></pre></td></tr></table></figure><p>为什么Text(“Gryffindor”)的font不是.title大小的?<br>文章中解释是:<br>font() is an environment modifier, which means the Gryffindor text view can override it with a custom font.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Gryffindor&quot;</span>)</span><br><span class="line">        .blur(radius: <span class="number">0</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hufflepuff&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Ravenclaw&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Slytherin&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.blur(radius: <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>为什么Text(“Gryffindor”)的模糊度和其他的不一样？<br>文章中解释是：<br>That won’t work the same way: blur() is a regular modifier, so any blurs applied to child views are added to the VStack blur rather than replacing it.</p><h3 id="Views-as-properties"><a href="#Views-as-properties" class="headerlink" title="Views as properties"></a>Views as properties</h3><p>create computed properties of some View:</p><p>第一种,放入一个stack中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spells: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">VStack</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Lumos&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Obliviate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种,放入一个Group中:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spells: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Group</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Lumos&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Obliviate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种,使用@ViewBuilder:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ViewBuilder</span> <span class="keyword">var</span> spells: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Lumos&quot;</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Obliviate&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但第三种中,只显示了一个Text。</p><h1 id="Core-ML"><a href="#Core-ML" class="headerlink" title="Core ML"></a>Core ML</h1><p>XCode中可以使用的 Core ML。ML即Machine Learning。<br>Core ML is capable of handling a variety of training tasks, such as recognizing images, sounds, and even motion.</p><p>如何创建项目：<br>Open Developer Tool &gt; Create ML<br>可以看到有非常多的templates可供选择，比如Tabular Regression。</p><h2 id="Tabular-Regression"><a href="#Tabular-Regression" class="headerlink" title="Tabular Regression"></a>Tabular Regression</h2><p>Please choose Tabular Regression and press Next. For the project name please enter name like BetterRest, then press Next, select your desktop, then press Create.</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/training-a-model-with-create-ml">https://www.hackingwithswift.com/books/ios-swiftui/training-a-model-with-create-ml</a></p></blockquote><p>The first step is to provide Create ML with some training data. 像例子里提供了一个BetterRest.csv,格式是:<br>wakeestimatedSleepcoffeeactualSleep<br>315009            6    38230<br>324005            2    20180<br>…<br>So, in Create ML look under Data and select “Select…” under the Training Data title. When you press “Select…” again it will open a file selection window, and you should choose BetterRest.csv.<br>The next job is to decide the target, which is the value we want the computer to learn to predict, and the features, which are the values we want the computer to inspect in order to predict the target. For example, if we chose how much sleep someone thought they needed and how much sleep they actually needed as features, we could train the computer to predict how much coffee they drink.<br>In this instance, I’d like you to choose “actualSleep” for the target, which means we want the computer to learn how to predict how much sleep they actually need. Now press Choose Features, and select all three options: wake, estimatedSleep, and coffee – we want the computer to take all three of those into account when producing its predictions.<br>Below the Select Features button is a dropdown button for the algorithm, and there are five options: Automatic, Random Forest, Boosted Tree, Decision Tree, and Linear Regression. Each takes a different approach to analyzing data, but helpfully there is an Automatic option that attempts to choose the best algorithm automatically. It’s not always correct, and in fact it does limit the options we have quite dramatically, but for this project it’s more than good enough.</p><p>When you’re ready, click the Train button in the window title bar. After a couple of seconds – our data is pretty small! – it will complete, and you’ll see a big checkmark telling you that everything went to plan.</p><p>To see how the training went, select the Evaluation tab then choose Validation to see some result metrics. The value we care about is called Root Mean Squared Error, and you should get a value around about 170. This means on average the model was able to predict suggested accurate sleep time with an error of only 170 seconds, or three minutes.</p><p>Tip: Create ML provides us with both Training and Validation statistics, and both are important. When we asked it to train using our data, it automatically split the data up: some to use for training its machine learning model, but then it held back a chunk for validation. This validation data is then used to check its model: it makes a prediction based on the input, then checks how far that prediction was off the real value that came from the data.</p><p>Even better, if you go to the Output tab you’ll see an our finished model has a file size of 544 bytes or so. Create ML has taken 180KB of data, and condensed it down to just 544 bytes – almost nothing.</p><p>Now that our model is trained, I’d like you to press the Get button to export it to your desktop, so we can use it in code.</p><h2 id="Connecting-SwiftUI-to-Core-ML"><a href="#Connecting-SwiftUI-to-Core-ML" class="headerlink" title="Connecting SwiftUI to Core ML"></a>Connecting SwiftUI to Core ML</h2><p>导出的模型是以.mlmodel结尾的文件,把它放入xcode的项目中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreML</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// Configuration是为了让你自定义的时候准备的,一般都用不到</span></span><br><span class="line">    <span class="keyword">let</span> config <span class="operator">=</span> <span class="type">MLModelConfiguration</span>()</span><br><span class="line">    <span class="comment">// using Core ML can throw errors when loading the model.</span></span><br><span class="line">    <span class="comment">// 导入的文件名是SleepCalculator.mlmodel，</span></span><br><span class="line">    <span class="comment">// 所以在导入的同时就会创建同名的class</span></span><br><span class="line">    <span class="keyword">let</span> model <span class="operator">=</span> <span class="keyword">try</span> <span class="type">SleepCalculator</span>(configuration: config)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里的wakeUp是类似Date.now一样的变量数据</span></span><br><span class="line">    <span class="keyword">let</span> components <span class="operator">=</span> <span class="type">Calendar</span>.current.dateComponents([.hour, .minute], from: wakeUp)</span><br><span class="line">    <span class="keyword">let</span> hour <span class="operator">=</span> (components.hour <span class="operator">??</span> <span class="number">0</span>) <span class="operator">*</span> <span class="number">60</span> <span class="operator">*</span> <span class="number">60</span></span><br><span class="line">    <span class="keyword">let</span> minute <span class="operator">=</span> (components.minute <span class="operator">??</span> <span class="number">0</span>) <span class="operator">*</span> <span class="number">60</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 套入项目数据并使用MachineLearning来预测</span></span><br><span class="line">    <span class="keyword">let</span> prediction <span class="operator">=</span> <span class="keyword">try</span> model.prediction(wake: <span class="type">Double</span>(hour <span class="operator">+</span> minute), estimatedSleep: sleepAmount, coffee: <span class="type">Double</span>(coffeeAmount))</span><br><span class="line">    <span class="comment">// wakeUp是醒来的时间,prediction.actualSleep是预测要睡多少时间,就可以算出sleepTime即几点睡觉</span></span><br><span class="line">    <span class="keyword">let</span> sleepTime <span class="operator">=</span> wakeUp <span class="operator">-</span> prediction.actualSleep</span><br><span class="line">    </span><br><span class="line">    alertTitle <span class="operator">=</span> <span class="string">&quot;Your ideal bedtime is…&quot;</span></span><br><span class="line">    alertMessage <span class="operator">=</span> sleepTime.formatted(date: .omitted, time: .shortened)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    alertTitle <span class="operator">=</span> <span class="string">&quot;Error&quot;</span></span><br><span class="line">    alertMessage <span class="operator">=</span> <span class="string">&quot;Sorry, there was a problem calculating your bedtime.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="clipped-x2F-cornerRadius-x2F-clipShape-style"><a href="#clipped-x2F-cornerRadius-x2F-clipShape-style" class="headerlink" title="clipped() &#x2F; cornerRadius(:) &#x2F; clipShape(:style)"></a>clipped() &#x2F; cornerRadius(<em>:) &#x2F; clipShape(</em>:style)</h1><p>clipped()视图修改器将视图的绘制限制在其绑定frame内，其他所有内容将被隐藏。<br>SwiftUI提供了两个clipped()替代方法:cornerRadius(<em>:)和clipShape(</em>:style)。<br>特别是clipShape(_:style),可以使用任何图形,比如Circle()或者五角星Star().</p><h1 id="针对不同平台的代码适用"><a href="#针对不同平台的代码适用" class="headerlink" title="针对不同平台的代码适用"></a>针对不同平台的代码适用</h1><h3 id="对iOS-x2F-macOS-x2F-tvOS-x2F-watchOS-方法的自定义和适用"><a href="#对iOS-x2F-macOS-x2F-tvOS-x2F-watchOS-方法的自定义和适用" class="headerlink" title="对iOS() &#x2F; macOS() &#x2F; tvOS() &#x2F; watchOS() 方法的自定义和适用"></a>对iOS() &#x2F; macOS() &#x2F; tvOS() &#x2F; watchOS() 方法的自定义和适用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">iOS</span>&lt;<span class="type">Content</span>: <span class="type">View</span>&gt;(<span class="keyword">_</span> <span class="params">modifier</span>: (<span class="keyword">Self</span>) -&gt; <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">#if</span> os(iOS)</span><br><span class="line">        <span class="keyword">return</span> modifier(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">macOS</span>&lt;<span class="type">Content</span>: <span class="type">View</span>&gt;(<span class="keyword">_</span> <span class="params">modifier</span>: (<span class="keyword">Self</span>) -&gt; <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">#if</span> os(macOS)</span><br><span class="line">        <span class="keyword">return</span> modifier(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">tvOS</span>&lt;<span class="type">Content</span>: <span class="type">View</span>&gt;(<span class="keyword">_</span> <span class="params">modifier</span>: (<span class="keyword">Self</span>) -&gt; <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">#if</span> os(tvOS)</span><br><span class="line">        <span class="keyword">return</span> modifier(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">watchOS</span>&lt;<span class="type">Content</span>: <span class="type">View</span>&gt;(<span class="keyword">_</span> <span class="params">modifier</span>: (<span class="keyword">Self</span>) -&gt; <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">#if</span> os(watchOS)</span><br><span class="line">        <span class="keyword">return</span> modifier(<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际的使用:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">    .iOS &#123; <span class="variable">$0</span>.padding(<span class="number">10</span>) &#125;</span><br></pre></td></tr></table></figure><h1 id="-8"><a href="#-8" class="headerlink" title=""></a></h1><h3 id="confirmationDialog-–-跳出带选项的确认菜单"><a href="#confirmationDialog-–-跳出带选项的确认菜单" class="headerlink" title=".confirmationDialog – 跳出带选项的确认菜单"></a>.confirmationDialog – 跳出带选项的确认菜单</h3><p>与.alert()修饰符的用法类似,作用也类似。<br>.alert允许我们在上面有一到二个按钮,<br>而.confirmationDialog允许我们加更多的按钮,而且是从bottom向上升起来一部分,不像alert是直接在屏幕中间霸屏。<br>p.s.iOS14之前版本的系统,只能使用ActionSheet。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> showingConfirmation <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> backgroundColor <span class="operator">=</span> <span class="type">Color</span>.white</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">            .background(backgroundColor)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                showingConfirmation <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            .confirmationDialog(<span class="string">&quot;Change background&quot;</span>, isPresented: <span class="variable">$showingConfirmation</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Red&quot;</span>) &#123; backgroundColor <span class="operator">=</span> .red &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Green&quot;</span>) &#123; backgroundColor <span class="operator">=</span> .green &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Blue&quot;</span>) &#123; backgroundColor <span class="operator">=</span> .blue &#125;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, role: .cancel) &#123; &#125;</span><br><span class="line">            &#125; message: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Select a new color&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><h3 id="Dictionary-grouping-by"><a href="#Dictionary-grouping-by" class="headerlink" title="Dictionary(grouping:by:)"></a>Dictionary(grouping:by:)</h3><p>使用Dictionary对Array里面Struct中的某个property进行分组<br>例如数据是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ExpenseItem</span>: <span class="title class_">Identifiable</span>, <span class="title class_">Codable</span>, <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">UUID</span></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> type: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> amount: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">UUID</span>, <span class="params">name</span>: <span class="type">String</span>, <span class="params">type</span>: <span class="type">String</span>, <span class="params">amount</span>: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.type <span class="operator">=</span> type</span><br><span class="line">        <span class="keyword">self</span>.amount <span class="operator">=</span> amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expenses</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> items: [<span class="type">ExpenseItem</span>] <span class="operator">=</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;a&quot;</span>, type: <span class="string">&quot;Personal&quot;</span>, amount: <span class="number">1.0</span>))</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;b&quot;</span>, type: <span class="string">&quot;Business&quot;</span>, amount: <span class="number">2.0</span>))</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;c&quot;</span>, type: <span class="string">&quot;Personal&quot;</span>, amount: <span class="number">3.0</span>))</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;d&quot;</span>, type: <span class="string">&quot;Business&quot;</span>, amount: <span class="number">4.0</span>))</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;e&quot;</span>, type: <span class="string">&quot;Personal&quot;</span>, amount: <span class="number">5.0</span>))</span><br><span class="line">        items.append(<span class="type">ExpenseItem</span>(id: <span class="type">UUID</span>(), name:<span class="string">&quot;f&quot;</span>, type: <span class="string">&quot;Business&quot;</span>, amount: <span class="number">6.0</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> expenses <span class="operator">=</span> <span class="type">Expenses</span>()</span><br></pre></td></tr></table></figure><p>目标:<br>要对expenses中各个ExpenseItem的type进行分类,type为”Personal”、”Business”的分开显示:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要对expenses中的type进行分组:</span></span><br><span class="line"><span class="comment">// Dictionary(grouping:by:)</span></span><br><span class="line"><span class="keyword">let</span> dictionaryByType <span class="operator">=</span> <span class="type">Dictionary</span>(grouping: expenses.items, by: &#123; <span class="variable">$0</span>.type &#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(of: dictionaryByType)) <span class="comment">// Dictionary&lt;String, Array&lt;ExpenseItem&gt;&gt;</span></span><br><span class="line"><span class="keyword">let</span> res <span class="operator">=</span> [dictionaryByType[<span class="string">&quot;Personal&quot;</span>], dictionaryByType[<span class="string">&quot;Business&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(of: res)) <span class="comment">// Array&lt;Optional&lt;Array&lt;ExpenseItem&gt;&gt;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(res.count)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h1><h2 id="做数据表格-与excel类似。"><a href="#做数据表格-与excel类似。" class="headerlink" title="做数据表格,与excel类似。"></a>做数据表格,与excel类似。</h2><p>1.后续设置LazyVGrid的情况,代表每行有三个单元格;若是LazyHGrid,代表每列有三个单元格:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout <span class="operator">=</span> [</span><br><span class="line">    <span class="type">GridItem</span>(.fixed(<span class="number">80</span>)),</span><br><span class="line">    <span class="type">GridItem</span>(.fixed(<span class="number">80</span>)),</span><br><span class="line">    <span class="type">GridItem</span>(.fixed(<span class="number">80</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>2.每个单元格的适应大小为不小于80.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout <span class="operator">=</span> [</span><br><span class="line">    <span class="type">GridItem</span>(.adaptive(minimum: <span class="number">80</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>3.每个单元格的适应大小为不小于80也不大于120.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> layout <span class="operator">=</span> [</span><br><span class="line">    <span class="type">GridItem</span>(.adaptive(minimum: <span class="number">80</span>, maximum: <span class="number">120</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>二、再在ScrollView中设置LazyVGrid&#x2F;LazyHGrid</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollView</span> &#123;</span><br><span class="line">    <span class="type">LazyVGrid</span>(columns: layout) &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Item <span class="subst">\(<span class="variable">$0</span>)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者:<br>ScrollView {<br>    LazyHGrid(columns: layout) {<br>        ForEach(0..&lt;1000) {<br>            Text(“Item ($0)”)<br>        }<br>    }<br>}</p><h1 id="ColorScheme"><a href="#ColorScheme" class="headerlink" title="ColorScheme"></a>ColorScheme</h1><h2 id="设置ShapeStyle中的Color的扩展色"><a href="#设置ShapeStyle中的Color的扩展色" class="headerlink" title="设置ShapeStyle中的Color的扩展色"></a>设置ShapeStyle中的Color的扩展色</h2><p>设置了两个颜色,一个darkBackground和另一个lightBackground.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">ShapeStyle</span> <span class="title class_">where</span> <span class="title class_">Self</span> == <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> darkBackground: <span class="type">Color</span> &#123;</span><br><span class="line">        <span class="type">Color</span>(red: <span class="number">0.1</span>, green: <span class="number">0.1</span>, blue: <span class="number">0.2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> lightBackground: <span class="type">Color</span> &#123;</span><br><span class="line">        <span class="type">Color</span>(red: <span class="number">0.2</span>, green: <span class="number">0.2</span>, blue: <span class="number">0.3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这两个颜色的效果图:(主背景色为darkBackground;文字背景色为lightBackground)<br><img src="/./Images/Moonshot.png" alt="Moonshot"></p><h2 id="告诉系统使用的管用模式是light-mode-还是-dark-mode"><a href="#告诉系统使用的管用模式是light-mode-还是-dark-mode" class="headerlink" title="告诉系统使用的管用模式是light mode 还是 dark mode"></a>告诉系统使用的管用模式是light mode 还是 dark mode</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">ScrollView</span> &#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">    .navigationTitle(<span class="string">&quot;Moonshoot&quot;</span>)</span><br><span class="line">    .preferredColorScheme(.dark)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里选择了dark模式,那么navigationTitle的颜色就会始终是white了。</p><h1 id="Equatable协议"><a href="#Equatable协议" class="headerlink" title="Equatable协议"></a>Equatable协议</h1><p>比如定义了一个数据结构Struct Item,又定义了一个类Class Items,且Items里面包含一个属性items:[Item]。<br>当需要判断某个item是否属于Items,就需要该Item遵守Equatable协议，也就是能让它去比较，接下来就可以用：<br>Items().items.firstIndex(of: item)。<br>比如下面：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Activity</span>: <span class="title class_">Codable</span>, <span class="title class_">Identifiable</span>, <span class="title class_">Equatable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> completionCount <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> example <span class="operator">=</span> <span class="type">Activity</span>(title: <span class="string">&quot;Example Activity&quot;</span>, description: <span class="string">&quot;This is a test activity.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Activities</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> activities: [<span class="type">Activity</span>] &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> encoded <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONEncoder</span>().encode(activities) &#123;</span><br><span class="line">                <span class="type">UserDefaults</span>.standard.set(encoded, forKey: <span class="string">&quot;Activities&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> saved <span class="operator">=</span> <span class="type">UserDefaults</span>.standard.data(forKey: <span class="string">&quot;Activities&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> decoded <span class="operator">=</span> <span class="keyword">try?</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Activity</span>].<span class="keyword">self</span>, from: saved) &#123;</span><br><span class="line">                activities <span class="operator">=</span> decoded</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activities <span class="operator">=</span> []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行判断,而该判断是基于Activity遵循Equatable协议的</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index <span class="operator">=</span> data.activities.firstIndex(of: activity) &#123;</span><br><span class="line">    data.activities[index] <span class="operator">=</span> newActivity</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="init"><a href="#init" class="headerlink" title="init"></a>init</h1><h2 id="Designated-Initializers-指定构造器"><a href="#Designated-Initializers-指定构造器" class="headerlink" title="Designated Initializers (指定构造器)"></a>Designated Initializers (指定构造器)</h2><p>例如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span>(parameters) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class类型的构造器代理规则"><a href="#class类型的构造器代理规则" class="headerlink" title="class类型的构造器代理规则"></a>class类型的构造器代理规则</h2><p>规则有三条，分别是：</p><ol><li>指定构造器必须调用其直接父类的的指定构造器。</li><li>便利构造器必须调用同类中定义的其它构造器。</li><li>便利构造器最后必须调用指定构造器。</li></ol><p>总结一下就是：指定构造器必须总是向上代理(去父类)；便利构造器必须总是横向代理(在本类)。<br>如下图所示:<br><img src="/Images/DesignatedConvenience.png" alt="DesignatedConvenience.png"></p><h2 id="构造器的两个阶段"><a href="#构造器的两个阶段" class="headerlink" title="构造器的两个阶段"></a>构造器的两个阶段</h2><p>Swift 中类的构造过程包含两个阶段。<br>第一个阶段：给类中的每个存储属性赋初始值。只要每个存储属性初始值被赋值;<br>第二阶段开始，它给每个类一次机会，在新实例准备使用之前进一步自定义它们的存储属性。</p><p>Swift 通过4步安全检查来确定构造器两个阶段的成功执行：<br>安全检查1:指定构造器必须在完成本类所有存储属性赋值之后，才能向上代理到父类的构造器。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> head <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> foot: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        foot <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的super.init()会报错，因为此时 Dog 的 foot 还没有被赋值。将 init() 改为下面即可：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    foot <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="comment">//这句也可以省略，它默认是隐式调用的。</span></span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全检查2:指定构造器必须在为继承的属性设置新值之前向上代理调用父类构造器。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这时，你必须显式的调用super.init()，因为你要修改继承属性- head 的值</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">    foot <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    head <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全检查3:便利构造器必须先调用其他构造器，再为任意属性（包括所有同类中定义的）赋新值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">foot</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">//先调用其他构造器，如果此处不调用会编译出错</span></span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    <span class="comment">//再为任意属性（包括所有同类中定义的）赋新值</span></span><br><span class="line">    <span class="keyword">self</span>.foot <span class="operator">=</span> foot</span><br><span class="line">    head <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全检查4：构造器在第一阶段构造完成之前，不能调用任何实例方法，不能读取任何实例属性的值，不能引用 self 作为一个值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>: <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> foot: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        foot <span class="operator">=</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        head <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">        <span class="comment">// 如果上面的未完成，是不能调用run()的，因为self还没有完整的创建</span></span><br><span class="line">        run()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>() &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在看一下阶段一和阶段二的完整流程：<br>阶段 1 - 自下而上</p><ul><li>类的某个指定构造器或便利构造器被调用。</li><li>完成类的新实例内存的分配，但此时内存还没有被初始化。</li><li>指定构造器确保其所在类引入的所有存储型属性都已赋初值。<br>存储型属性所属的内存完成初始化。</li><li>指定构造器切换到父类的构造器，对其存储属性完成相同的任务。</li><li>这个过程沿着类的继承链一直往上执行，直到到达继承链的最顶部。</li><li>当到达了继承链最顶部，而且继承链的最后一个类已确保所有的存储型属性都已经赋值，<br>这个实例的内存被认为已经完全初始化。此时阶段 1 完成。</li></ul><p>阶段 2 - 自上而下</p><ul><li>从继承链顶部往下，继承链中每个类的指定构造器都有机会进一步自定义实例。<br>构造器此时可以访问 self、修改它的属性并调用实例方法等等。</li><li>最终，继承链中任意的便利构造器有机会自定义实例和使用 self。</li></ul><h2 id="Convenience-Initializers-便利构造器-amp-amp-override"><a href="#Convenience-Initializers-便利构造器-amp-amp-override" class="headerlink" title="Convenience Initializers(便利构造器) &amp;&amp; override"></a>Convenience Initializers(便利构造器) &amp;&amp; override</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: <span class="string">&quot;[Unnamed]&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/ConvenienceInitializers.png" alt="ConvenienceInitializers"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> namedMeat <span class="operator">=</span> <span class="type">Food</span>(name: <span class="string">&quot;Bacon&quot;</span>)</span><br><span class="line"><span class="comment">// namedMeat&#x27;s name is &quot;Bacon&quot;</span></span><br><span class="line"><span class="keyword">let</span> mysteryMeat <span class="operator">=</span> <span class="type">Food</span>()</span><br><span class="line"><span class="comment">// mysteryMeat&#x27;s name is &quot;[Unnamed]&quot;</span></span><br></pre></td></tr></table></figure><p>再来一个 override convenience init:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RecipeIngredient</span>: <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> quantity: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">quantity</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.quantity <span class="operator">=</span> quantity</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, quantity: <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/overrideConvenienceInitializers.png" alt="overrideConvenienceInitializers"></p><h2 id="Required-Initializers-必要构造器"><a href="#Required-Initializers-必要构造器" class="headerlink" title="Required Initializers(必要构造器)"></a>Required Initializers(必要构造器)</h2><p>Write the required modifier before the definition of a class initializer to indicate that every subclass of the class must implement that initializer.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="comment">// initializer implementation goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeSubclass</span>: <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="comment">// subclass implementation of the required initializer goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rule 1 If your subclass doesn’t define any designated initializers, it automatically inherits all of its superclass designated initializers.<br>    若不定义指定的初始化函数,则全部继承。</p><p>Rule 2 If your subclass provides an implementation of all of its superclass designated initializers—either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition—then it automatically inherits all of the superclass convenience initializers.<br>    若定义了指定的初始化函数,则只继承convenience初始化函数。（是这个意思?)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> num: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">num</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.num <span class="operator">=</span> num</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="title class_">A</span> &#123; &#125;</span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> <span class="type">B</span>(num: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">str</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(num: <span class="type">Int</span>(str)<span class="operator">!</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">num</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(num: num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 <span class="operator">=</span> <span class="type">C</span>(str: <span class="string">&quot;9&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> b2 <span class="operator">=</span> <span class="type">C</span>(num: <span class="number">9</span>)</span><br></pre></td></tr></table></figure><h2 id="init-from"><a href="#init-from" class="headerlink" title="init(from:)"></a>init(from:)</h2><p>Creates a new instance by decoding from the given decoder.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declaration:</span></span><br><span class="line"><span class="keyword">init</span>(<span class="params">from</span> <span class="params">decoder</span>: <span class="type">Decoder</span>) <span class="keyword">throws</span></span><br></pre></td></tr></table></figure><p>对于一个struct中的属性比如说是String、Int等等本身自带遵循Codable协议的,可以不写init(from decoder: Decoder) throws,但如果属性中有比如UIImage类型的,这时候你希望这个struct可以Encodable和Decodable的,你就必须写两个方法,一个是init(from decoder: Decoder) throws,一个是<strong>func encode(to encoder: Encoder) throws</strong>。<br>例子:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">UserImage</span>: <span class="title class_">Identifiable</span>, <span class="title class_">Codable</span> &#123;    </span><br><span class="line">    <span class="keyword">let</span> id: <span class="type">UUID</span></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// 这里的UIImage是不自带遵循Codable协议的</span></span><br><span class="line">    <span class="keyword">let</span> image: <span class="type">UIImage</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 所以需要建立一个遵循CodingKey协议的enum,里面的一个case是上面的image</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">CodingKeys</span>: <span class="title class_">CodingKey</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> id, name, image</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">UUID</span>, <span class="params">name</span>: <span class="type">String</span>, <span class="params">image</span>: <span class="type">UIImage</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">self</span>.image <span class="operator">=</span> image</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了让image能被decode,所以要写这个init(from decoder: Decoder) throws初始方法</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">from</span> <span class="params">decoder</span>: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> container <span class="operator">=</span> <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">        </span><br><span class="line">        id <span class="operator">=</span> <span class="keyword">try</span> container.decode(<span class="type">UUID</span>.<span class="keyword">self</span>, forKey: .id)</span><br><span class="line">        name <span class="operator">=</span> <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 感觉是UIImage和原始数据之间需要有一个Data类型来做桥</span></span><br><span class="line">        <span class="keyword">let</span> imageData <span class="operator">=</span> <span class="keyword">try</span> container.decode(<span class="type">Data</span>.<span class="keyword">self</span>, forKey: .image)</span><br><span class="line">        <span class="comment">// 这里使用nil coalescing是因为UIImage(data: &lt;#T##Data#&gt;)返回的是一个UIImage？,所以在取不到值的情况下,需要返回空的UIImage()</span></span><br><span class="line">        <span class="keyword">let</span> decodedImage <span class="operator">=</span> <span class="type">UIImage</span>(data: imageData) <span class="operator">??</span> <span class="type">UIImage</span>()</span><br><span class="line">        image <span class="operator">=</span> decodedImage</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">encode</span>(<span class="params">to</span> <span class="params">encoder</span>: <span class="type">Encoder</span>) <span class="keyword">throws</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> container <span class="operator">=</span> encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</span><br><span class="line">        <span class="keyword">try</span> container.encode(id, forKey: .id)</span><br><span class="line">        <span class="keyword">try</span> container.encode(name, forKey: .name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> jpegData <span class="operator">=</span> image.jpegData(compressionQuality: <span class="number">0.8</span>) &#123;</span><br><span class="line">            <span class="comment">// 感觉这里也是需要用Data类型来做桥</span></span><br><span class="line">            <span class="keyword">try</span> container.encode(jpegData, forKey: .image)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是正常decode:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images: [<span class="type">UserImage</span>]</span><br><span class="line"><span class="keyword">let</span> savePath <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: .documentDirectory, in: .userDomainMask).first<span class="operator">?</span>.appendingPathComponent(<span class="string">&quot;ImageContext&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: savePath<span class="operator">!</span> )</span><br><span class="line">images <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">UserImage</span>].<span class="keyword">self</span>, from: data)</span><br></pre></td></tr></table></figure><p>也能正常encode:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONEncoder</span>().encode(images)</span><br></pre></td></tr></table></figure><h2 id="init-1"><a href="#init-1" class="headerlink" title="init?()"></a>init?()</h2><p>This is a failable initializer: an initializer that might work or might not. You can write these in your own structs and classes by using init?() rather than init(), and return nil if something goes wrong. The return value will then be an optional of your type, for you to unwrap however you want.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">id</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> id.count <span class="operator">==</span> <span class="number">9</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须要传入9位的id,不然构造器就会传出一个nil。</p><h1 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h1><h2 id="Alert-item-content-–-多个Alert情况的适用"><a href="#Alert-item-content-–-多个Alert情况的适用" class="headerlink" title="Alert(item:content:) – 多个Alert情况的适用"></a>Alert(item:content:) – 多个Alert情况的适用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AlertData</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">Text</span></span><br><span class="line">    <span class="keyword">let</span> message: <span class="type">Text</span></span><br><span class="line">    <span class="keyword">let</span> button: <span class="type">Alert</span>.<span class="type">Button</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> firstAlert <span class="operator">=</span> <span class="type">AlertData</span>(title: <span class="type">Text</span>(<span class="string">&quot;First Alert&quot;</span>), message: <span class="type">Text</span>(<span class="string">&quot;This is the first alert&quot;</span>), button: .default(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> secondAlert <span class="operator">=</span> <span class="type">AlertData</span>(title: <span class="type">Text</span>(<span class="string">&quot;Second Alert&quot;</span>), message: <span class="type">Text</span>(<span class="string">&quot;This is the second alert&quot;</span>), button: .default(<span class="type">Text</span>(<span class="string">&quot;OK&quot;</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MultiAlertExamples</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> alert: <span class="type">AlertData</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span>(spacing: <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                alert <span class="operator">=</span> <span class="type">AlertData</span>.firstAlert</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Show First Alert&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                alert <span class="operator">=</span> <span class="type">AlertData</span>.secondAlert</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Show Second Alert&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(item: <span class="variable">$alert</span>) &#123; a <span class="keyword">in</span></span><br><span class="line">            <span class="type">Alert</span>(title: a.title, message: a.message, dismissButton: a.button)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一点:<br>.alert(item:content)中item属性对应的参数，需要遵循Identifiable协议。</p><h1 id="TextEditor"><a href="#TextEditor" class="headerlink" title="TextEditor"></a>TextEditor</h1><p>TextField is for the users to enter short pieces of text.<br>TextEditor is for the long pieces of text.</p><h1 id="ViewBuilder"><a href="#ViewBuilder" class="headerlink" title="@ViewBuilder"></a>@ViewBuilder</h1><p>简单来说,就是一个包含多个视图的闭包,或者说,就是一个可以接受多个视图的闭包。<br>在SwiftUI框架中，所有的容器视图都是使用@ViewBuilder来修饰最后一个参数，因此这些容器视图可以接受多个子视图作为参数。比如HStack&#x2F;VStack&#x2F;ScrollView等。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CustomContainerView</span>&lt;<span class="title class_">Content</span>&gt;: <span class="title class_">View</span> <span class="title class_">where</span> <span class="title class_">Content</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> content: <span class="type">Content</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="meta">@ViewBuilder</span> <span class="params">content</span>: () -&gt; <span class="type">Content</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.content <span class="operator">=</span> content()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            content</span><br><span class="line">                .padding()</span><br><span class="line">        &#125;</span><br><span class="line">        .foregroundColor(.red)</span><br><span class="line">        .background(<span class="type">Color</span>.green)</span><br><span class="line">        .font(.title)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">test001</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">CustomContainerView</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Type-erasure"><a href="#Type-erasure" class="headerlink" title="Type erasure"></a>Type erasure</h1><p>Type erasure is the process of hiding the underlying type of some data. This is used often in Swift: we have type erasing wrappers such as AnyHashable and AnySequence, and all they do is act as shells that forward on their operations to whatever they contain, without revealing what the contents are to anything externally.</p><h2 id="AnyView"><a href="#AnyView" class="headerlink" title="AnyView"></a>AnyView</h2><p>In SwiftUI we have AnyView for this purpose: it can hold any kind of view inside it, which allows us to mix and match views freely, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> randomText: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Bool</span>.random() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">300</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        randomText</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但其实上面的代码会有性能上的问题,替代方案是使用@ViewBuilder:(不需要AnyView和return了)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@ViewBuilder</span> <span class="keyword">var</span> randomText: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">Bool</span>.random() &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">                .frame(width: <span class="number">300</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        randomText</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码挺有意思,也贴一下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> views <span class="operator">=</span> [<span class="type">AnyView</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Add Shape&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="type">Bool</span>.random() &#123;</span><br><span class="line">                    views.append(<span class="type">AnyView</span>(<span class="type">Circle</span>().frame(height: <span class="number">50</span>)))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    views.append(<span class="type">AnyView</span>(<span class="type">Rectangle</span>().frame(width: <span class="number">50</span>)))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span>views.count, id: \.<span class="keyword">self</span>) &#123;</span><br><span class="line">                views[<span class="variable">$0</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Using-a-ternary-conditional-operator-to-supply-differing-values"><a href="#Using-a-ternary-conditional-operator-to-supply-differing-values" class="headerlink" title="Using a ternary conditional operator to supply differing values"></a>Using a ternary conditional operator to supply differing values</h2><p>当使用三元选择符生成,若生成的View的类型不同,就会报错,<br>那么如何让其在不同类型的view中转换？</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">erasedToAnyView</span>() -&gt; <span class="type">AnyView</span> &#123;</span><br><span class="line">        <span class="type">AnyView</span>(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何使用?</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br><span class="line">    .font(.title)</span><br><span class="line">    .erasedToAnyView()</span><br></pre></td></tr></table></figure><p>这样就解决问题了。<br>if条件生成不同类型的View也是一样的操作。</p><h1 id="MainActor"><a href="#MainActor" class="headerlink" title="MainActor"></a>MainActor</h1><p>让代码运行在main actor：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="type">MainActor</span>.run &#123;</span><br><span class="line">    <span class="comment">// your work here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看文章上说:<br>the main actor won’t ever run two pieces of code at the same time, so the work we ask for might need to wait for some other work to complete first.<br>所以这大概就是主线程(不知道是不是用线程这两个字)只能用来更新界面元素的原因吧。这是因为,主界面在更新页面元素的时候,若底线程在更新界面元素,就会让这些元素不同步或是产生冲突,程序就会崩溃的。<br>因此,创建和保存CoreData的数据就需要在MainActor上运行:<br>So, when it comes to creating and saving all your Core Data objects, that’s definitely a task for the main actor, because it means your fetch request won’t start changing under SwiftUI’s feet.</p><h1 id="Core-Image"><a href="#Core-Image" class="headerlink" title="Core Image"></a>Core Image</h1><p>Apart from SwiftUI’s Image view, the three other image types are:</p><ul><li><strong>UIImage</strong>, which comes from UIKit. This is an extremely powerful image type capable of working with a variety of image types, including bitmaps (like PNG), vectors (like SVG), and even sequences that form an animation. UIImage is the standard image type for UIKit, and of the three it’s closest to SwiftUI’s Image type.</li><li><strong>CGImage</strong>, which comes from Core Graphics. This is a simpler image type that is really just a two-dimensional array of pixels.</li><li><strong>CIImage</strong>, which comes from Core Image. This stores all the information required to produce an image but doesn’t actually turn that into pixels unless it’s asked to. Apple calls CIImage “an image recipe” rather than an actual image.</li></ul><p>There is some interoperability between the various image types:</p><p>We can create a <strong>UIImage</strong> from a <strong>CGImage</strong>, and create a <strong>CGImage</strong> from a <strong>UIImage</strong>.<br>We can create a <strong>CIImage</strong> from a <strong>UIImage</strong> and from a <strong>CGImage</strong>, and can create a <strong>CGImage</strong> from a <strong>CIImage</strong>.<br>We can create a SwiftUI <strong>Image</strong> from both a <strong>UIImage</strong> and a <strong>CGImage</strong>.</p><p>不能把UIImage、CGImage、CIImage直接放入swiftui的view中,但可以通过转化的方式放入swiftui的image中。</p><p>另外,要想从CIImage -&gt; UIImage, 必须是:<br>CIImage -&gt; CGImage -&gt; UIImage.</p><h2 id="几种滤镜的使用"><a href="#几种滤镜的使用" class="headerlink" title="几种滤镜的使用"></a>几种滤镜的使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> image: <span class="type">Image</span>?</span><br></pre></td></tr></table></figure><h3 id="sepia滤镜-‘siːpiə-即乌贼的墨；深褐色的意思"><a href="#sepia滤镜-‘siːpiə-即乌贼的墨；深褐色的意思" class="headerlink" title="sepia滤镜 ([‘siːpiə]即乌贼的墨；深褐色的意思)"></a>sepia滤镜 ([‘siːpiə]即乌贼的墨；深褐色的意思)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    loadImage()主要作用:对图片进行sepia过滤.</span></span><br><span class="line"><span class="comment">    需要先import二个模块:CoreImage和CoreImage.CIFilterBuiltins这二个模块</span></span><br><span class="line"><span class="comment">    主要思路:</span></span><br><span class="line"><span class="comment">    创建UIImage-&gt;转化成CIImage-&gt;使用sepia过滤器来过滤-&gt;从过滤器中读取output image-&gt;使用output image创建UIImage-&gt;生成View下能使用的Image</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadImage</span>() &#123;</span><br><span class="line">            </span><br><span class="line">    <span class="comment">// 创建一个UIImage</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> inputImage <span class="operator">=</span> <span class="type">UIImage</span>(named: <span class="string">&quot;threemonths&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="comment">// 把UIImage转化成CIImage</span></span><br><span class="line">    <span class="keyword">let</span> beginImage <span class="operator">=</span> <span class="type">CIImage</span>(image: inputImage)</span><br><span class="line">    <span class="comment">// create a Core Image context</span></span><br><span class="line">    <span class="keyword">let</span> context <span class="operator">=</span> <span class="type">CIContext</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// create a Core Image filter</span></span><br><span class="line">    <span class="comment">// Core Image filter才是实际对图片进行处理的重要部件</span></span><br><span class="line">    <span class="comment">// 这里引入的sepia([&#x27;siːpiə]即乌贼的墨；深褐色的意思) 过滤器</span></span><br><span class="line">    <span class="comment">// 该过滤器只有两个属性:inputImage和intensity</span></span><br><span class="line">    <span class="comment">// 不同于let currentFilter = CIFilter.sepiaTone()返回的是CISepiaTone协议</span></span><br><span class="line">    <span class="comment">// currentFilter: CIFilter = CIFilter.sepiaTone()返回的是CIFilter</span></span><br><span class="line">    <span class="comment">// 可以适用于所有的filter协议,利于你切换更多filter</span></span><br><span class="line">    currentFilter: <span class="type">CIFilter</span> <span class="operator">=</span> <span class="type">CIFilter</span>.sepiaTone()</span><br><span class="line">    <span class="comment">// inputImage是要过滤的图片</span></span><br><span class="line">    <span class="comment">// currentFilter.inputImage = beginImage</span></span><br><span class="line">    <span class="comment">// 下面的代码比上面的代码更好一些</span></span><br><span class="line">    <span class="comment">// 为何不用上面的currentFilter.inputImage是因为这个不适用于全部filter</span></span><br><span class="line">    currentFilter.setValue(beginImage, forKey: kCIInputImageKey)</span><br><span class="line">    <span class="comment">// intensity是sepia的强弱程度,范围是0(原始图片)-1(full sepia)</span></span><br><span class="line">    currentFilter.intensity <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* to convert the output from our filter</span></span><br><span class="line"><span class="comment">        to a SwiftUI Image that we can display in our view</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// Read the output image from our filter, which will be a CIImage. This might fail, so it returns an optional.</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> outputImage <span class="operator">=</span> currentFilter.outputImage <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="comment">// Ask our context to create a CGImage from that output image. This also might fail, so again it returns an optional.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> cgimg <span class="operator">=</span> context.createCGImage(outputImage, from: outputImage.extent) &#123;</span><br><span class="line">        <span class="comment">// Convert that CGImage into a UIImage</span></span><br><span class="line">        <span class="keyword">let</span> uiImage <span class="operator">=</span> <span class="type">UIImage</span>(cgImage: cgimg)</span><br><span class="line">        <span class="comment">// Convert that UIImage into a SwiftUI Image</span></span><br><span class="line">        image <span class="operator">=</span> <span class="type">Image</span>(uiImage: uiImage)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>intensity为0.3的时候的效果:<br><img src="/Images/sepia-intensity0.3.png" alt="sepia-intensity0.3"><br>intensity为1.0的时候的效果:<br><img src="/Images/sepia-intensity1.0.png" alt="sepia-intensity1.0"></p><h3 id="pixellate滤镜-–-像是加马赛克的感觉"><a href="#pixellate滤镜-–-像是加马赛克的感觉" class="headerlink" title="pixellate滤镜 – 像是加马赛克的感觉"></a>pixellate滤镜 – 像是加马赛克的感觉</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的loadImage()方法更改create a Core Image filter那一部分的代码</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadImage</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">let</span> currentFilter <span class="operator">=</span> <span class="type">CIFilter</span>.pixellate()</span><br><span class="line">    currentFilter.inputImage <span class="operator">=</span> beginImagev</span><br><span class="line">    currentFilter.scale <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>currentFilter.scale &#x3D; 1   时候的效果：<br><img src="/Images/pixellate-Scale1.png" alt="pixellate-scale1"><br>currentFilter.scale &#x3D; 10  时候的效果:<br><img src="/Images/pixellate-Scale10.png" alt="pixellate-scale10"><br>currentFilter.scale &#x3D; 100 时候的效果:<br><img src="/Images/pixellate-Scale100.png" alt="pixellate-scale100"><br>currentFilter.scale &#x3D; 200 时候的效果:<br><img src="/Images/pixellate-Scale200.png" alt="pixellate-scale200"></p><h3 id="crystallize滤镜-–-像是变成水晶体化的意思"><a href="#crystallize滤镜-–-像是变成水晶体化的意思" class="headerlink" title="crystallize滤镜 – 像是变成水晶体化的意思"></a>crystallize滤镜 – 像是变成水晶体化的意思</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的loadImage()方法更改create a Core Image filter那一部分的代码</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadImage</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 加载crystallize过滤器</span></span><br><span class="line">    <span class="keyword">let</span> currentFilter <span class="operator">=</span> <span class="type">CIFilter</span>.crystallize()</span><br><span class="line">    currentFilter.inputImage <span class="operator">=</span> beginImage</span><br><span class="line">    currentFilter.radius <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>currentFilter.radius &#x3D; 100 时候的效果:<br><img src="/Images/crystallize-radius100.png" alt="crystallize-radius100"></p><h3 id="twirlDistortion过滤器-–-在某点对图像以某半径进行扭曲"><a href="#twirlDistortion过滤器-–-在某点对图像以某半径进行扭曲" class="headerlink" title="twirlDistortion过滤器 – 在某点对图像以某半径进行扭曲"></a>twirlDistortion过滤器 – 在某点对图像以某半径进行扭曲</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的loadImage()方法更改create a Core Image filter那一部分的代码</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">loadImage</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 加载twirlDistortion过滤器</span></span><br><span class="line">    <span class="keyword">let</span> currentFilter <span class="operator">=</span> <span class="type">CIFilter</span>.twirlDistortion()</span><br><span class="line">    currentFilter.inputImage <span class="operator">=</span> beginImage</span><br><span class="line">    <span class="comment">// radius其实扭曲点的扭转半径</span></span><br><span class="line">    currentFilter.radius <span class="operator">=</span> <span class="number">1000</span></span><br><span class="line">    <span class="comment">// 扭转中心点,这里取的是图片的中心点</span></span><br><span class="line">    currentFilter.center <span class="operator">=</span> <span class="type">CGPoint</span>(x: inputImage.size.width <span class="operator">/</span> <span class="number">2</span>, y: inputImage.size.height <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>半径为 500在图片中心点的扭曲效果:<br><img src="/Images/twirlDistortion-radius500.png" alt="twirlDistortion-radius500"><br>半径为1000在图片中心点的扭曲效果:<br><img src="/Images/twirlDistortion-radius1000.png" alt="twirlDistortion-radius1000"></p><h1 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a>UIKit</h1><p>讲到了与SwiftUI联通的具体用法,可参考:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/wrapping-a-uiviewcontroller-in-a-swiftui-view">https://www.hackingwithswift.com/books/ios-swiftui/wrapping-a-uiviewcontroller-in-a-swiftui-view</a><br><a href="https://www.hackingwithswift.com/books/ios-swiftui/using-coordinators-to-manage-swiftui-view-controllers">https://www.hackingwithswift.com/books/ios-swiftui/using-coordinators-to-manage-swiftui-view-controllers</a></p></blockquote><ol><li><p>UIKit has a class called <strong>UIView</strong>, which is the parent class of all views in the layouts. So, labels, buttons, text fields, sliders, and so on – those are all views.</p></li><li><p>UIKit has a class called <strong>UIViewController</strong>, which is designed to hold all the code to bring views to life. Just like UIView, UIViewController has many subclasses that do different kinds of work.</p></li><li><p>UIKit uses a design pattern called <em>delegation</em> to decide where work happens. So, when it came to deciding how to respond to a text field changing, we’d create a custom class with our functionality and make that the delegate of our text field.</p></li></ol><p>Wrapping a UIKit view controller requires us to create a struct that conforms to the <strong>UIViewControllerRepresentable</strong> protocol.<br>Conforming to <strong>UIViewControllerRepresentable</strong> does require us to fill in that struct with two methods: one called <strong>makeUIViewController()</strong>, which is responsible for creating the initial view controller, and another called <strong>updateUIViewController()</strong>, which is designed to let us update the view controller when some SwiftUI state changes.</p><h3 id="UIViewRepresentable协议"><a href="#UIViewRepresentable协议" class="headerlink" title="UIViewRepresentable协议"></a>UIViewRepresentable协议</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/402897951">https://zhuanlan.zhihu.com/p/402897951</a></p></blockquote><p>在SwiftUI中包装UIView非常简单，只需要创建一个遵守UIViewRepresentable协议的结构体就行了。<br>UIViewrepresentable的协议并不复杂，只包含：<br>makeUIView、updateUIView、dismantleUIView和makeCoordinator四个方法。<br>makeUIView和updateUIView为必须提供实现的方法。<br>UIViewrepresentable的协议的生命周期图:<br><img src="/Images/UIViewrepresentable-lifecycle.jpeg" alt="UIViewrepresentable-lifecycle"></p><ul><li><p>makeCoordinator<br>如果我们声明了Coordinator（协调器）,UIViewRepresentable视图会在初始化后首先创建它的实例，以便在其他的方法中调用。Coordinator默认为Void，该方法在UIViewRepresentable的生命周期中只会调用一次，因此只会创建一个协调器实例。</p></li><li><p>makeUIView<br>创建一个用来包装的UIKit视图实例。该方法在UIViewRepresentable的生命周期中只会调用一次。</p></li><li><p>updateUIView<br>SwiftUI会在应用程序的状态（State）发生变化时更新受这些变化影响的界面部分。当UIViewRepresentable视图中的注入依赖发生变化时，SwiftUI会调用updateUIView。其调用时机同标准SwiftUI视图的body一致，最大的不同为，调用body为计算值，而调用updateview仅为通知UIViewRepresentable视图依赖有变化，至于是否需要根据这些变化来做反应，则由开发者来自行处理。<br>该方法在UIViewRepresentable的生命周期中会多次调用，直到视图被移出视图树（更准确地描述是切换到另一个不包含该视图的视图树分支）。<br>在makeUIVIew执行后，updateUIVew必然会执行一次</p></li><li><p>dismantleUIView<br>在UIViewRepresentable视图被移出视图树之前，SwiftUI会调用dismantleUIView，通常在此方法中可以执行u删除观察器等善后操作。dismantleUIView为类型方法。</p></li></ul><h3 id="PhotosUI"><a href="#PhotosUI" class="headerlink" title="PhotosUI"></a>PhotosUI</h3><h4 id="PHPickerViewController"><a href="#PHPickerViewController" class="headerlink" title="PHPickerViewController"></a>PHPickerViewController</h4><p>A photo picker.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ImagePicker</span>: <span class="title class_">UIViewControllerRepresentable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">UIViewControllerType</span> <span class="operator">=</span> <span class="type">PHPickerViewController</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIViewController</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> config <span class="operator">=</span> <span class="type">PHPickerConfiguration</span>()</span><br><span class="line">        <span class="comment">// 选择相册</span></span><br><span class="line">         config.filter <span class="operator">=</span> .images</span><br><span class="line">        <span class="comment">// 选择视频</span></span><br><span class="line">        <span class="comment">// config.filter = .videos</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> picker <span class="operator">=</span> <span class="type">UIViewType</span>(configuration: config)</span><br><span class="line">        <span class="keyword">return</span> picker</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIViewController</span>(<span class="keyword">_</span> <span class="params">uiViewController</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>差不多是这个样子的:<br><img src="/Images/PHPickerViewController.png" alt="PHPickerViewController"></p><h3 id="UITextField"><a href="#UITextField" class="headerlink" title="UITextField"></a>UITextField</h3><p>上面PHPickerViewController的例子,我们再来实现简单功能的UITextField的包装视图–TextFieldWrapper:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TextFieldWrapper</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> placeholder: <span class="type">String</span></span><br><span class="line">    <span class="meta">@Binding</span> <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">placeholder</span>: <span class="type">String</span>, <span class="params">text</span>: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;) &#123;</span><br><span class="line">        <span class="keyword">self</span>.placeholder <span class="operator">=</span> placeholder</span><br><span class="line">        <span class="keyword">self</span>._text <span class="operator">=</span> text</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">UIViewType</span> <span class="operator">=</span> <span class="type">UITextField</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UITextField</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> textField <span class="operator">=</span> <span class="type">UITextField</span>()</span><br><span class="line">        textField.placeholder <span class="operator">=</span> placeholder</span><br><span class="line">        textField.text <span class="operator">=</span> text</span><br><span class="line">        <span class="keyword">return</span> textField</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UITextField</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Demo</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">TextFieldWrapper</span>(<span class="string">&quot;name&quot;</span>, text: <span class="variable">$name</span>)</span><br><span class="line">                .border(.blue)</span><br><span class="line">                .padding()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Demo</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="coordinators"><a href="#coordinators" class="headerlink" title="coordinators"></a>coordinators</h3><p>此处的coordinators是来自swiftUI,与UIKit中的coordinators是完全不一样的，不要混淆。<br>SwiftUI’s coordinators are designed to act as delegates for UIKit view controllers.</p><h3 id="MapKit-模块"><a href="#MapKit-模块" class="headerlink" title="MapKit 模块"></a>MapKit 模块</h3><p>Integrating MapKit with SwiftUI</p><h4 id="MKCoordinateRegion"><a href="#MKCoordinateRegion" class="headerlink" title="MKCoordinateRegion"></a>MKCoordinateRegion</h4><p>MK就是MapKit的意思。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在View中</span></span><br><span class="line"><span class="comment">// 以下的中心点就是 伦敦</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> mapRegion <span class="operator">=</span> <span class="type">MKCoordinateRegion</span>(center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">51.5</span>, longitude: <span class="operator">-</span><span class="number">0.12</span>), span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在View的body中</span></span><br><span class="line"><span class="type">Map</span>(coordinateRegion: <span class="variable">$mapRegion</span>)</span><br></pre></td></tr></table></figure><p>效果图是:<br><img src="/Images/MapKit-MKCoordinateRegion.png" alt="MapKit-MKCoordinateRegion"></p><h4 id="MapMarker"><a href="#MapMarker" class="headerlink" title="MapMarker"></a>MapMarker</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Location</span>: <span class="title class_">Identifiable</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id <span class="operator">=</span> <span class="type">UUID</span>()</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> coordinate: <span class="type">CLLocationCoordinate2D</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="comment">// MK 就是MapKit</span></span><br><span class="line">    <span class="comment">// 以下的中心点就是 伦敦</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> mapRegion <span class="operator">=</span> <span class="type">MKCoordinateRegion</span>(center: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">51.5</span>, longitude: <span class="operator">-</span><span class="number">0.12</span>), span: <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">0.2</span>, longitudeDelta: <span class="number">0.2</span>))</span><br><span class="line">    <span class="keyword">let</span> locations <span class="operator">=</span> [</span><br><span class="line">        <span class="type">Location</span>(name: <span class="string">&quot;Buckingham Palace&quot;</span>, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">51.501</span>, longitude: <span class="operator">-</span><span class="number">0.141</span>)),</span><br><span class="line">        <span class="type">Location</span>(name: <span class="string">&quot;Tower of London&quot;</span>, coordinate: <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">51.508</span>, longitude: <span class="operator">-</span><span class="number">0.076</span>))</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">Map</span>(coordinateRegion: <span class="variable">$mapRegion</span>, annotationItems: locations) &#123; location <span class="keyword">in</span></span><br><span class="line">                <span class="type">MapMarker</span>(coordinate: location.coordinate) <span class="comment">// 后续可替代</span></span><br><span class="line">                <span class="comment">// Using MapMarker doesn&#x27;t allow us to add text to the map.</span></span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;London Explorer&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下默认的annotation效果图是:<br><img src="/Images/MapKit-MapMarker-default.png" alt="MapKit-MapMarker-default"></p><p>也可以不使用默认的annotation标记:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上述可替代处,替代MapMarker(coordinate: location.coordinate)的代码</span></span><br><span class="line"><span class="type">MapAnnotation</span>(coordinate: location.coordinate) &#123;</span><br><span class="line">    <span class="type">NavigationLink</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(location.name)</span><br><span class="line">    &#125; label: &#123;</span><br><span class="line">        <span class="type">Circle</span>()</span><br><span class="line">            .stroke(.red, lineWidth: <span class="number">3</span>)</span><br><span class="line">            .frame(width: <span class="number">44</span>, height: <span class="number">44</span>)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Tapped on <span class="subst">\(location.name)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是custom的annotation效果图:<br><img src="/Images/MapKit-MapMarker-custom.png" alt="MapKit-MapMarker-custom"></p><h3 id="LocalAuthentication-模块-–-Using-Touch-ID-and-Face-ID-with-SwiftUI"><a href="#LocalAuthentication-模块-–-Using-Touch-ID-and-Face-ID-with-SwiftUI" class="headerlink" title="LocalAuthentication 模块 – Using Touch ID and Face ID with SwiftUI"></a>LocalAuthentication 模块 – Using Touch ID and Face ID with SwiftUI</h3><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/using-touch-id-and-face-id-with-swiftui">https://www.hackingwithswift.com/books/ios-swiftui/using-touch-id-and-face-id-with-swiftui</a></p></blockquote><p>要打开人脸或指纹检测,需要在项目中设置的是:<br>Before we write any code, you need to add a new key to your project options, explaining to the user why you want access to Face ID. For reasons known only to Apple, we pass the Touch ID request reason in code, and the Face ID request reason in project options.<br>So, select your current target, go to the Info tab, right-click on an existing key, then choose Add Row. Scroll through the list of keys until you find “Privacy - Face ID Usage Description” and give it the value “We need to unlock your data.”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LocalAuthentication</span><br><span class="line"><span class="comment">// 可以在ContentView中定义</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">authenticate</span>() &#123;</span><br><span class="line">    <span class="comment">// LA就是LocalAuthentication</span></span><br><span class="line">    <span class="keyword">let</span> context <span class="operator">=</span> <span class="type">LAContext</span>()</span><br><span class="line">    <span class="keyword">var</span> error: <span class="type">NSError</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check whether biometric authentication is possible</span></span><br><span class="line">    <span class="keyword">if</span> context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: <span class="operator">&amp;</span>error) &#123;</span><br><span class="line">        <span class="comment">// it&#x27;s possible, so go ahead and use it</span></span><br><span class="line">        <span class="keyword">let</span> reason <span class="operator">=</span> <span class="string">&quot;We need to unlock your data.&quot;</span></span><br><span class="line"></span><br><span class="line">        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) &#123; success, authenticationError <span class="keyword">in</span></span><br><span class="line">            <span class="comment">// authentication has now completed</span></span><br><span class="line">            <span class="keyword">if</span> success &#123;</span><br><span class="line">                <span class="comment">// authenticated successfully</span></span><br><span class="line">                isUnlocked <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// there was a problem</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// no biometrics</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在ContentView中添加属性</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> isUnlocked <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">// 在Body中添加的View</span></span><br><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> isUnlocked &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Unlocked&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Locked&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.onAppear(perform: authenticate)</span><br></pre></td></tr></table></figure><p>执行后仍旧是“Locked”,因为模拟器中未设置生物检测.<br>To take Face ID for a test drive, go to the Features menu and choose Face ID &gt; Enrolled, then launch the app again. This time you should see the Face ID prompt appear, and you can trigger successful or failed authentication by going back to the Features menu and choosing Face ID &gt; Matching Face or Non-matching Face.<br>模拟器中未尝试成功,但跳开模拟器的设置,直接安装到真机上后可正常执行。</p><h3 id="CoreLocation"><a href="#CoreLocation" class="headerlink" title="CoreLocation"></a>CoreLocation</h3><p>在项目中需要你导入CoreLocation,因为有时候需要你自己去加载,是在 项目的TARGETS的BuildPhases的LinkBinaryWithLibraries中添加CoreLocation.framework。<br>但试了下,其实不需要去导入的。<br>但可以知道怎么导入模块。</p><h4 id="CLLocationManagerDelegate-x2F-CLLocationManager-–-fetches-the-user’s-location"><a href="#CLLocationManagerDelegate-x2F-CLLocationManager-–-fetches-the-user’s-location" class="headerlink" title="CLLocationManagerDelegate &#x2F; CLLocationManager() – fetches the user’s location"></a>CLLocationManagerDelegate &#x2F; CLLocationManager() – fetches the user’s location</h4><p>获取用户的具体位置:</p><blockquote><p><a href="https://www.hackingwithswift.com/100/swiftui/78">https://www.hackingwithswift.com/100/swiftui/78</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreLocation</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocationFetcher</span>: <span class="title class_">NSObject</span>, <span class="title class_">CLLocationManagerDelegate</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> manager <span class="operator">=</span> <span class="type">CLLocationManager</span>()</span><br><span class="line">    <span class="keyword">var</span> lastKnownLocation: <span class="type">CLLocationCoordinate2D</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        manager.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">start</span>() &#123;</span><br><span class="line">        manager.requestWhenInUseAuthorization()</span><br><span class="line">        manager.startUpdatingLocation()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">locationManager</span>(<span class="keyword">_</span> <span class="params">manager</span>: <span class="type">CLLocationManager</span>, <span class="params">didUpdateLocations</span> <span class="params">locations</span>: [<span class="type">CLLocation</span>]) &#123;</span><br><span class="line">        lastKnownLocation <span class="operator">=</span> locations.first<span class="operator">?</span>.coordinate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加一个用户授权的选项:<br>To use that, start by adding a new key to Info.plist(就是Info) called “Privacy - Location When In Use Usage Description”, then give it some sort of value explaining to the user why you need their location.</p><p>具体调用(简单验证是否获取到):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> locationFetcher <span class="operator">=</span> <span class="type">LocationFetcher</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Start Tracking Location&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">self</span>.locationFetcher.start()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Read Location&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> location <span class="operator">=</span> <span class="keyword">self</span>.locationFetcher.lastKnownLocation &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Your location is <span class="subst">\(location)</span>&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Your location is unknown&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续可以使用这个location值做很多事情。</p><p>在模拟器中调试:<br>If you’re using the simulator rather than a real device, you can fake a location by going to the Debug menu and choosing Location &gt; Apple.</p><h1 id="MVVM-设计样式"><a href="#MVVM-设计样式" class="headerlink" title="MVVM 设计样式"></a>MVVM 设计样式</h1><p>Model View View-Model</p><h1 id="MainActor-1"><a href="#MainActor-1" class="headerlink" title="@MainActor"></a>@MainActor</h1><p>@MainActor is responsible for running all user interface updates, and adding that attribute to the class means we want all its code – any time it runs anything, unless we specifically ask otherwise – to run on that main actor. This is important because it’s responsible for making UI updates, and those must happen on the main actor. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extension</span> <span class="title class_">ContentView</span> &#123;</span><br><span class="line">    <span class="meta">@MainActor</span> <span class="keyword">class</span> <span class="title class_">ViewModel</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了@MainActor后,就能得到保证,在ViewModel类中每一个部分都会运行在main-actor中,让你安全地更新UI,不必担心在哪里使用它。</p><h1 id="propertyWrapper-–-属性包装器"><a href="#propertyWrapper-–-属性包装器" class="headerlink" title="@propertyWrapper – 属性包装器"></a>@propertyWrapper – 属性包装器</h1><p>A property wrapper adds a layer of separation between code that manages how a property is stored and the code that defines a property.<br>属性包装器，用来修饰属性，它可以抽取关于属性重复的逻辑来达到简化代码的目的。</p><p>通过 @propertyWrapper 来标识structure, enumeration, or class来实现属性包装，有两个要求:</p><ol><li>必须使用属性@propertyWrapper进行定义;</li><li>它必须具有wrappedValue属性。</li></ol><p>例子:<br>没有使用@propertyWrapper是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NonNegative</span>&lt;<span class="title class_">Value</span>: <span class="title class_">BinaryInteger</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">Value</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">wrappedValue</span>: <span class="type">Value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> wrappedValue <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            value <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value <span class="operator">=</span> wrappedValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Value</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; value &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> newValue <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                value <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value <span class="operator">=</span> newValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> example <span class="operator">=</span> <span class="type">NonNegative</span>(wrappedValue: <span class="number">5</span>)</span><br><span class="line">example.wrappedValue <span class="operator">-=</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(example.wrappedValue) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>使用到@propertyWrapper是这样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@propertyWrapper</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NonNegative</span>&lt;<span class="title class_">Value</span>: <span class="title class_">BinaryInteger</span>&gt; &#123;</span><br><span class="line"><span class="comment">// 下面的代码省略</span></span><br></pre></td></tr></table></figure><p>具体使用的时候:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NonNegative</span> <span class="keyword">var</span> score <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line">user.score <span class="operator">+=</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(user.score)</span><br><span class="line"></span><br><span class="line">user.score <span class="operator">-=</span> <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(user.score)</span><br></pre></td></tr></table></figure><h1 id="TabView"><a href="#TabView" class="headerlink" title="TabView"></a>TabView</h1><p><img src="/Images/TabViewAndBindingAndTag.gif" alt="&quot;TabViewAndBindingAndTag&quot;"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> selectedTab <span class="operator">=</span> <span class="string">&quot;one&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TabView</span>(selection: <span class="variable">$selectedTab</span>) &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Tab 1&quot;</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    selectedTab <span class="operator">=</span> <span class="string">&quot;two&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                .tabItem &#123;</span><br><span class="line">                    <span class="type">Label</span>(<span class="string">&quot;One&quot;</span>, systemImage: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .tag(<span class="string">&quot;one&quot;</span>)</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Tab 2&quot;</span>)</span><br><span class="line">                .onTapGesture &#123;</span><br><span class="line">                    selectedTab <span class="operator">=</span> <span class="string">&quot;one&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                .tabItem &#123;</span><br><span class="line">                    <span class="type">Label</span>(<span class="string">&quot;Two&quot;</span>, systemImage: <span class="string">&quot;circle&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .tag(<span class="string">&quot;two&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码可以在点击Text的同时进行Tab的切换。<br>以上使用到了:</p><ol><li>TabView(selection:content:),其中selection参数是Binding;</li><li>.tag是给Tab定义一个值,便于定位。</li></ol><h1 id="objectWillChange-–-这是-Published的手动版"><a href="#objectWillChange-–-这是-Published的手动版" class="headerlink" title="objectWillChange – 这是@Published的手动版"></a>objectWillChange – 这是@Published的手动版</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/manually-publishing-observableobject-changes">https://www.hackingwithswift.com/books/ios-swiftui/manually-publishing-observableobject-changes</a></p></blockquote><p>一般在一个遵循@ObservableObject的class中,定义一个@Published属性的变量,那么在可对其进行监视的View中就可以实时更新该值了,然而,我们不用这个@Published的话,还有什么办法呢？<br>可以使用这个到一个解决办法,就是 objectWillChange。<br>看下面的代码,未对DelayedUpdater类的value属性定义成@Published,看是如何做的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">var</span> updator <span class="operator">=</span> <span class="type">DelayedUpdater</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MainActor</span> <span class="keyword">class</span> <span class="title class_">DelayedUpdater</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> value <span class="operator">=</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">willSet</span> &#123;</span><br><span class="line">                objectWillChange.send()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">init</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">20</span> &#123;</span><br><span class="line">                <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() <span class="operator">+</span> <span class="type">Double</span>(i)) &#123;</span><br><span class="line">                    <span class="keyword">self</span>.value <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;<span class="subst">\(updator.value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>objectWillChange的解释是这样的:<br>Every class that conforms to ObservableObject automatically gains a property called objectWillChange. This is a publisher, which means it does the same job as the @Published property wrapper: it notifies any views that are observing that object that something important has changed. As its name implies, this publisher should be triggered immediately before we make our change, which allows SwiftUI to examine the state of our UI and prepare for animation changes.<br>这是一个老式的操作办法,但从中我们可以log something,调用一个方法,或是做点其他什么事情,都是可以在我们的控制下去完成的。</p><p>!!!Important!!!:<br>You should call objectWillChange.send() before changing your property, to ensure SwiftUI gets its animations correct.</p><h2 id="fileprivate-set"><a href="#fileprivate-set" class="headerlink" title="fileprivate(set)"></a>fileprivate(set)</h2><p>这里引入 fileprivate(set)<br>什么时候使用?<br>比如在一个遵守ObservableObject的class中有一个@Published变量 var people: [Prospect], People这个struct中有一个var isContacted &#x3D; false,当我们在外部而不是在这个class中更改这个isContacted成为true,这个people并不会被观察到,所以你必须杜绝外部更改这个isContacted,所以要使用到:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Struct</span> <span class="type">People</span> &#123;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">    <span class="keyword">fileprivate(set)</span> <span class="keyword">var</span> isContacted <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样外部就无法修改了.<br>而在这个class内部建立方法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">toggle</span>(<span class="keyword">_</span> <span class="params">prospect</span>: <span class="type">Prospect</span>) &#123;</span><br><span class="line">    objectWillChange.send()</span><br><span class="line">    prospect.isContacted.toggle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在外部调用到这个class的toggle方法时,就会通知到这个class的people要改变了,需要重新刷新view了。<br>具体例子在:</p><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/adding-options-with-swipe-actions">https://www.hackingwithswift.com/books/ios-swiftui/adding-options-with-swipe-actions</a></p></blockquote><h3 id="fileprivate-和-private-的区别"><a href="#fileprivate-和-private-的区别" class="headerlink" title="fileprivate 和 private 的区别:"></a>fileprivate 和 private 的区别:</h3><p>两者区别就存在于这个file中,当一个文件中有一个类定义了fileprivate的属性,那么即使这个文件中有很多类,其他类还是可以调用这个fileprivate属性的。而private存在的结构或类,其他结构或类是无法调用的,即使这些都写在同一个文件中。</p><h1 id="Result-类型-–-此处需要配合Task使用"><a href="#Result-类型-–-此处需要配合Task使用" class="headerlink" title="Result 类型 – 此处需要配合Task使用"></a>Result 类型 – 此处需要配合Task使用</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/understanding-swifts-result-type">https://www.hackingwithswift.com/books/ios-swiftui/understanding-swifts-result-type</a></p></blockquote><p>Result是一种特殊的数据类型,它既可以包含一个成功的值,也可以包含错误类型。比如下面的例子中,取出的Result属性,既可以是一个String,也可以是一个网络故障导致的连接错误。它在项目中会起到很大的作用,应当是要去理解的。</p><p>一般需要使用到这个Result数据类型,需要配合使用Task来引出。下面的例子正是如此。</p><p>看下面的代码:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> output <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Res:<span class="subst">\(output)</span>&quot;</span>)</span><br><span class="line">            .task &#123;</span><br><span class="line">                <span class="keyword">await</span> fetchReadings()</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fetchReadings</span>() <span class="keyword">async</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fetchTask <span class="operator">=</span> <span class="type">Task</span> &#123; () -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://hws.dev/readings.json&quot;</span>)<span class="operator">!</span></span><br><span class="line">            <span class="keyword">let</span> (data, <span class="keyword">_</span>) <span class="operator">=</span> <span class="keyword">try</span> <span class="keyword">await</span> <span class="type">URLSession</span>.shared.data(from: url)</span><br><span class="line">            <span class="keyword">let</span> readings <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">Double</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Found <span class="subst">\(readings.count)</span> readings.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面有经debug的result的具体类型和值</span></span><br><span class="line">        <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">await</span> fetchTask.result</span><br><span class="line">        <span class="keyword">switch</span> result &#123;</span><br><span class="line">        <span class="keyword">case</span> .success(<span class="keyword">let</span> str):</span><br><span class="line">            output <span class="operator">=</span> str</span><br><span class="line">        <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">            output <span class="operator">=</span> error.localizedDescription</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到程序显示的是: Res:Found 10000 readings.</p><p>需要说明的是:</p><ol><li>fetchTask是Task对象所对应的操作目标,通过它我们可以做多个操作,比如说取消这个Task任务;</li><li>fetchTask.result就是一个Result类型,它既可能是一个字符串比如”Found 10000 readings.”,也可能是一个Error;</li><li>这个Result类型,具体到上述代码中,就是Result&lt;String, Error&gt;,进一步说明了,如果它成功了就是String,不成功就是Error;</li><li>处理这个result,用到了switch,就是根据其有两个属性,要么success,要么.failure,但还可以通过do { output &#x3D; try result.get()} catch { output &#x3D; “Error: (error.localizedDescription)”}。注意,这里是用到了result.get(),至于是用switch来分辨是成功还是失败,还是通过result.get(),感觉都可以。</li></ol><p>上面代码中的result经debug后看到的详细:<br><img src="/Images/ResultTypeDebug.png" alt="&quot;ResultTypeDebug&quot;"></p><h1 id="Image的Interpolation处理"><a href="#Image的Interpolation处理" class="headerlink" title="Image的Interpolation处理"></a>Image的Interpolation处理</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/controlling-image-interpolation-in-swiftui">https://www.hackingwithswift.com/books/ios-swiftui/controlling-image-interpolation-in-swiftui</a></p></blockquote><p>– 是要图片更圆滑还是棱角分明不做处理,可以选择<br>当处理二维码图像时,肯定是不要进行圆滑处理的,不然二维码就会失真无法读取了。</p><p>以下是原图片:<br><img src="/Images/example@3x.png" alt="&quot;example@3x.png&quot;"><br>图片是很小的,但如果做放大处理,Image读取后,会默认做圆滑处理:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;example&quot;</span>)</span><br><span class="line">    .resizable()</span><br><span class="line">    .scaledToFit()</span><br><span class="line">    .frame(maxHeight: .infinity)</span><br><span class="line">    .background(.black)</span><br><span class="line">    .ignoresSafeArea()</span><br></pre></td></tr></table></figure><p>图片是这样圆滑处理的:<br><img src="/Images/example_001.png" alt="&quot;example_001.png&quot;"></p><p>若不做圆滑处理,则不需要这个默认圆滑处理,就需要使用到Image的.interpolation(.none):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;example&quot;</span>)</span><br><span class="line">    .interpolation(.none)</span><br><span class="line">    .resizable()</span><br><span class="line">    .scaledToFit()</span><br><span class="line">    .frame(maxHeight: .infinity)</span><br><span class="line">    .background(.black)</span><br><span class="line">    .ignoresSafeArea()</span><br></pre></td></tr></table></figure><p><img src="/Images/example_002.png" alt="&quot;example_002.png&quot;"><br>这是二维码显示的正确方式。<br>.interpolation()中不光有.none,还有:<br>.high &#x2F; .low &#x2F; .medium 。<br>这里需要注意的一点是,当你延展该张图片(就像上面的.resizable().scaledToFit()),默认是使用到.interpolation且非.none进行圆滑处理的。</p><h1 id="contextMenu-–-modifier"><a href="#contextMenu-–-modifier" class="headerlink" title="contextMenu() – modifier"></a>contextMenu() – modifier</h1><p>让一个view在长按后弹出menu菜单的功能。</p><p>想到的场景:长按图片跳出Save的按钮。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="comment">/*@START_MENU_TOKEN@*/</span><span class="string">&quot;Hello, World!&quot;</span><span class="comment">/*@END_MENU_TOKEN@*/</span>)</span><br><span class="line">        .padding()</span><br><span class="line">        .background(backgroundColor)</span><br><span class="line"></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Change Color&quot;</span>)</span><br><span class="line">        .padding()</span><br><span class="line">        .contextMenu &#123;</span><br><span class="line">            <span class="type">Button</span>(role: .destructive) &#123;</span><br><span class="line">                backgroundColor <span class="operator">=</span> .red</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">&quot;Red&quot;</span>, systemImage: <span class="string">&quot;checkmark.circle.fill&quot;</span>)</span><br><span class="line">                    .foregroundColor(.red)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Green&quot;</span>) &#123;</span><br><span class="line">                backgroundColor <span class="operator">=</span> .green</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Blue&quot;</span>) &#123;</span><br><span class="line">                backgroundColor <span class="operator">=</span> .blue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/contextMenu.gif" alt="&quot;contextMenu&quot;"><br>这里注意,红色按钮的前景色是红色的,这是因为contextMenu会强制让里面元素的颜色、样式等变成统一的,也就是会摧毁一些设置,所以这里给Button加了一个role: .destructive,这样Button按钮的样式就会完全根据我们的需要来实现了。</p><h1 id="Menu-view"><a href="#Menu-view" class="headerlink" title="Menu - view"></a>Menu - view</h1><p>不同于modifier的contextMenu,Menu是一个View,但感觉用处是一样的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Menu</span> &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Order Now&quot;</span>, action: placeOrder)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Adjust Order&quot;</span>, action: adjustOrder)</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Label</span>(<span class="string">&quot;Options&quot;</span>, systemImage: <span class="string">&quot;paperplane&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">placeOrder</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">adjustOrder</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/Menu1.gif" alt="Menu"></p><p>下面是Menu嵌套Menu的情况:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Menu</span>(<span class="string">&quot;Options&quot;</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Order Now&quot;</span>, action: placeOrder)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Adjust Order&quot;</span>, action: adjustOrder)</span><br><span class="line">            <span class="type">Menu</span>(<span class="string">&quot;Advanced&quot;</span>) &#123;</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Rename&quot;</span>, action: rename)</span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Delay&quot;</span>, action: delay)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, action: cancelOrder)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">placeOrder</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">adjustOrder</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">rename</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">delay</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">cancelOrder</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/Menu2.gif" alt="Menu"></p><p>还有给Menu增加一个primaryAction,就是按下并马上放开,即执行primaryAction;若长按,则调出菜单:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Menu</span>(<span class="string">&quot;Options&quot;</span>) &#123;</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Order Now&quot;</span>, action: placeOrder)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Adjust Order&quot;</span>, action: adjustOrder)</span><br><span class="line">            <span class="type">Button</span>(<span class="string">&quot;Cancel&quot;</span>, action: cancelOrder)</span><br><span class="line">        &#125; primaryAction: &#123;</span><br><span class="line">            justDoIt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">justDoIt</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button was tapped&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">placeOrder</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">adjustOrder</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">cancelOrder</span>() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/Menu3.gif" alt="Menu"></p><h1 id="swipeActions-–-modifier"><a href="#swipeActions-–-modifier" class="headerlink" title="swipeActions() – modifier"></a>swipeActions() – modifier</h1><p>针对List中的元素,当对其向左划时,给出一个action及相应的显示。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Taylor Swift&quot;</span>)</span><br><span class="line">        .swipeActions &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">&quot;Send Message&quot;</span>, systemImage: <span class="string">&quot;message&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/swipeActions_1.gif" alt="&quot;swipeActions_1&quot;"></p><p>还可以增加从左往右划的action:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Taylor Swift&quot;</span>)</span><br><span class="line">        .swipeActions &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">&quot;Send Message&quot;</span>, systemImage: <span class="string">&quot;message&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Taylor Swift&quot;</span>)</span><br><span class="line">        .swipeActions(edge: .leading) &#123;</span><br><span class="line">            <span class="type">Button</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">            &#125; label: &#123;</span><br><span class="line">                <span class="type">Label</span>(<span class="string">&quot;Pin&quot;</span>, systemImage: <span class="string">&quot;pin&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .tint(.orange)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/swipeActions_2.gif" alt="&quot;swipeActions_2&quot;"><br>swipeActions与contextMenu类似,都会对里面的元素有限制,所以这里对Button使用了一个tint()modifier,是为了增加一个选中的颜色,但你也可以像contextMenu例子中一样,对Button的role设置一个.destructive。</p><h1 id="UserNotifications-–-Scheduling-local-notifications"><a href="#UserNotifications-–-Scheduling-local-notifications" class="headerlink" title="UserNotifications – Scheduling local notifications"></a>UserNotifications – Scheduling local notifications</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/scheduling-local-notifications">https://www.hackingwithswift.com/books/ios-swiftui/scheduling-local-notifications</a></p></blockquote><p>给用户弹出提醒的消息,效果图如下:<br><img src="/Images/UserNotifications.gif" alt="&quot;UserNotifications&quot;"></p><p>代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UserNotifications</span><br><span class="line"></span><br><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="comment">// 请求用户的许可</span></span><br><span class="line">    <span class="comment">// 下面请求了三样东西: .alert / .badge /.sound</span></span><br><span class="line">    <span class="comment">// 所以后续弹出的通知中就会有声音、文字等</span></span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Request Permission&quot;</span>) &#123;</span><br><span class="line">        <span class="type">UNUserNotificationCenter</span>.current().requestAuthorization(options: [.alert, .badge, .sound]) &#123; success, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> success &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;All set!&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> error <span class="operator">=</span> error &#123;</span><br><span class="line">                <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置具体的通知</span></span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Schedule Notification&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content <span class="operator">=</span> <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">        content.title <span class="operator">=</span> <span class="string">&quot;Feed the cat&quot;</span></span><br><span class="line">        content.subtitle <span class="operator">=</span> <span class="string">&quot;It looks hungry&quot;</span></span><br><span class="line">        content.sound <span class="operator">=</span> <span class="type">UNNotificationSound</span>.default</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// show this notification five seconds from now</span></span><br><span class="line">        <span class="keyword">let</span> trigger <span class="operator">=</span> <span class="type">UNTimeIntervalNotificationTrigger</span>(timeInterval: <span class="number">5</span>, repeats: <span class="literal">false</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// choose a random identifier</span></span><br><span class="line">        <span class="keyword">let</span> request <span class="operator">=</span> <span class="type">UNNotificationRequest</span>(identifier: <span class="type">UUID</span>().uuidString, content: content, trigger: trigger)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// add our notification request</span></span><br><span class="line">        <span class="type">UNUserNotificationCenter</span>.current().add(request)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<br>真机中直接按住电源键,即可在五秒后收到通知。<br>模拟机中需要按照键盘的Cmd+L,才能模拟息屏的操作。</p><p>以上是每次都会要求用户允许发出通知,但还有更好的办法,就是查看一下用户之前是不是允许了,如果允许了,就直接发出通知,如果没有允许,才继续问用户,而不是一直在反复问用户,这会让用户觉得烦而关掉通知的。</p><h2 id="UserNotifications-–-根据之前是否已授权而发用户提醒的一个方法"><a href="#UserNotifications-–-根据之前是否已授权而发用户提醒的一个方法" class="headerlink" title="UserNotifications – 根据之前是否已授权而发用户提醒的一个方法"></a>UserNotifications – 根据之前是否已授权而发用户提醒的一个方法</h2><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/posting-notifications-to-the-lock-screen">https://www.hackingwithswift.com/books/ios-swiftui/posting-notifications-to-the-lock-screen</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Prospect是项目中的一个struct,这里暂且不用管它的结构是怎么样的,其实也就是几个属性</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">addNotification</span>(<span class="params">for</span> <span class="params">prospect</span>: <span class="type">Prospect</span>) &#123;</span><br><span class="line">    <span class="comment">// 第一部分</span></span><br><span class="line">    <span class="keyword">let</span> center <span class="operator">=</span> <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> addRequest <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content <span class="operator">=</span> <span class="type">UNMutableNotificationContent</span>()</span><br><span class="line">        content.title <span class="operator">=</span> <span class="string">&quot;Contact <span class="subst">\(prospect.name)</span>&quot;</span></span><br><span class="line">        content.subtitle <span class="operator">=</span> prospect.emailAddress</span><br><span class="line">        content.sound <span class="operator">=</span> <span class="type">UNNotificationSound</span>.default</span><br><span class="line"></span><br><span class="line">        <span class="comment">// var dateComponents = DateComponents()</span></span><br><span class="line">        <span class="comment">// dateComponents.hour = 9</span></span><br><span class="line">        <span class="comment">// let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)</span></span><br><span class="line">        <span class="comment">// 上面的代码是会在下次9点的时候发出通知的</span></span><br><span class="line">        <span class="comment">// 下面的代码没有使用上面的时间组件,而是设置成5秒后发送一次</span></span><br><span class="line">        <span class="comment">// 是为了测试用</span></span><br><span class="line">        <span class="keyword">let</span> trigger <span class="operator">=</span> <span class="type">UNTimeIntervalNotificationTrigger</span>(timeInterval: <span class="number">5</span>, repeats: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> request <span class="operator">=</span> <span class="type">UNNotificationRequest</span>(identifier: <span class="type">UUID</span>().uuidString, content: content, trigger: trigger)</span><br><span class="line">        center.add(request)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二部分</span></span><br><span class="line">    <span class="comment">// 既使用 getNotificationSettings() 又使用 requestAuthorization() </span></span><br><span class="line">    <span class="comment">// 后者是在前一次没有得到授权的情况下才会用到</span></span><br><span class="line">    center.getNotificationSettings &#123; settings <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> settings.authorizationStatus <span class="operator">==</span> .authorized &#123;</span><br><span class="line">            addRequest()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            center.requestAuthorization(options: [.alert, .badge, .sound]) &#123; success, error <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> success &#123;</span><br><span class="line">                    addRequest()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;D&#x27;oh!&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Adding-Swift-package-dependencies-in-Xcode"><a href="#Adding-Swift-package-dependencies-in-Xcode" class="headerlink" title="Adding Swift package dependencies in Xcode"></a>Adding Swift package dependencies in Xcode</h1><p>加载依赖包</p><p>在project中,在File menu中选择Add Packages,随后输入URL,比如下面的:<br><img src="/Images/addPackages.png" alt="&quot;addPackages&quot;"><br>加载完后,import这个包就行了。</p><h1 id="QR-code-–-quick-respond-code-二维码"><a href="#QR-code-–-quick-respond-code-二维码" class="headerlink" title="QR code – quick respond code 二维码"></a>QR code – quick respond code 二维码</h1><h2 id="Generating-and-scaling-up-a-QR-code"><a href="#Generating-and-scaling-up-a-QR-code" class="headerlink" title="Generating and scaling up a QR code"></a>Generating and scaling up a QR code</h2><blockquote><p>hackingwithswift.com&#x2F;books&#x2F;ios-swiftui&#x2F;generating-and-scaling-up-a-qr-code</p></blockquote><p>Core Image 可以将一串字符串生成一个二维码图像。</p><p>一,引入CoreImage.CIFilterBuiltins模块;<br>二,需要二个属性来存储Core Image context 即CIContext() 和 一个Core Image’s QR code generator filter的实例即CIFilter.qrCodeGenerator();<br>三,创建这个QR:<br>1.因为我们是要将字符串转换成UIImage的,而CIImage是接收数据信息的,所以先要生成CIImage信息:<br>1)CIFilter.qrCodeGenerator()的message属性接收数据信息;<br>2)CIFilter.qrCodeGenerator()的outputImage生成CIImage图像。<br>2.CIImage要转换成UIImage,必须先转换成CGImage,CIContext()的createCGImage方法可以生成CGImage;<br>3.将CGImage转换成UIImage,即UIImage(cgImage:)<br>四,用Image(uiImage:)来显示图像.因为带有锯齿,Image会自动优化润滑,导致二维码模糊,所以需要使用到.interpolation(.none),让这个二维码有棱有角,不需要任何的加工。</p><p>具体代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入必要的CoreImage.CIFilterBuiltins</span></span><br><span class="line"><span class="keyword">import</span> CoreImage.CIFilterBuiltins</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MeView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Anonymous&quot;</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> emailAddress <span class="operator">=</span> <span class="string">&quot;you@yoursite.com&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储Core Image context</span></span><br><span class="line">    <span class="keyword">let</span> context <span class="operator">=</span> <span class="type">CIContext</span>()</span><br><span class="line">    <span class="comment">// 创建一个一个Core Image’s QR code generator filter的实例</span></span><br><span class="line">    <span class="keyword">let</span> filter <span class="operator">=</span> <span class="type">CIFilter</span>.qrCodeGenerator()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">generateQRCode</span>(<span class="params">from</span> <span class="params">string</span>: <span class="type">String</span>) -&gt; <span class="type">UIImage</span>&#123;</span><br><span class="line">        <span class="comment">// 给filter传入显示的具体数据</span></span><br><span class="line">        filter.message <span class="operator">=</span> <span class="type">Data</span>(string.utf8)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 传入具体数据后,生成CIImage</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> outputImage <span class="operator">=</span> filter.outputImage &#123;</span><br><span class="line">            <span class="comment">// CIImage转换成CGImage</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> cgimg <span class="operator">=</span> context.createCGImage(outputImage, from: outputImage.extent) &#123;</span><br><span class="line">                <span class="comment">// 最后生成我们需要的UIImage</span></span><br><span class="line">                <span class="keyword">return</span> <span class="type">UIImage</span>(cgImage: cgimg)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在无法生成二维码的情况下,生成一个带叉的图像,或者就是一个UIImage的空对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIImage</span>(systemName: <span class="string">&quot;xmark.circle&quot;</span>) <span class="operator">??</span> <span class="type">UIImage</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">Form</span> &#123;</span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Name&quot;</span>, text: <span class="variable">$name</span>)</span><br><span class="line">                    <span class="comment">// .textContentType会告诉ios系统这里用户输入的是什么样的数据,</span></span><br><span class="line">                    <span class="comment">// 比如名字,以及下面的邮箱地址</span></span><br><span class="line">                    .textContentType(.name)</span><br><span class="line">                    .font(.title)</span><br><span class="line">                </span><br><span class="line">                <span class="type">TextField</span>(<span class="string">&quot;Email Address&quot;</span>, text: <span class="variable">$emailAddress</span>)</span><br><span class="line">                    .textContentType(.emailAddress)</span><br><span class="line">                    .font(.title)</span><br><span class="line">                </span><br><span class="line">                <span class="type">Image</span>(uiImage: generateQRCode(from: <span class="string">&quot;<span class="subst">\(name)</span><span class="subst">\n</span><span class="subst">\(emailAddress)</span>&quot;</span>))</span><br><span class="line">                    .interpolation(.none)</span><br><span class="line">                    .resizable()</span><br><span class="line">                    .scaledToFit()</span><br><span class="line">                    .frame(width: <span class="number">250</span>, height: <span class="number">250</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Your code&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Scanning-QR-codes-with-SwiftUI"><a href="#Scanning-QR-codes-with-SwiftUI" class="headerlink" title="Scanning QR codes with SwiftUI"></a>Scanning QR codes with SwiftUI</h2><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/scanning-qr-codes-with-swiftui">https://www.hackingwithswift.com/books/ios-swiftui/scanning-qr-codes-with-swiftui</a></p></blockquote><p>检索一个QR codes,需要使用到AVFoundation库。</p><p>Paul为我们准备了一个package,可以直接使用,包在<a href="https://github.com/twostraws/CodeScanner%E3%80%82">https://github.com/twostraws/CodeScanner。</a><br>已下载放在CodePackages&#x2F;CodeScanner-main目录中。<br>里面有具体的用法。</p><h1 id="Vibrations-–-震动"><a href="#Vibrations-–-震动" class="headerlink" title="Vibrations – 震动"></a>Vibrations – 震动</h1><h2 id="UINotificationFeedbackGenerator-–-相对简单默认的震动模式"><a href="#UINotificationFeedbackGenerator-–-相对简单默认的震动模式" class="headerlink" title="UINotificationFeedbackGenerator – 相对简单默认的震动模式"></a>UINotificationFeedbackGenerator – 相对简单默认的震动模式</h2><p>UINotificationFeedbackGenerator是来自于UIKit,而另一个震动的模块是CoreHaptics,是两个不一样的模块。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">simpleSuccess</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> generator <span class="operator">=</span> <span class="type">UINotificationFeedbackGenerator</span>()</span><br><span class="line">    generator.notificationOccurred(.success)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用这个方法</span></span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    .onTapGesture(perform: simpleSuccess)</span><br></pre></td></tr></table></figure><p>以上点击以后就会出现震动,这是.success模式,还可以替换成.success &#x2F; .error &#x2F; .warning这些模式,<br>用下来感觉都差不多,但还是有差别的。</p><h3 id="prepare-–-解决UINotificationFeedbackGenerator-可能延迟一秒钟的问题"><a href="#prepare-–-解决UINotificationFeedbackGenerator-可能延迟一秒钟的问题" class="headerlink" title="prepare() – 解决UINotificationFeedbackGenerator()可能延迟一秒钟的问题"></a>prepare() – 解决UINotificationFeedbackGenerator()可能延迟一秒钟的问题</h3><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/making-iphones-vibrate-with-uinotificationfeedbackgenerator">https://www.hackingwithswift.com/books/ios-swiftui/making-iphones-vibrate-with-uinotificationfeedbackgenerator</a></p></blockquote><p>UINotificationFeedbackGenerator()的触动反馈,是需要Taptic Engine预热的,不然可能会有一秒左右的延迟,所以引入其的prepare()方法,就是预热的准备。</p><p>示例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> feedback <span class="operator">=</span> <span class="type">UINotificationFeedbackGenerator</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里View的代码省略了</span></span><br><span class="line">    someView</span><br><span class="line">    .gesture(</span><br><span class="line">        <span class="type">DragGesture</span>()</span><br><span class="line">            .onChanged &#123; gesture <span class="keyword">in</span></span><br><span class="line">                offset <span class="operator">=</span> gesture.translation</span><br><span class="line">                feedback.prepare()</span><br><span class="line">            &#125;</span><br><span class="line">            .onEnded &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">abs</span>(offset.width) <span class="operator">&gt;</span> <span class="number">100</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> offset.width <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">                        feedback.notificationOccurred(.success)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        feedback.notificationOccurred(.error)</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    removal<span class="operator">?</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    offset <span class="operator">=</span> .zero</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Core-Haptics-–-可自定义的震动模式"><a href="#Core-Haptics-–-可自定义的震动模式" class="headerlink" title="Core Haptics – 可自定义的震动模式"></a>Core Haptics – 可自定义的震动模式</h2><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/making-vibrations-with-uinotificationfeedbackgenerator-and-core-haptics">https://www.hackingwithswift.com/books/ios-swiftui/making-vibrations-with-uinotificationfeedbackgenerator-and-core-haptics</a></p></blockquote><p>这是CoreHaptics模块</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreHaptics</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> engine: <span class="type">CHHapticEngine</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">prepareHaptics</span>() &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="type">CHHapticEngine</span>.capabilitiesForHardware().supportsHaptics <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            engine <span class="operator">=</span> <span class="keyword">try</span> <span class="type">CHHapticEngine</span>()</span><br><span class="line">            <span class="keyword">try</span> engine<span class="operator">?</span>.start()</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;There was an error creating the engine: <span class="subst">\(error.localizedDescription)</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">complexSuccess</span>() &#123;</span><br><span class="line">        <span class="comment">// make sure that the device supports haptics</span></span><br><span class="line">        <span class="keyword">guard</span> <span class="type">CHHapticEngine</span>.capabilitiesForHardware().supportsHaptics <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> events <span class="operator">=</span> [<span class="type">CHHapticEvent</span>]()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create one intense, sharp tap</span></span><br><span class="line">        <span class="keyword">let</span> intensity <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticIntensity, value: <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">let</span> sharpness <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticSharpness, value: <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">let</span> event <span class="operator">=</span> <span class="type">CHHapticEvent</span>(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: <span class="number">0</span>)</span><br><span class="line">        events.append(event)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// convert those events into a pattern and play it immediately</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pattern <span class="operator">=</span> <span class="keyword">try</span> <span class="type">CHHapticPattern</span>(events: events, parameters: [])</span><br><span class="line">            <span class="keyword">let</span> player <span class="operator">=</span> <span class="keyword">try</span> engine<span class="operator">?</span>.makePlayer(with: pattern)</span><br><span class="line">            <span class="keyword">try</span> player<span class="operator">?</span>.start(atTime: <span class="number">0</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Failed to play pattern: <span class="subst">\(error.localizedDescription)</span>.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">            .onAppear(perform: prepareHaptics)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                complexSuccess()</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码就自定义了一个点击后的震动,感觉起来,好像也没什么特别的,但如果你将complexSuccess方法中的create one intense, sharp tap下面的代码换成如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="number">1</span>, by: <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> intensity <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticIntensity, value: <span class="type">Float</span>(i))</span><br><span class="line">    <span class="keyword">let</span> sharpness <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticSharpness, value: <span class="type">Float</span>(i))</span><br><span class="line">    <span class="keyword">let</span> event <span class="operator">=</span> <span class="type">CHHapticEvent</span>(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: i)</span><br><span class="line">    events.append(event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="number">1</span>, by: <span class="number">0.1</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> intensity <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticIntensity, value: <span class="type">Float</span>(<span class="number">1</span> <span class="operator">-</span> i))</span><br><span class="line">    <span class="keyword">let</span> sharpness <span class="operator">=</span> <span class="type">CHHapticEventParameter</span>(parameterID: .hapticSharpness, value: <span class="type">Float</span>(<span class="number">1</span> <span class="operator">-</span> i))</span><br><span class="line">    <span class="keyword">let</span> event <span class="operator">=</span> <span class="type">CHHapticEvent</span>(eventType: .hapticTransient, parameters: [intensity, sharpness], relativeTime: <span class="number">1</span> <span class="operator">+</span> i)</span><br><span class="line">    events.append(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这震动就非常的特别。</p><h1 id="contentShape-modifier"><a href="#contentShape-modifier" class="headerlink" title="contentShape() modifier"></a>contentShape() modifier</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Circle</span>()</span><br><span class="line">    .fill(.red)</span><br><span class="line">    .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">    .contentShape(<span class="type">Rectangle</span>())</span><br><span class="line">    .onTapGesture &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Circle tapped!&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没有.contentShape(Rectangle())的时候,点击在圆以外是没有响应的,<br>若有.contentShape(Rectangle())的时候,点击在圆以外的正方形边缘上,是会有响应的。</p><p>此外,还有一个用处:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    <span class="type">Spacer</span>().frame(height: <span class="number">100</span>)</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;World&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.contentShape(<span class="type">Rectangle</span>())</span><br><span class="line">.onTapGesture &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;VStack tapped!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有.contentShape(Rectangle())的时候,点击在Spacer()范围,是没有反应的;<br>若有.contentShape(Rectangle())的时候,点击在Spacer()范围,是会有反应的。</p><h1 id="如何获知app到了后台-或者是不活跃状态"><a href="#如何获知app到了后台-或者是不活跃状态" class="headerlink" title="如何获知app到了后台,或者是不活跃状态?"></a>如何获知app到了后台,或者是不活跃状态?</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/how-to-be-notified-when-your-swiftui-app-moves-to-the-background">https://www.hackingwithswift.com/books/ios-swiftui/how-to-be-notified-when-your-swiftui-app-moves-to-the-background</a></p></blockquote><p>首先,获取环境变量scenePhase;<br>其次,使用onChange()观察这个环境变量scenePhase;<br>最后,根据scenePhase的三种可能的状态(.active &#x2F; .inactive &#x2F; .background)做出回应。</p><p>例子如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.scenePhase) <span class="keyword">var</span> scenePhase</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">            .padding()</span><br><span class="line">            .onChange(of: scenePhase) &#123; newPhase <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> newPhase <span class="operator">==</span> .active &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Active&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> newPhase <span class="operator">==</span> .inactive &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Inactive&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> newPhase <span class="operator">==</span> .background &#123;</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Background&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经操作发现,总是这样的流程:<br>.active与.background之间的转换,总是当中会有个过渡,即.inactive。</p><h1 id="Accessibility-辅助功能"><a href="#Accessibility-辅助功能" class="headerlink" title="Accessibility 辅助功能"></a>Accessibility 辅助功能</h1><h2 id="给色盲人群的设置"><a href="#给色盲人群的设置" class="headerlink" title="给色盲人群的设置"></a>给色盲人群的设置</h2><p>For example, one of the accessibility options is “Differentiate without color”, which is helpful for the 1 in 12 men who have color blindness. When this setting is enabled, apps should try to make their UI clearer using shapes, icons, and textures rather than colors.<br>需要使用到一个环境变量,来侦测是否处于“Differentiate without color”模式:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.accessibilityDifferentiateWithoutColor) <span class="keyword">var</span> differentiateWithoutColor</span><br></pre></td></tr></table></figure><p>具体实例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.accessibilityDifferentiateWithoutColor) <span class="keyword">var</span> differentiateWithoutColor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> differentiateWithoutColor &#123;</span><br><span class="line">                <span class="type">Image</span>(systemName: <span class="string">&quot;checkmark.circle&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .padding()</span><br><span class="line">        .background(differentiateWithoutColor <span class="operator">?</span> .black : .green)</span><br><span class="line">        .foregroundColor(.white)</span><br><span class="line">        .clipShape(<span class="type">Capsule</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何在模拟器中使用到“Differentiate without color”模式:<br><img src="/Images/differentiateWithoutColor.gif" alt="&quot;differentiateWithoutColor&quot;"></p><h2 id="简化动画渲染–不要动画"><a href="#简化动画渲染–不要动画" class="headerlink" title="简化动画渲染–不要动画"></a>简化动画渲染–不要动画</h2><p>不要动画渲染,侦测的是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.accessibilityReduceMotion) <span class="keyword">var</span> reduceMotion</span><br></pre></td></tr></table></figure><p>具体实例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.accessibilityReduceMotion) <span class="keyword">var</span> reduceMotion</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> scale <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .scaleEffect(scale)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                <span class="keyword">if</span> reduceMotion &#123;</span><br><span class="line">                    scale <span class="operator">*=</span> <span class="number">1.5</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    withAnimation &#123;</span><br><span class="line">                        scale <span class="operator">*=</span> <span class="number">1.5</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上虽然还可以,但是,每次都要if…else…的判断,比较麻烦,所以下面的方法withOptionalAnimation可以替代withAnimation：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">withOptionalAnimation</span>&lt;<span class="type">Result</span>&gt;(<span class="keyword">_</span> <span class="params">animation</span>: <span class="type">Animation</span>? <span class="operator">=</span> .default, <span class="keyword">_</span> <span class="params">body</span>: () <span class="keyword">throws</span> -&gt; <span class="type">Result</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.isReduceMotionEnabled &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> body()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> withAnimation(animation, body)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的代码是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"><span class="comment">//    @Environment(\.accessibilityReduceMotion) var reduceMotion</span></span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> scale <span class="operator">=</span> <span class="number">1.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">withOptionalAnimation</span>&lt;<span class="type">Result</span>&gt;(<span class="keyword">_</span> <span class="params">animation</span>: <span class="type">Animation</span>? <span class="operator">=</span> .default, <span class="keyword">_</span> <span class="params">body</span>: () <span class="keyword">throws</span> -&gt; <span class="type">Result</span>) <span class="keyword">rethrows</span> -&gt; <span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">UIAccessibility</span>.isReduceMotionEnabled &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> body()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> withAnimation(animation, body)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World&quot;</span>)</span><br><span class="line">            .scaleEffect(scale)</span><br><span class="line">            .onTapGesture &#123;</span><br><span class="line">                withOptionalAnimation &#123;</span><br><span class="line">                    scale <span class="operator">*=</span> <span class="number">1.5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简化透明度渲染–不要透明度"><a href="#简化透明度渲染–不要透明度" class="headerlink" title="简化透明度渲染–不要透明度"></a>简化透明度渲染–不要透明度</h2><p>不要透明度渲染,侦测的是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Environment</span>(\.accessibilityReduceTransparency) <span class="keyword">var</span> reduceTransparency</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>具体实例:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.accessibilityReduceTransparency) <span class="keyword">var</span> reduceTransparency</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">            .padding()</span><br><span class="line">            .background(reduceTransparency <span class="operator">?</span> .black : .black.opacity(<span class="number">0.5</span>))</span><br><span class="line">            .foregroundColor(.white)</span><br><span class="line">            .clipShape(<span class="type">Capsule</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><h2 id="AlignmentGuides"><a href="#AlignmentGuides" class="headerlink" title="AlignmentGuides"></a>AlignmentGuides</h2><blockquote><p><a href="https://www.jianshu.com/p/ddd4d177fada">https://www.jianshu.com/p/ddd4d177fada</a><br>这篇文章写的挺好。</p></blockquote><h3 id="自定义alignment-guide"><a href="#自定义alignment-guide" class="headerlink" title="自定义alignment guide"></a>自定义alignment guide</h3><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/how-to-create-a-custom-alignment-guide">https://www.hackingwithswift.com/books/ios-swiftui/how-to-create-a-custom-alignment-guide</a></p></blockquote><h2 id="GeometryReader"><a href="#GeometryReader" class="headerlink" title="GeometryReader"></a>GeometryReader</h2><p>Which coordinate space you want to use depends on what question you want to answer:</p><ul><li>Want to know where this view is on the screen? Use the global space.</li><li>Want to know where this view is relative to its parent? Use the local space.</li><li>What to know where this view is relative to some other view? Use a custom space.</li></ul><h1 id="Environment-horizontalSizeClass-–-获取屏幕是竖屏还是横屏状态"><a href="#Environment-horizontalSizeClass-–-获取屏幕是竖屏还是横屏状态" class="headerlink" title="@Environment(.horizontalSizeClass) – 获取屏幕是竖屏还是横屏状态"></a>@Environment(.horizontalSizeClass) – 获取屏幕是竖屏还是横屏状态</h1><p>we have only two size classes horizontally and vertically, called “compact” and “regular”.<br>竖屏是compact,横屏是regular。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Environment</span>(\.horizontalSizeClass) <span class="keyword">var</span> sizeClass</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> sizeClass <span class="operator">==</span> .compact &#123;</span><br><span class="line">            <span class="type">VStack</span> &#123;</span><br><span class="line">                <span class="type">UserView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">HStack</span> &#123;</span><br><span class="line">                <span class="type">UserView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="searchable-modifier"><a href="#searchable-modifier" class="headerlink" title="searchable() modifier"></a>searchable() modifier</h1><blockquote><p><a href="https://www.hackingwithswift.com/books/ios-swiftui/making-a-swiftui-view-searchable">https://www.hackingwithswift.com/books/ios-swiftui/making-a-swiftui-view-searchable</a></p></blockquote><p>搜索框的用法。<br>一定要在NavigationView中使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> searchText <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Searching for <span class="subst">\(searchText)</span>&quot;</span>)</span><br><span class="line">                .searchable(text: <span class="variable">$searchText</span>, prompt: <span class="string">&quot;Look for something&quot;</span>)</span><br><span class="line">                .navigationTitle(<span class="string">&quot;Searching&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/searchable.png" alt="&quot;searchable&quot;"></p><p>下面是一个案例,对于页面中的内容的搜索和过滤功能：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> searchText <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">let</span> allNames <span class="operator">=</span> [<span class="string">&quot;Subh&quot;</span>, <span class="string">&quot;Vina&quot;</span>, <span class="string">&quot;Melvin&quot;</span>, <span class="string">&quot;Stefanie&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span>(filteredNames, id: \.<span class="keyword">self</span>) &#123; name <span class="keyword">in</span></span><br><span class="line">                <span class="type">Text</span>(name)</span><br><span class="line">            &#125;</span><br><span class="line">            .searchable(text: <span class="variable">$searchText</span>, prompt: <span class="string">&quot;Look for something&quot;</span>)</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Searching&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> filteredNames: [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> searchText.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> allNames</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> allNames.filter &#123; <span class="variable">$0</span>.contains(searchText) &#125;</span><br><span class="line">            <span class="comment">// 使用localizedCaseInsensitiveContains()可以忽略大小写</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜索框实际是被隐藏的,所以需要下拉List:<br><img src="/Images/searchable.gif" alt="&quot;searchable&quot;"></p><p>还有searchCompletion() modifier for each suggestion:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Holly&quot;</span>, <span class="string">&quot;Josh&quot;</span>, <span class="string">&quot;Rhonda&quot;</span>, <span class="string">&quot;Ted&quot;</span>]</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> searchText <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">NavigationView</span> &#123;</span><br><span class="line">            <span class="type">List</span> &#123;</span><br><span class="line">                <span class="type">ForEach</span>(searchResults, id: \.<span class="keyword">self</span>) &#123; name <span class="keyword">in</span></span><br><span class="line">                    <span class="type">NavigationLink</span>(destination: <span class="type">Text</span>(name)) &#123;</span><br><span class="line">                        <span class="type">Text</span>(name)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .searchable(text: <span class="variable">$searchText</span>) &#123;</span><br><span class="line">                <span class="type">ForEach</span>(searchResults, id: \.<span class="keyword">self</span>) &#123; result <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Are you looking for <span class="subst">\(result)</span>?&quot;</span>).searchCompletion(result)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(<span class="string">&quot;Contacts&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> searchResults: [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">if</span> searchText.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> names</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> names.filter &#123; <span class="variable">$0</span>.contains(searchText) &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/searchCompletion.gif" alt="searchCompletion"></p><h1 id="SF-Symbol"><a href="#SF-Symbol" class="headerlink" title="SF Symbol"></a>SF Symbol</h1><h2 id="custom-colors-and-transparency-with-SF-Symbols"><a href="#custom-colors-and-transparency-with-SF-Symbols" class="headerlink" title="custom colors and transparency with SF Symbols"></a>custom colors and transparency with SF Symbols</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;person.3.sequence.fill&quot;</span>)</span><br><span class="line">    .symbolRenderingMode(.palette)</span><br><span class="line">    .foregroundStyle(.blue, .green, .red)</span><br><span class="line">    .font(.system(size: <span class="number">144</span>))</span><br></pre></td></tr></table></figure><p><img src="/Images/palette1.png" alt="&quot;palette_1&quot;"></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;person.3.sequence.fill&quot;</span>)</span><br><span class="line">    .symbolRenderingMode(.palette)</span><br><span class="line">    .foregroundStyle(</span><br><span class="line">        .linearGradient(colors: [.red, .black], startPoint: .top, endPoint: .bottomTrailing),</span><br><span class="line">        .linearGradient(colors: [.green, .black], startPoint: .top, endPoint: .bottomTrailing),</span><br><span class="line">        .linearGradient(colors: [.blue, .black], startPoint: .top, endPoint: .bottomTrailing)</span><br><span class="line">    )</span><br><span class="line">    .font(.system(size: <span class="number">144</span>))</span><br></pre></td></tr></table></figure><p><img src="/Images/palette2.png" alt="&quot;palette_2&quot;"><br>以上代码使用的是.foregroundStyle,而不是.foregroundColor。</p><h1 id="layout-页面布局"><a href="#layout-页面布局" class="headerlink" title="layout - 页面布局"></a>layout - 页面布局</h1><h2 id="fixedSize-–-How-to-make-two-views-the-same-width-or-height"><a href="#fixedSize-–-How-to-make-two-views-the-same-width-or-height" class="headerlink" title="fixedSize() – How to make two views the same width or height?"></a>fixedSize() – How to make two views the same width or height?</h2><p>用处,可以让HStack中的元素等高,可以让VStack中的元素等宽,看上去会很舒服。</p><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-two-views-the-same-width-or-height">https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-two-views-the-same-width-or-height</a></p></blockquote><p>example 1:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HStack</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;This is a short string.&quot;</span>)</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(maxHeight: .infinity)</span><br><span class="line">        .background(.red)</span><br><span class="line"></span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;This is a very long string with lots and lots of text that will definitely run across multiple lines because it&#x27;s just so long.&quot;</span>)</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(maxHeight: .infinity)</span><br><span class="line">        .background(.green)</span><br><span class="line">&#125;</span><br><span class="line">.fixedSize(horizontal: <span class="literal">false</span>, vertical: <span class="literal">true</span>)</span><br><span class="line">.frame(maxHeight: <span class="number">200</span>)</span><br></pre></td></tr></table></figure><p><img src="/Images/fixedSize_1.webp" alt="&quot;fixedSize&quot;"></p><p>example 2:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VStack</span> &#123;</span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Log in&quot;</span>) &#123; &#125;</span><br><span class="line">        .foregroundColor(.white)</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(maxWidth: .infinity)</span><br><span class="line">        .background(.red)</span><br><span class="line">        .clipShape(<span class="type">Capsule</span>())</span><br><span class="line"></span><br><span class="line">    <span class="type">Button</span>(<span class="string">&quot;Reset Password&quot;</span>) &#123; &#125;</span><br><span class="line">        .foregroundColor(.white)</span><br><span class="line">        .padding()</span><br><span class="line">        .frame(maxWidth: .infinity)</span><br><span class="line">        .background(.red)</span><br><span class="line">        .clipShape(<span class="type">Capsule</span>())</span><br><span class="line">&#125;</span><br><span class="line">.fixedSize(horizontal: <span class="literal">true</span>, vertical: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><img src="/Images/fixedSize_2.webp" alt="&quot;fixedSize&quot;"></p><h2 id="safeAreaInset-–-modifier"><a href="#safeAreaInset-–-modifier" class="headerlink" title="safeAreaInset() – modifier"></a>safeAreaInset() – modifier</h2><p>是在safe area区域内插入内容,区别于ignoresSafeArea(),完全不同的概念。</p><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-inset-the-safe-area-with-custom-content">https://www.hackingwithswift.com/quick-start/swiftui/how-to-inset-the-safe-area-with-custom-content</a></p></blockquote><p>在safe area中插入一个文本:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">List</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Row <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationTitle(<span class="string">&quot;Select a row&quot;</span>)</span><br><span class="line">    .safeAreaInset(edge: .bottom) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Outside Safe Area&quot;</span>)</span><br><span class="line">            .font(.largeTitle)</span><br><span class="line">            .foregroundColor(.white)</span><br><span class="line">            .frame(maxWidth: .infinity)</span><br><span class="line">            .padding()</span><br><span class="line">            .background(.indigo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/safeAreaInset_1.webp" alt="&quot;safeAreaInset&quot;"></p><p>在safe area中插入一个按钮,并且靠右排列:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line">    <span class="type">List</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Row <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    .navigationTitle(<span class="string">&quot;Select a row&quot;</span>)</span><br><span class="line">    .safeAreaInset(edge: .bottom, alignment: .trailing) &#123;</span><br><span class="line">        <span class="type">Button</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Show help&quot;</span>)</span><br><span class="line">        &#125; label: &#123;</span><br><span class="line">            <span class="type">Image</span>(systemName: <span class="string">&quot;info.circle.fill&quot;</span>)</span><br><span class="line">                .font(.largeTitle)</span><br><span class="line">                .symbolRenderingMode(.multicolor)</span><br><span class="line">                .padding(.trailing)</span><br><span class="line">        &#125;</span><br><span class="line">        .accessibilityLabel(<span class="string">&quot;Show help&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/safeAreaInset_2.webp" alt="&quot;safeAreaInset&quot;"></p><h2 id="ScrollViewReader"><a href="#ScrollViewReader" class="headerlink" title="ScrollViewReader"></a>ScrollViewReader</h2><p>在ScrollView中进行定位的作用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScrollViewReader</span> inside it. <span class="type">This</span> provides a scrollTo() method that can move to <span class="keyword">any</span> view inside the parent scrollview, just by providing its anchor.</span><br><span class="line"></span><br><span class="line"><span class="type">For</span> example, this creates <span class="number">100</span> colored boxes <span class="keyword">in</span> a vertical scroll view, and when you press the button it will scroll directly to the box with <span class="type">ID</span> <span class="number">8</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> colors: [<span class="type">Color</span>] <span class="operator">=</span> [.red, .green, .blue]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            <span class="type">ScrollViewReader</span> &#123; value <span class="keyword">in</span></span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Jump to #8&quot;</span>) &#123;</span><br><span class="line">                    value.scrollTo(<span class="number">8</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                .padding()</span><br><span class="line"></span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Example <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">                        .font(.title)</span><br><span class="line">                        .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">                        .background(colors[i <span class="operator">%</span> colors.count])</span><br><span class="line">                        .id(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(height: <span class="number">350</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/scrollviewreader.gif" alt="ScrollViewReader"></p><h3 id="ScrollViewReader-anchor"><a href="#ScrollViewReader-anchor" class="headerlink" title="ScrollViewReader - anchor"></a>ScrollViewReader - anchor</h3><p>让定位的图片向上对齐:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">anchor, to control <span class="keyword">where</span> your target view should be positioned after the scroll has completed.</span><br><span class="line"></span><br><span class="line"><span class="type">For</span> example, this will scroll to the same view <span class="keyword">as</span> before, except this time place that view at the top:</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> colors: [<span class="type">Color</span>] <span class="operator">=</span> [.red, .green, .blue]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ScrollView</span> &#123;</span><br><span class="line">            <span class="type">ScrollViewReader</span> &#123; value <span class="keyword">in</span></span><br><span class="line">                <span class="type">Button</span>(<span class="string">&quot;Jump to #8&quot;</span>) &#123;</span><br><span class="line">                    value.scrollTo(<span class="number">8</span>, anchor: .top)</span><br><span class="line">                &#125;</span><br><span class="line">                .padding()</span><br><span class="line"></span><br><span class="line">                <span class="type">ForEach</span>(<span class="number">0</span><span class="operator">..&lt;</span><span class="number">100</span>) &#123; i <span class="keyword">in</span></span><br><span class="line">                    <span class="type">Text</span>(<span class="string">&quot;Example <span class="subst">\(i)</span>&quot;</span>)</span><br><span class="line">                        .font(.title)</span><br><span class="line">                        .frame(width: <span class="number">200</span>, height: <span class="number">200</span>)</span><br><span class="line">                        .background(colors[i <span class="operator">%</span> colors.count])</span><br><span class="line">                        .id(i)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(height: <span class="number">350</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/scrollviewreader-anchor.gif" alt="ScrollViewReader-anchor"></p><h1 id="picker"><a href="#picker" class="headerlink" title="picker"></a>picker</h1><h2 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h2><p>颜色选择器:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> bgColor <span class="operator">=</span> <span class="type">Color</span>.red</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">ColorPicker</span>(<span class="string">&quot;Set the background color&quot;</span>, selection: <span class="variable">$bgColor</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .frame(maxWidth: .infinity, maxHeight: .infinity)</span><br><span class="line">        .background(bgColor)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/Images/colorPicker.jpg" alt="ColorPicker"><br>上图可以看到opacity的选择,若不需要该功能,可以:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ColorPicker</span>(<span class="string">&quot;Set the background color&quot;</span>, selection: <span class="variable">$bgColor</span>, supportsOpacity: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h1 id="Link-–-opens-a-URL-in-Safari-when-pressed"><a href="#Link-–-opens-a-URL-in-Safari-when-pressed" class="headerlink" title="Link – opens a URL in Safari when pressed"></a>Link – opens a URL in Safari when pressed</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Link</span>(<span class="string">&quot;Learn SwiftUI&quot;</span>, destination: <span class="type">URL</span>(string: <span class="string">&quot;https://www.hackingwithswift.com/quick-start/swiftui&quot;</span>)<span class="operator">!</span>)</span><br></pre></td></tr></table></figure><p>按下这个类似按钮的view后,就会用Safari打开该URL网页。</p><h1 id="程序的启动"><a href="#程序的启动" class="headerlink" title="程序的启动"></a>程序的启动</h1><p>your app launches through one struct that conforms to the App protocol. Its job is to create your initial view using either WindowGroup, DocumentGroup, or similar.<br>比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SwiftUITestApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">TabView</span> &#123;</span><br><span class="line">                <span class="type">HomeView</span>()</span><br><span class="line">                <span class="type">ContactsView</span>()</span><br><span class="line">                <span class="type">LocationView</span>()</span><br><span class="line">                <span class="type">AccountView</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本来WindowGroup中是放置的ContentView()的,但你也可以放置TabView,会更方便。</p><p>另外,你也可以放一些启动程序,获取些数据什么的,都是比较有用的,比如:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@main</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ExampleApp</span>: <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="comment">// register initial UserDefaults values every launch</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="type">UserDefaults</span>.standard.register(defaults: [</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Taylor Swift&quot;</span>,</span><br><span class="line">            <span class="string">&quot;highScore&quot;</span>: <span class="number">10</span></span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> &#123;</span><br><span class="line">        <span class="type">WindowGroup</span> &#123;</span><br><span class="line">            <span class="type">ContentView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在body被call之前，init()就先行启动了。</p><h1 id="detect-device-rotation-–-portrait-or-landscape-orientation"><a href="#detect-device-rotation-–-portrait-or-landscape-orientation" class="headerlink" title="detect device rotation – portrait or landscape orientation"></a>detect device rotation – portrait or landscape orientation</h1><p>检测屏幕是竖屏还是横屏。</p><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-detect-device-rotation">https://www.hackingwithswift.com/quick-start/swiftui/how-to-detect-device-rotation</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Our custom view modifier to track rotation and</span></span><br><span class="line"><span class="comment">// call our action</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DeviceRotationViewModifier</span>: <span class="title class_">ViewModifier</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> action: (<span class="type">UIDeviceOrientation</span>) -&gt; <span class="type">Void</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">body</span>(<span class="params">content</span>: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        content</span><br><span class="line">            .onAppear()</span><br><span class="line">            .onReceive(<span class="type">NotificationCenter</span>.default.publisher(for: <span class="type">UIDevice</span>.orientationDidChangeNotification)) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">                action(<span class="type">UIDevice</span>.current.orientation)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A View wrapper to make the modifier easier to use</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">onRotate</span>(<span class="params">perform</span> <span class="params">action</span>: <span class="keyword">@escaping</span> (<span class="type">UIDeviceOrientation</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.modifier(<span class="type">DeviceRotationViewModifier</span>(action: action))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An example view to demonstrate the solution</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">private</span> <span class="keyword">var</span> orientation <span class="operator">=</span> <span class="type">UIDeviceOrientation</span>.unknown</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Group</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> orientation.isPortrait &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Portrait&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> orientation.isLandscape &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Landscape&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> orientation.isFlat &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Flat&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Text</span>(<span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .onRotate &#123; newOrientation <span class="keyword">in</span></span><br><span class="line">            orientation <span class="operator">=</span> newOrientation</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/detectDeviceRotation.webp" alt="detectDeviceRotation"></p><h1 id="DisclosureGroup-view"><a href="#DisclosureGroup-view" class="headerlink" title="DisclosureGroup - view"></a>DisclosureGroup - view</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DisclosureGroup</span>(<span class="string">&quot;Show Terms&quot;</span>) &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Long terms and conditions here long terms and conditions here long terms and conditions here long terms and conditions here long terms and conditions here long terms and conditions here.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">.frame(width: <span class="number">300</span>)</span><br></pre></td></tr></table></figure><p><img src="/Images/disclosuregroup.gif" alt="disclosuregroup"></p><h1 id="GroupBox-Containers"><a href="#GroupBox-Containers" class="headerlink" title="GroupBox - Containers"></a>GroupBox - Containers</h1><p>GroupBox会有一个明显的背景色,里面放view的话,感觉和Group差不多:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GroupBox</span> &#123;</span><br><span class="line">    <span class="type">Text</span>(<span class="string">&quot;Outer Content&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">GroupBox</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Middle Content&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="type">GroupBox</span> &#123;</span><br><span class="line">            <span class="type">Text</span>(<span class="string">&quot;Inner Content&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/groupbox_1.png" alt="GroupBox"></p><p>还能在GroupBox加上抬头:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GroupBox</span>(<span class="string">&quot;Your account&quot;</span>) &#123;</span><br><span class="line">    <span class="type">VStack</span>(alignment: .leading) &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Username: tswift89&quot;</span>)</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;City: Nashville&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/groupbox_2.png" alt="GroupBox"></p><h1 id="mask-–-modifier"><a href="#mask-–-modifier" class="headerlink" title="mask – modifier"></a>mask – modifier</h1><p>不同于clipShape(),这是在前面的view上加一层面具,而且只取面具能覆盖的那部分:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(<span class="string">&quot;laser-show&quot;</span>)</span><br><span class="line">    .resizable()</span><br><span class="line">    .frame(width: <span class="number">300</span>, height: <span class="number">300</span>)</span><br><span class="line">    .mask(</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;SWIFT!&quot;</span>)</span><br><span class="line">            .font(.system(size: <span class="number">72</span>))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><img src="/Images/mask.webp" alt="mask"></p><h1 id="preivew-your-layout"><a href="#preivew-your-layout" class="headerlink" title="preivew your layout"></a>preivew your layout</h1><h2 id="sizeCategory-environment-value-–-preview-your-layout-at-different-Dynamic-Type-sizes"><a href="#sizeCategory-environment-value-–-preview-your-layout-at-different-Dynamic-Type-sizes" class="headerlink" title=".sizeCategory environment value – preview your layout at different Dynamic Type sizes"></a>.sizeCategory environment value – preview your layout at different Dynamic Type sizes</h2><p>测试你的页面在不同字体大小的情况下的显示效果,可以使用.sizeCategory environment value</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> view &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">            .environment(\.sizeCategory, .extraSmall)</span><br><span class="line"></span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line"></span><br><span class="line">        <span class="type">ContentView</span>()</span><br><span class="line">            .environment(\.sizeCategory, .accessibilityExtraExtraExtraLarge)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>各个情况的显示效果:<br><img src="/Images/sizeCategory.webp" alt="sizeCategory"><br>在自己的程序中测试各个字体版本的显示效果,对于页面设计是有好处的。</p><h2 id="preferredColorScheme-dark-–-modifier"><a href="#preferredColorScheme-dark-–-modifier" class="headerlink" title="preferredColorScheme(.dark) – modifier"></a>preferredColorScheme(.dark) – modifier</h2><p>preview your layout in light and dark mode.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ContentView</span>().preferredColorScheme(.dark)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是这样显示的:<br><img src="/Images/preferredColorScheme_1.webp" alt="preferredColorScheme"></p><p>也可以多种效果一起显示:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="type">ColorScheme</span>.allCases, id: \.<span class="keyword">self</span>) &#123; </span><br><span class="line">             <span class="type">ContentView</span>().preferredColorScheme(<span class="variable">$0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是这样显示的:<br><img src="/Images/preferredColorScheme_2.webp" alt="preferredColorScheme"><br>精简的代码也可以这样写:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">ForEach</span>(<span class="type">ColorScheme</span>.allCases, id: \.<span class="keyword">self</span>, content: <span class="type">ContentView</span>().preferredColorScheme)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="previewDevice-–-modifier-preview-your-layout-in-different-devices"><a href="#previewDevice-–-modifier-preview-your-layout-in-different-devices" class="headerlink" title=".previewDevice() – modifier -preview your layout in different devices"></a>.previewDevice() – modifier -preview your layout in different devices</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ContentView</span>()</span><br><span class="line">    .previewDevice(<span class="type">PreviewDevice</span>(rawValue: <span class="string">&quot;iPhone 12 Pro Max&quot;</span>))</span><br><span class="line">    .previewDisplayName(<span class="string">&quot;iPhone 12&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="Self-printChanges-–-method"><a href="#Self-printChanges-–-method" class="headerlink" title="Self._printChanges() – method"></a>Self._printChanges() – method</h2><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-find-which-data-change-is-causing-a-swiftui-view-to-update">https://www.hackingwithswift.com/quick-start/swiftui/how-to-find-which-data-change-is-causing-a-swiftui-view-to-update</a></p></blockquote><p>The Self._printChanges() method should be called inside the body property.<br>可以用来观察View的变化:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EvilStateObject</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> timer: <span class="type">Timer</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        timer <span class="operator">=</span> <span class="type">Timer</span>.scheduledTimer(</span><br><span class="line">            withTimeInterval: <span class="number">1</span>,</span><br><span class="line">            repeats: <span class="literal">true</span></span><br><span class="line">        ) &#123; <span class="keyword">_</span> <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="type">Int</span>.random(in: <span class="number">1</span><span class="operator">...</span><span class="number">5</span>) <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.objectWillChange.send()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@StateObject</span> <span class="keyword">private</span> <span class="keyword">var</span> evilObject <span class="operator">=</span> <span class="type">EvilStateObject</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">Self</span>._printChanges()</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;What could possibly go wrong?&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/Images/printChanges.gif" alt="printChanges"></p><p>上述出处文章中还讲到了一个方法,即对特定View生成随机背景色,当下次View再次被revoked的时候,背景色就会变化,就能知道是否出现变化了。</p><h2 id="Instruments-–-profile-your-SwiftUI-code-and-identify-slow-layouts"><a href="#Instruments-–-profile-your-SwiftUI-code-and-identify-slow-layouts" class="headerlink" title="Instruments – profile your SwiftUI code and identify slow layouts"></a>Instruments – profile your SwiftUI code and identify slow layouts</h2><blockquote><p><a href="https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts">https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-instruments-to-profile-your-swiftui-code-and-identify-slow-layouts</a></p></blockquote><p>Instruments – 分析您的 SwiftUI 代码并识别慢速布局</p><p>使用方法:<br>按下Cmd+I启动Instruments,选择SwiftUI。打开后,按下record即可启动项目并观察了。</p><h1 id="跳出指定循环"><a href="#跳出指定循环" class="headerlink" title="跳出指定循环"></a>跳出指定循环</h1><p>在嵌套循环中,如何跳出指定循环,需要使用labeled statements。<br>Swift’s labeled statements allow us to name certain parts of our code, and it’s most commonly used for breaking out of nested loops.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outerLoop: <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> product <span class="operator">=</span> i <span class="operator">*</span> j</span><br><span class="line">        print (<span class="string">&quot;<span class="subst">\(i)</span> * <span class="subst">\(j)</span> is <span class="subst">\(product)</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> product <span class="operator">==</span> <span class="number">50</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;It&#x27;s a bullseye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span> outerLoop</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码,会直接跳出最外层循环,因为标记是跳出outerLoop这个循环。<br>outerLoop是可以任意取名的。<br>若只是brea,则只跳出当前循环。</p><p>此外,continue也是可以使用labeled statements的,但<br><a href="https://www.hackingwithswift.com/quick-start/understanding-swift/when-to-use-break-and-when-to-use-continue">https://www.hackingwithswift.com/quick-start/understanding-swift/when-to-use-break-and-when-to-use-continue</a><br>中称从来没有看到有人这么做过。</p><h1 id="catch-x2F-throws-x2F-rethrows"><a href="#catch-x2F-throws-x2F-rethrows" class="headerlink" title="catch &#x2F; throws &#x2F; rethrows"></a>catch &#x2F; throws &#x2F; rethrows</h1><blockquote><p><a href="https://www.donnywals.com/working-with-throwing-functions-in-swift/">https://www.donnywals.com/working-with-throwing-functions-in-swift/</a><br>从一个方面讲述了try…catch的应用,以及在func中定义throws和rethrows的场景。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h1&gt;&lt;h3 id=&quot;components-seperatedBy&quot;&gt;&lt;a href=&quot;#components-seperatedBy&quot; class=&quot;headerlink&quot; title=&quot;components(seperatedBy:)&quot;&gt;&lt;/a&gt;components(seperatedBy:)&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; input &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;a b c&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; letters &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; input.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(letters)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;trimmingCharacters-in&quot;&gt;&lt;a href=&quot;#trimmingCharacters-in&quot; class=&quot;headerlink&quot; title=&quot;trimmingCharacters(in:)&quot;&gt;&lt;/a&gt;trimmingCharacters(in:)&lt;/h3&gt;&lt;p&gt;we can ask Swift to trim all whitespace at the start and end of a string like this:&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; trimmed &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; someString.trimmingCharacters(in: .whitespacesAndNewlines)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;读取txt文件中的内容-并转化成String&quot;&gt;&lt;a href=&quot;#读取txt文件中的内容-并转化成String&quot; class=&quot;headerlink&quot; title=&quot;读取txt文件中的内容,并转化成String&quot;&gt;&lt;/a&gt;读取txt文件中的内容,并转化成String&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 例如读取项目中的start.txt文本文件中的内容,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 此外,该文本每行一个单词,随机读取一个单词:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; contentOfTxt &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bundle&lt;/span&gt;.main.url(forResource: &lt;span class=&quot;string&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;, withExtension: &lt;span class=&quot;string&quot;&gt;&amp;quot;txt&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; contentOfString &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;try?&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(contentsOf: contentOfTxt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; allWords &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; contentOfString.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&amp;quot;&lt;span class=&quot;subst&quot;&gt;\n&lt;/span&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; randomWord &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; allWords.randomElement() &lt;span class=&quot;operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果在func中,需要空return,并在下面if之外fatalError()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// fatalError()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;NSRange-amp-amp-rangeOfMisspelledWord-amp-amp-NSNotFound&quot;&gt;&lt;a href=&quot;#NSRange-amp-amp-rangeOfMisspelledWord-amp-amp-NSNotFound&quot; class=&quot;headerlink&quot; title=&quot;NSRange &amp;amp;&amp;amp; rangeOfMisspelledWord &amp;amp;&amp;amp; NSNotFound&quot;&gt;&lt;/a&gt;NSRange &amp;amp;&amp;amp; rangeOfMisspelledWord &amp;amp;&amp;amp; NSNotFound&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// rangeOfMisspelledWord:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initiates a search of a range of a string for a misspelled word.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rangeOfMisspelledWord&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;stringToCheck&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;params&quot;&gt;range&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;NSRange&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;params&quot;&gt;startingAt&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;startingOffset&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      &lt;span class=&quot;params&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;wrapFlag&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;params&quot;&gt;language&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;NSRange&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="iOS" scheme="http://giantslayer1980.github.io/categories/iOS/"/>
    
    <category term="SwiftUI" scheme="http://giantslayer1980.github.io/categories/iOS/SwiftUI/"/>
    
    
  </entry>
  
</feed>
